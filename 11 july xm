//abcd component 

import moment from "moment";
import React, { Component } from "react";
import autoBind from "react-autobind";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { configSetup, newFormBind, tableEntryUpdate } from "../../../../../../javascript/config";
import { fetchConfig } from "./config/config";
import API from '../../../api';

import {
    objectExists,
    traverseFormToBindValue,
    cloneObject,
    traverseObjectAndReturn,
    traverseObject
} from "../../../../../../javascript/utility";

import { mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal } from "../../../../../../javascript/mixins";

import { Spinner, Dialog, DialogContent, DialogActions, Button, Icon } from "@jpmuitk/components";
import { DataGrid } from "@jpmuitk/data-grid";

import Buttons from "../../../../../Common/Buttons/Buttons";
import FormBuilder from "../../../../../Common/FormBuilder";
import Header from "../../../../../Common/Header/Header";
import AddOnProduct from "../../../../../Common/AddOnProduct/AddOnProduct";

import * as appStateAction from "../../../../../../actions/appStateAction";
import { isReadWrite } from "../../../../../../javascript/entitlementUtils";
import { MessageBox } from "../../../../../Common/messagebox";

let selectedRowIdx = null;
let editingRowData = null;
let isEditMode = false;

class XMProfileFields extends Component {
    constructor(props) {
        super(props);

        this.gridApiRefs = {};

        this.state = {
            permissions: {
                readonly: this.getPermission(props),
            },
            config: null,
            toggleState: true,
            ready: true,
            selectedRows: [], 
            modal: {
                disabled: null,
                show: false,
                header: {},
                formdata: null,
                onUpdate: () => { },
                onSave: () => { },
            },
            resetFormFields: {
                resetIfSelected: [{ field: "frequency", value: "*" }],
                resetExclude: ["frequency"],
            },
        };

        this.bindedEvents = {
            CREATE_NEW_MASTER_AGREEMENT: () => {
                this.openMasterAgreementModal(false);
            },
            DELETE_SELECTED_MASTER_AGREEMENTS: () => {
                this.deleteSelectedRows();
            },
            VALIDATE_ECI_ON_BLUR :()=>{
                this.validateEciOnBlur();
            },
            VALIDATE_TIER_ON_BLUR:()=>{
                this.validateTierOnBlur();
            },
            VALIDATE_HOUSE_MULTIPLIER_ON_BLUR :()=>{
                this.validateHouseMultiplierOnBlur();
            }
        };

        autoBind(this);

        this.buttons = this.state.permissions.readonly
            ? [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
            ]
            : [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
                {
                    title: "Save Draft",
                    onclick: this.props.onSave,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Submit",
                    onclick: this.handleSubmit,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Deactivate",
                    onclick: this.props.onDeactivate,
                    displayIf: this.isProfileActive.bind(this),
                },
                {
                    title: "Activate",
                    onclick: this.props.onActivate,
                    displayIf: this.isProfileInactive.bind(this),
                },
            ];
    }

    getCurrentMasterAgreements = () => {
        return this.props.data?.compositeProfile?.legalAgreement?.attributes?.masterAgreements || [];
    };

    updateMasterAgreements = (newAgreements, callback = null) => {
        let formData = cloneObject(this.props.data || {});
        if (!formData.compositeProfile?.legalAgreement?.attributes) {
            this.initializeProfileData(formData);
        }
        formData.compositeProfile.legalAgreement.attributes.masterAgreements = [...newAgreements];
    
        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(formData);
        }
    
        if (this.gridApiRefs["masterAgreements"]) {
            this.gridApiRefs["masterAgreements"].setRowData([...newAgreements]);
        }
    
        if (callback) callback();
    };

    openMasterAgreementModal = (editMode = false) => {
        const data = this.props.data || this.props.profileData || {};
        let newEntry = null;

        selectedRowIdx = null;
        editingRowData = null;
        isEditMode = editMode;

        if (editMode) {
            const { selectedRows } = this.state;
            if (selectedRows.length === 0) {
                MessageBox.info('No Selection', 'Please select a row to edit.');
                return;
            }
            if (selectedRows.length > 1) {
                MessageBox.info('Multiple Selection', 'Please select only one row to edit.');
                return;
            }
            editingRowData = selectedRows[0];
        }

        let formData = newFormBind({ formdata: this.state.config.create.newMasterAgreements });

        if (editMode && editingRowData) {
            formData = this.prepopulateFormData(formData, editingRowData);
        }

        this.toggleModal({
            state: true,
            header: { title: editMode ? 'Edit Master Agreement' : 'Add New Master Agreement' },
            formdata: formData,
            onUpdate: (newdata) => {
                newEntry = tableEntryUpdate({ newdata, markSource: true });
            },
            onSave: async () => {
                this.setState({ resetTable: true }, async () => {
                    try {
                        const validationData = {
                            lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                            agreementId: newEntry.agreementId?.value || '',
                            profileType: newEntry.agreementType?.value || '',
                            legalEntityId: newEntry.legalEntityId?.value || '',
                            legalEntity: newEntry.legalEntity?.value || ''
                        };

                        if (!validationData.agreementId || !validationData.lineOfBusiness || !validationData.legalEntityId) {
                            MessageBox.error('Validation Error', 'Please fill in all required fields before saving.', 500);
                            this.setState({ resetTable: false });
                            return;
                        }

                        this.setState({ modal: { ...this.state.modal, disabled: true } });

                        try {
                            const validationResult = await API.validateMasterAgreement(validationData, this.props.appState?.lob?.toUpperCase() || 'XM');
                            
                            this.setState({ modal: { ...this.state.modal, disabled: false } });

                            if (!validationResult.success) {
                                MessageBox.error('Validation Failed', validationResult.reason || 'The master agreement data could not be validated. Please check your entries and try again.', 500);
                                this.setState({ resetTable: false });
                                return;
                            }
                        } catch (apiError) {
                            console.warn('API validation failed, proceeding anyway:', apiError);
                            this.setState({ modal: { ...this.state.modal, disabled: false } });
                        }

                        let exists = false;
                        const currentAgreements = this.getCurrentMasterAgreements();

                        if (currentAgreements) {
                            currentAgreements.forEach((item, index) => {
                                if (item.agreementId === newEntry.agreementId?.value) {
                                    if (!isEditMode || (isEditMode && JSON.stringify(item) !== JSON.stringify(editingRowData))) {
                                        exists = true;
                                        MessageBox.error('Validation Error', 'Agreement ID already exists. Please enter a unique Agreement ID.', 500);
                                    }
                                }
                            });
                        }

                        if (!exists) {
                            let updatedAgreements = [...currentAgreements];

                            if (isEditMode) {
                                const updatedAgreement = {
                                    ...editingRowData,
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '',
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || '',
                                    updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    updatedBy: this.props.userInfo?.username || 'system'
                                };

                                const agreementIndex = updatedAgreements.findIndex(item =>
                                    JSON.stringify(item) === JSON.stringify(editingRowData)
                                );

                                if (agreementIndex !== -1) {
                                    updatedAgreements[agreementIndex] = updatedAgreement;
                                }

                                MessageBox.alert('Success', 'Master agreement has been updated successfully.', 500);
                            } else {
                                const newAgreement = {
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '',
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || '',
                                    status: newEntry.status?.value || 'LIVE',
                                    createdAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    createdBy: this.props.userInfo?.username || 'system'
                                };

                                updatedAgreements.push(newAgreement);
                                MessageBox.alert('Success', 'Master agreement has been validated and added successfully.', 500);
                            }

                            this.toggleModal({ state: false });

                            this.updateMasterAgreements(updatedAgreements, () => {
                                this.setState({ resetTable: false, selectedRows: [] });
                            });
                        } else {
                            this.setState({ resetTable: false });
                        }

                    } catch (error) {

                        MessageBox.error('System Error', 'An unexpected error occurred during validation. Please try again.', 500);
                        this.setState({
                            resetTable: false,
                            modal: { ...this.state.modal, disabled: false }
                        });
                    }
                });
            }
        });
    };

    prepopulateFormData = (formData, rowData) => {
        let populatedFormData = cloneObject(formData);

        if (populatedFormData.data && populatedFormData.data[0] && populatedFormData.data[0].column) {
            populatedFormData.data[0].column.forEach(field => {
                switch (field.bind) {
                    case 'lineOfBusiness':
                        field.value = rowData.lineOfBusiness || '';
                        break;
                    case 'agreementId':
                        field.value = rowData.agreementId || '';
                        break;
                    case 'agreementType':
                        field.value = rowData.profileType || '';
                        break;
                    case 'legalEntityId':
                        field.value = rowData.legalEntityId || '';
                        break;
                    case 'legalEntity':
                        field.value = rowData.legalEntity || '';
                        break;
                    case 'eci':
                        field.value = rowData.eci || '';
                        break;
                    default:
                        break;
                }
            });
        }

        return populatedFormData;
    };

    getPermission(props) {
        const profileReadOnly = props.data?.profileReadOnly || false;
        const userHasWriteAccess = isReadWrite(props.userInfo, "ROLE_AGENCY_UI_READ_WRITE");
        return profileReadOnly || !userHasWriteAccess;
    }

    isProfileNewOrActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return !profilePresent || status === "Live" || status === "New";
    }

    isProfileActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Live";
    }

    isProfileInactive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Inactive";
    }

    componentDidMount() {
        try {
            const config = fetchConfig(this.props.appState?.lob || "xm");
            this.setup(config);
            
           
        } catch (error) {
            const fallbackConfig = {
                layout: [
                    {
                        refKey: "agreement",
                        header: { title: "XM Profile Information" },
                        type: "form",
                        data: [],
                    },
                ],
                create: {
                    newMasterAgreements: {
                        data: [{ column: [] }]
                    }
                }
            };
            this.setup(fallbackConfig);
        }
    }

    componentDidUpdate(prevProps) {
    
        if (prevProps.data !== this.props.data && this.props.data ) {
            const newMasterAgreements = this.props.data?.compositeProfile?.legalAgreement?.attributes?.masterAgreements || [];
            
            if (JSON.stringify(newMasterAgreements) !== JSON.stringify(this.state.masterAgreements)) {
                this.setState({
                    masterAgreements: [...newMasterAgreements],
                    hasLocalChanges: false
                });
                
                if (this.gridApiRefs["masterAgreements"]) {
                    this.gridApiRefs["masterAgreements"].setRowData([...newMasterAgreements]);
                }
            }
        }
    }

    setup = (config) => {
        let cloneData = cloneObject(this.props.data || {});
        this.initializeProfileData(cloneData);

        let configSetupVar = configSetup({
            config,
            formdata: cloneData,
            staticData: this.props.staticData,
            bindFunctions: this.bindedEvents,
        });

        this.setState({ config: configSetupVar });

        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(cloneData);
        }
    };

    initializeProfileData = (data) => {
        if (!data.compositeProfile) {
            data.compositeProfile = {};
        }

        if (!data.compositeProfile.legalAgreement) {
            data.compositeProfile.legalAgreement = {
                profileId: "",
                profileType: "",
                version: 0,
                updatedBy: "",
                updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                attributes: {},
            };
        }

        if (!data.compositeProfile.legalAgreement.attributes) {
            data.compositeProfile.legalAgreement.attributes = {
                agreementType: "",
                spn: "",
                ecd: "",
                tier: "",
                tierVersion: "",
                tierEffectiveDate: "",
                addOn: '',
                houseMultiplier: "",
                status: "New",
            };
        }

        if (typeof data.compositeProfile.legalAgreement.version == "number") {
            data.compositeProfile.legalAgreement.version = data.compositeProfile.legalAgreement.version.toString();
        }

        if (!data.compositeProfile.legalAgreement.attributes.masterAgreements) {
            data.compositeProfile.legalAgreement.attributes.masterAgreements = [];
        }

        if (data.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value) {
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.eci) {
                data.compositeProfile.legalAgreement.attributes.eci =
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.eci;
            }
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.spn) {
                data.compositeProfile.legalAgreement.attributes.spn =
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.spn;
            }

            let legalAgreementProfiles = this.processLegalAgreementProfiles(data);
            data.compositeProfile.legalAgreement.attributes.masterAgreements = legalAgreementProfiles;
        }
    };

    onGridReady = ({ e, refKey }) => {
        const { api } = e;
        this.gridApiRefs[refKey] = api;

        setTimeout(() => {
            api.sizeColumnsToFit();
        }, 100); 

        if (refKey === "masterAgreements") {
            api.addEventListener('selectionChanged', this.onSelectionChanged);
            api.addEventListener('cellDoubleClicked', this.onCellDoubleClicked);
            
            const masterAgreements = this.getCurrentMasterAgreements();
            if (masterAgreements.length > 0) {
                api.setRowData([...masterAgreements]);
            }
        }
    };

    onCellDoubleClicked = (event) => {
        if (!this.state.permissions.readonly) {
            const rowData = event.data;
            this.setState({ selectedRows: [rowData] }, () => {
                this.openMasterAgreementModal(true);
            });
        }
    };

    onSelectionChanged = () => {
        const selectedNodes = this.gridApiRefs["masterAgreements"]?.getSelectedNodes() || [];
        const selectedRows = selectedNodes.map(node => node.data);
        this.setState({ selectedRows });
    };

    onCellValueChanged = (event) => {
        const { data, colDef, newValue, node } = event;
        const field = colDef.field;
    
        data[field] = newValue;
        data.updatedAt = moment().format("YYYY-MM-DD HH:mm:ss.SSS");
        data.updatedBy = this.props.userInfo?.username || 'system';
        
        let formData = cloneObject(this.props.data || {});
      
        if (formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
            const rowIndex = node.rowIndex;
            formData.compositeProfile.legalAgreement.attributes.masterAgreements[rowIndex] = data;
            
            if (this.props.onCustFormUpdate) {
                this.props.onCustFormUpdate(formData);
            }
        }
    };

    deleteSelectedRows = () => {
        const { selectedRows } = this.state;

        if (selectedRows.length === 0) {
            MessageBox.info('No Selection', 'Please select one or more rows to delete.');
            return;
        }

        const currentAgreements = this.getCurrentMasterAgreements();
        const updatedAgreements = currentAgreements.filter(agreement =>
            !selectedRows.some(selectedRow =>
                JSON.stringify(agreement) === JSON.stringify(selectedRow)
            )
        );

        this.updateMasterAgreements(updatedAgreements, () => {
            this.setState({ selectedRows: [] });
        });
    };

    validateEciOnBlur = async () => {

    };

    validateHouseMultiplierOnBlur = () => {
        this.validateFieldOnBlur('House Multiplier', 0, 100, 'House Multiplier value cannot be less than 0. It has been reset to 0.', 'House Multiplier value cannot be greater than 100. It has been reset to 100.');
    };

    validateTierOnBlur = () => {
        this.validateFieldOnBlur('Tier', 1, 9, 'Tier value cannot be less than 1. It has been reset to 1.', 'Tier value cannot be greater than 9. It has been reset to 9.');
    };

    validateFieldOnBlur = (fieldTitle, minValue, maxValue, minErrorMessage, maxErrorMessage) => {
        let clone = cloneObject(this.state.config);
        clone.layout.find(x => x.refKey === 'crossMarginEntities').data.forEach(x => {
            x.column.forEach(form => {
                if (form.title === fieldTitle && form.value !== undefined) {
                   
                    if (form.value === "" || form.value === null || typeof form.value === "undefined") {
                        return;
                    }
                    let newValue = form.value;
                    if (newValue < minValue) {
                        newValue = minValue;
                        form.value = newValue;
                        MessageBox.error('Validation Error', minErrorMessage, 500);
                    } else if (newValue > maxValue) {
                        newValue = maxValue;
                        form.value = newValue;
                        MessageBox.error('Validation Error', maxErrorMessage, 500);
                    }
                }
            });
        });
        this.setState({ config: clone, ready: false }, () => {
            this.setState({ ready: true });
        });
    }

    isFormValid = (props) => {
        mixinIsFormValid({ ...props, _this: this });
    };

    toggleModal = (props) => {
        mixinToggleModal({ ...props, _this: this });
    };

    checkGlobalConditions = (renderIf = null) => {
        return mixinCheckGlobalConditions({ renderIf, _this: this });
    };

    handleSubmit = () => {
        if (this.props.onSubmit) {
            this.props.onSubmit();
        }
    };

    getCurrentFormData = () => {
        return this.props.data || {};
    };

    render() {
        const {
            buttons,
            bindedEvents,
            checkGlobalConditions,
            toggleModal,
            onGridReady,
            isFormValid,
        } = this;

        const { ready, modal, config, permissions, selectedRows } = this.state;
        const { onFormUpdate, onCustFormUpdate, staticData } = this.props;

        let formData = this.props.data || {};

        return (
            <div style={{ marginTop: "10px", marginBottom: "10px" }}>
                {!!config && ready ? (
                    <>
                        {config.layout.map((x, i) => {
                            const {
                                refKey,
                                header,
                                type,
                                data,
                                columnDefs,
                                renderIf,
                                bind,
                                rowClassRules,
                            } = x;

                            return checkGlobalConditions(renderIf) ? (
                                <div
                                    className="dt-container"
                                    key={i}
                                >
                                    {!!header ? (
                                        <div>
                                            <Header
                                                {...header}
                                                bindedEvents={bindedEvents}
                                                permissions={permissions}
                                            />
                                        </div>
                                    ) : null}

                                    {!!type && type === "form" ? (
                                        <FormBuilder
                                            data={data}
                                            onFormUpdate={(updatedData) => {
                                                if (onFormUpdate) {
                                                    onFormUpdate(updatedData);
                                                }
                                                if (this.props.onCustFormUpdate) {
                                                    this.props.onCustFormUpdate(updatedData);
                                                }
                                            }}
                                            bindedEvents={{
                                                ...bindedEvents
                                            }}
                                            permissions={permissions}
                                            staticData={staticData}
                                            renderComponent={(type, bind, containerIndex, formIndex) => {
                                                if (type === 'component' && bind.includes('addOn')) {
                                                    return (
                                                        <AddOnProduct
                                                            bind={bind}
                                                            formData={formData}
                                                            onCustFormUpdate={onCustFormUpdate}
                                                            bindedEvents={bindedEvents}
                                                            config={this.state.config}
                                                        />
                                                    );
                                                }
                                                return null;
                                            }}
                                        />
                                    ) : null}

                                    {!!type && type === "datatable" ? (
                                        <DataGrid
                                            suppressRowClickSelection={false}
                                            rowSelection="multiple"
                                            rowMultiSelectWithClick={true}
                                            headerCheckboxSelection={true}
                                            headerCheckboxSelectionFilteredOnly={true}
                                            containerProps={{
                                                style: { height: "200px" },
                                            }}
                                            rowStripes
                                            columnDefs={columnDefs?.map(col => ({
                                                ...col,
                                                editable: false,
                                                checkboxSelection: col.field === "lineOfBusiness" ? true : false,
                                                headerCheckboxSelection: col.field === "lineOfBusiness" ? true : false,
                                            }))}
                                            rowData={this.getCurrentMasterAgreements()}
                                            onGridReady={(e) => {
                                                onGridReady({ e, refKey });
                                            }}
                                            refKey={refKey}
                                        />
                                    ) : null}
                                </div>
                            ) : null;
                        })}

                        <Dialog
                            onEntered={() => { }}
                            open={modal.show}
                            onClick={() => { }}
                            onClose={() => { toggleModal(false) }}
                        >
                            <div>
                                {!!modal.show ? (
                                    <DialogContent>
                                        <div className='dt-container'>
                                            <Header {...modal.header} permissions={permissions} />
                                            <FormBuilder
                                                data={this.state.modal.formdata?.data || []}
                                                onFormUpdate={modal.onUpdate}
                                                isFormValid={isFormValid}
                                                selectedRowIdx={selectedRowIdx}
                                                gridApi={this.gridApiRefs}
                                                resetFormFields={this.state.resetFormFields}
                                                permissions={permissions}
                                                staticData={staticData}
                                            />
                                        </div>
                                    </DialogContent>
                                ) : null}

                                <DialogActions>
                                    {!permissions.readonly ? (
                                        <Button variant={'cta'} disabled={modal.disabled} onClick={modal.onSave}>
                                            Save
                                        </Button>
                                    ) : null}
                                    <Button variant={'cta'} onClick={() => { toggleModal(false) }}>
                                        Close
                                    </Button>
                                </DialogActions>
                            </div>
                        </Dialog>

                        <Buttons data={buttons} />
                    </>
                ) : (
                    <div style={{ padding: "20px", textAlign: "center" }}>
                        <Spinner />
                        <p>Loading XM Profile configuration...</p>
                    </div>
                )}
            </div>
        );
    }

    processLegalAgreementProfiles = (data) => {
        let legalAgreementProfiles = [];
        const crossMarginStats = data?.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value;

        if (Array.isArray(crossMarginStats) && crossMarginStats.length > 0) {
            crossMarginStats.forEach((statItem) => {
                const legalEntities = statItem?.legalEntities;
                if (Array.isArray(legalEntities) && legalEntities.length > 0) {
                    legalEntities.forEach((entity) => {
                        const profilesObj = entity?.legalAgreementProfiles;
                        const legalEntity=entity?.legalEntity;
                        if (profilesObj && typeof profilesObj === 'object') {
                            Object.keys(profilesObj).forEach(agreementType => {
                                const profiles = profilesObj[agreementType];
                                if (Array.isArray(profiles)) {
                                    profiles.forEach((profile, index) => {
                                        legalAgreementProfiles.push({
                                            agreementId: profile.profileId,
                                            lineOfBusiness: profile.lineOfBusiness,
                                            agreementCategory: agreementType,
                                            profileType: profile.profileType,
                                            legalEntityName: profile.lineOfBusiness,
                                            status: profile.profileStatus,
                                            updatedBy: profile.updatedBy,
                                            updatedAt: profile.updatedAt,
                                            createdBy: profile.createdBy,
                                            version: profile.version,
                                            eci:legalEntity.eci,
                                            _originalData: profile,
                                            _agreementType: agreementType
                                        });
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }

        return legalAgreementProfiles;
    };
}

const mapStateToProps = (state) => {
    const { appState } = state;
    return { appState };
};

const mapDispatchToProps = (dispatch) => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(XMProfileFields);


//abcd json

{
    "layout": [
        {
            "refKey": "agreement",
            "header": {
                "title": "Agreement",
                "showSubTitle": true
            },
            "type": "form",
            "data": [
                {
                    "column": [
                        {
                            "title": "Profile ID",
                            "bind": "compositeProfile.legalAgreement.profileId",
                            "type": "input",
                            "readonly": true,
                            "markSource": false
                        },
                        {
                            "title": "Agreement No",
                            "bind": "compositeProfile.legalAgreement.profileId",
                            "type": "input",
                            "required": true,
                            "markSource": false
                        },
                        {
                            "title": "Agreement Type",
                            "bind": "compositeProfile.legalAgreement.profileType",
                            "type": "input",
                            "required": true,
                            "readonly":true
                        },
                        {
                            "title": "Updated By",
                            "bind": "compositeProfile.legalAgreement.updatedBy",
                            "type": "input",
                            "readonly": true
                        }
                    ]
                },
                {
                    "column": [
                        {
                            "title": "SPN",
                            "bind": "compositeProfile.legalAgreement.attributes.spn",
                            "type": "input",
                            "required": true
                        },
                        {
                            "title": "Status",
                            "bind": "compositeProfile.legalAgreement.profileStatus",
                            "type": "dropdown",
                            "required": true,
                            "options": [
                                "LIVE",
                                "What-If"
                            ],
                            "placeholder": "Select Status"
                        },
                        {
                            "title": "Version",
                            "bind": "compositeProfile.legalAgreement.version",
                            "type": "input",
                            "readonly": true
                        },
                        {
                            "title": "Updated At",
                            "bind": "compositeProfile.legalAgreement.updatedDtm",
                            "readonly": true,
                            "type": "datepicker"
                        },
                        {
                            "title": "ECID",
                            "bind": "compositeProfile.legalAgreement.attributes.eci",
                            "type": "input",
                            "required": true
                        }
                    ]
                }
            ]
        },
        {
            "refKey": "crossMarginEntities",
            "header": {
                "title": "Cross Product Margin Calc",
                "showSubTitle": true
            },
            "type": "form",
            "data": [
                {
                    "column": [
                        {
                            "title": "Tier",
                            "bind": "compositeProfile.legalAgreement.attributes.tier",
                            "type": "input",
                            "inputType": "number",
                            "min": "1",
                            "max": "9",
                            "required": true,
                            "onBlur": "VALIDATE_TIER_ON_BLUR"
                        },
                        {
                            "title": "House Multiplier",
                            "bind": "compositeProfile.legalAgreement.attributes.houseMultiplier",
                            "type": "input",
                            "required": true,
                            "inputType": "number",
                            "min": "0",
                            "max": "100",
                            "onBlur": "VALIDATE_HOUSE_MULTIPLIER_ON_BLUR"
                        },
                        {
                            "title": "Add On",
                            "bind": "compositeProfile.legalAgreement.attributes.addOn",
                            "type": "component",
                            "required": true,
                            "component": "AddOnProduct"
                        }
                    ]
                },
                {
                    "column": [
                        {
                            "title": "Tier Version",
                            "bind": "compositeProfile.legalAgreement.attributes.tierVersion",
                            "type": "input",
                            "required": true
                        },
                        {
                            "title": "Tier Effective Date",
                            "bind": "compositeProfile.legalAgreement.attributes.tierEffectiveDate",
                            "type": "datepicker",
                            "required": true
                        }
                    ]
                }
            ]
        },
        {
            "refKey": "masterAgreements",
            "createKey": "newMasterAgreements",
            "header": {
                "title": "In Scope Master Agreements",
                "buttons": [
                    {
                        "title": "Add",
                        "events": {
                            "onClick": "CREATE_NEW_MASTER_AGREEMENT"
                        }
                    },
                    {
                        "title": "Delete",
                        "events": {
                            "onClick": "DELETE_SELECTED_MASTER_AGREEMENTS"
                        }
                    }
                ]
            },
            "type": "datatable",
            "bind": "compositeProfile.legalAgreement.attributes.masterAgreements",
            "columnDefs": [
                {
                    "field": "lineOfBusiness",
                    "headerName": "Line Of Business",
                    "checkboxSelection": true,
                    "headerCheckboxSelection": true,
                    "width": 200
                },
                {
                    "field": "agreementId",
                    "headerName": "Agreement ID",
                    "width": 150
                },
                {
                    "field": "eci",
                    "headerName": "ECID",
                    "width": 150
                },
                {
                    "field": "profileType",
                    "headerName": "Agreement Type",
                    "width": 150
                },
                {
                    "field": "legalEntityId",
                    "headerName": "Legal Entity ID",
                    "width": 150
                },
                {
                    "field": "legalEntity",
                    "headerName": "Legal Entity",
                    "width": 200
                }
            ]
        }
    ],
    "create": {
        "newMasterAgreements": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Line Of Business",
                            "bind": "lineOfBusiness",
                            "type": "dropdown",
                            "options": [
                                "FI",
                                "PD",
                                "PR"
                            ],
                            "required": true,
                            "placeholder": "Enter Line of Business",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Agreement ID",
                            "bind": "agreementId",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Agreement ID",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Agreement Type",
                            "bind": "agreementType",
                            "type": "dropdown",
                            "options": [
                                "IPBA",
                                "IAA",
                                "CLEARING",
                                "GMRA",
                                "ISDA"
                            ],
                            "required": true,
                            "placeholder": "Enter Agreement Type",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Legal Entity ID",
                            "bind": "legalEntityId",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Legal Entity ID"
                           
                        },
                        {
                            "title": "Legal Entity",
                            "bind": "legalEntity",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Legal Entity Name"
                            
                        },
                        {
                            "title": "ECID",
                            "bind": "eci",
                            "type": "input",
                            "events":{
                                "onBlur":"VALIDATE_ECI_ON_BLUR"
                            },
                            "required": true,
                            "placeholder": "Enter ECID"
                        }
                    ]
                }
            ]
        }
    }
}


//abcd response 

{
    "compositeProfile": {
        "legalAgreement": {
            "profileId": "10000000010003",
            "lineOfBusiness": "XM",
            "profileType": "CPMNA",
            "profileStatus": "LIVE",
            "createdBy": "CAPTIS",
            "createdDtm": 1719933080.228000000,
            "updatedDtm": 1741155636.113000000,
            "updatedBy": "N776346",
            "version": 1,
            "attributes": {
                "parties": null,
                "documentDate": null,
                "goLiveDate": null,
                "governingLaw": null,
                "region": null,
                "comments": null,
                "thresholdMonitoring": null,
                "bilateralFlag": null,
                "unilateralCPFavour": null,
                "regulatoryAgreement": null,
                "segregationModel": null,
                "splitType": null,
                "pledgorSegregationModel": null,
                "securedPartySegregationModel": null,
                "agreementType": null,
                "agreementReportingType": null,
                "midBidPriceIndicator": null,
                "reportingCurrency": null,
                "parameterCurrency": null,
                "roundingAmount": null,
                "legalEntityMTA": null,
                "counterPartyMTA": null,
                "legalEntityThreshold": null,
                "counterPartyThreshold": null,
                "callNotificationTime": null,
                "callNotificationLocation": null,
                "csaNotificationTimezone": null,
                "transferTime": null,
                "csaTransferTime": null,
                "requirementHairCut": null,
                "businessDayLocations": null,
                "cnsdrRegHolidaySettlement": null,
                "callFrequency": null,
                "callFrequencies": null,
                "callFrequencyComments": null,
                "eligibleProducts": null,
                "autoAgreeFlag": null,
                "acadiaSoftEnabled": null,
                "stpRba": null,
                "stpAcadiaMovesFlag": null,
                "disputeToleranceType": null,
                "disputeToleranceAmount": null,
                "agreementName": null,
                "stpCancellationFlag": null,
                "enableCashCopySwift": null,
                "destinationBICAddress": null,
                "ampID": null,
                "agreementNameOverride": null,
                "agreementNameOverrideFlag": null,
                "password": null,
                "confirmPassword": null,
                "isPasswordRequired": null,
                "autoReleaseFlag": null,
                "autoReleaseTime": null,
                "marginCallCobDate": null,
                "autoRecallFromClient": null,
                "imosPublisherSuppression": null,
                "clearedMarginOversightEnabled": null,
                "bufferSetup": null,
                "marginValidationSetup": null,
                "interestSchedule": null,
                "interestAccrualEndDate": null,
                "interestStmtApproval": null,
                "allowInterestMoves": null,
                "autoPayInterest": null,
                "weekly": null,
                "autoReturnOrDeliverToClient": null,
                "updateDateTime": null,
                "considerIncomeEvent": null,
                "considerCoacs": null,
                "effectivePeriod": null,
                "rehypothecateFlag": null,
                "rehypothecationSecurities": null,
                "rehypothecationCash": null,
                "rehypothecationCashCurrencies": null,
                "restrictedRehypothecation": null,
                "restrictedRehypoSecurities": null,
                "restrictedRehypoCash": null,
                "restrictedRehypoCashCurrencies": null,
                "positionOrderSource": null,
                "clearedAutoFundAccountBySplitType": null,
                "ampMarginFlag": null,
                "calculationType": null,
                "imDisputeThreshold": null,
                "cpPostingBasis": null,
                "customerType": null,
                "customerTypeId": null,
                "disputeThresholdAmount": null,
                "disputeThresholdPercentage": null,
                "holidayRegion": null,
                "hybridOffset": null,
                "iaAmpIndicator": null,
                "marginFlowType": null,
                "imSegregationModel": null,
                "interEntityImSplitType": null,
                "moveSplitFlag": null,
                "nccaFlag": null,
                "jpmMarginFlg": null,
                "leImDisputeThreshold": null,
                "lePostingBasis": null,
                "receiveReviewRequiredFlag": null,
                "payReviewRequiredFlag": null,
                "leModelType": null,
                "moveDisableFlag": null,
                "prmsMarginClientFlag": null,
                "variableReportingCurrency": null,
                "imCpRehypoFlag": null,
                "imLeRehypoFlag": null,
                "valuationAgentId": null,
                "valuationAgentFlag": null,
                "soleCalcAgent": null,
                "settlementCurrency": null,
                "vmCpRehypoFlag": null,
                "vmLeRehypoFlag": null,
                "cimActionRequiredFlag": null,
                "cimApprovalRequiredFlag": null,
                "grossPaymentNettingFlag": null,
                "rimSegregationModel": null,
                "sourceSystem": null,
                "linkedQueryIds": null,
                "groupId": null,
                "isMtuIndFlag": null,
                "isTripartyFlag": null,
                "agreementAlias": null,
                "relatedPbAgreementNumber": null,
                "csaType": null,
                "imReportingCurrency": null,
                "specialCustomerType": null,
                "houseMarginCalculationModels": null,
                "settlementNetting": null,
                "includeLegacyTrades": null,
                "crossMarginingApplicable": null,
                "includeOutOfScopeSensitivities": null,
                "includeFXSpots": null,
                "excludeJumpToDefaultAddOn": null,
                "simmPortfolioAddOn": null,
                "imosAgreementCaid": null,
                "imosOwnershipCaid": null,
                "cmOwnershipCaid": null,
                "masterAgreementVersion": null,
                "independentAdjustments": null,
                "independentAmounts": null,
                "legalEntityIndependentAmounts": null,
                "counterPartyIndependentAmounts": null,
                "roundingAmountLE": null,
                "returnRoundingAmountLE": null,
                "returnRoundingAmountCP": null,
                "roundingAmountCP": null,
                "imTermFlag": null,
                "csCsaCovered": null,
                "roundingAmountCurrencyCP": null,
                "returnRoundingAmountCurrencyCP": null,
                "roundingAmountCurrencyLE": null,
                "returnRoundingAmountCurrencyLE": null,
                "independentAmountReturnable": null,
                "calculationCurrency": null,
                "imFloorAmount": null,
                "mtmCalcType": null,
                "excludeFxNopSpotFlag": null,
                "grossCPMinimumTransferAmount": null,
                "grossLEMinimumTransferAmount": null,
                "iaMultiplier": null,
                "marginProducts": null,
                "primaryUnifiedDocId": null,
                "primaryDocTitle": null,
                "colValDisputeResolution": null,
                "firstParty": null,
                "jpmRole": null,
                "multiApplicableUnderAgreement": null,
                "priceSource": null,
                "secondParty": null,
                "partyAssignedJPLE": null,
                "ctpyCltrl": null,
                "mktValDetermination": null,
                "mktValPriceDisupute": null,
                "transferabilityCP": null,
                "transferabilityJPM": null,
                "mgnPaymentLateNotice": null,
                "mgnPaymentTimelyNotice": null,
                "jpmCollateral": null,
                "amendmentsEffectiveDate": null,
                "allBranchesCounterPartyValue": null,
                "standardPartyInNovationNet": null,
                "standardPartyInSettlementNet": null,
                "standardPartyCltOid": null,
                "collateralStandardParty": null,
                "standardPartyJpmGuranteeExist": null,
                "standardPartyInCloseoutNet": null,
                "secondaryUnifiedDocId": null,
                "secondaryDocumentTitle": null,
                "primaryDocumentCreationDate": null,
                "secondaryDocumentCreationDate": null,
                "primaryDocumentEffectiveDate": null,
                "secondaryDocumentEffectiveDate": null,
                "primaryDocumentExpirationDate": null,
                "secondaryDocumentExpirationDate": null,
                "primaryDocumentModificationDate": null,
                "secondaryDocumentModificationDate": null,
                "primaryAgreementCreator": null,
                "secondaryAgreementCreator": null,
                "primaryDocumentCreatorName": null,
                "secondaryDocumentCreatorName": null,
                "primaryTaxonomyVersionId": null,
                "secondaryTaxonomyVersionId": null,
                "primaryAgreementGoverningLawCountry": null,
                "secondaryAgreementGoverningLawCountry": null,
                "primaryAgreementGoverningLawState": null,
                "secondaryAgreementGoverningLawState": null,
                "investorAdvisorUcn": null,
                "csUcnIa": null,
                "governingLawCountryDescription": null,
                "governingLawRegionDescription": null,
                "contractType": null,
                "preferred": null,
                "additionalPrimaryGoverningLaw": null,
                "inIsda10A": null,
                "crossDefaultPaymentMaxVal": null,
                "masterAgreementFinancialCovenantType": null,
                "electiveTerminationRightsExists": null,
                "jpCreditEventUponMergerApplies": null,
                "cpCreditEventUponMergerApplies": null,
                "isApplicableSPNBranch": null,
                "calculationAgent": null,
                "isApplicableOFFBranch": null,
                "isJpmCollateralMaxValSet": null,
                "jpmGuaranteeExists": null,
                "jpmCloseOutApplicable": null,
                "cpCloseOutApplicable": null,
                "jpOfficialSettlementType": null,
                "cpOfficialSettlementType": null,
                "guarantyAgreementFlg": null,
                "jpNovationType": null,
                "cpNovationType": null,
                "inCltrlCounterParty": null,
                "leAutomaticEarlyTerminationApplies": null,
                "cpAutomaticEarlyTerminationApplies": null,
                "terminationCurrency": null,
                "governingLawCountryCode": null,
                "thresholdCurrencyCode": null,
                "governingLawId": null,
                "specificPreferredCallTimeId": null,
                "specificPreferredCallTime": null,
                "executionCutoffTime": null,
                "executionCutoffTimeZone": null,
                "paymentNettingFlag": null,
                "csaTerminationCurrency": null,
                "negativeInterestFlag": null,
                "opicsZeroRateFloor": null,
                "interestRate": null,
                "taxInterestRate": null,
                "returnRoundingAmount": null,
                "timeOfNotCalling": null,
                "taxTransferType": null,
                "unregulatedTradeEffectiveDate": null,
                "gracePeriodValue": null,
                "transferTimeValue": null,
                "terminationCurrencyForTwoAffectedPartiesLE": null,
                "terminationCurrencyForTwoAffectedPartiesCP": null,
                "amendColtrExistFlag": null,
                "amendmentDate": null,
                "substitution": null,
                "substitutionRightsId": null,
                "collateralAgreementId": null,
                "valuationDateTimeFrequency": null,
                "valuationDateTimeFrequencyId": null,
                "locId": null,
                "rehypothecationDesc": null,
                "independantAdjustmentType": null,
                "independantAdjustmentTypeId": null,
                "initialVariationMargin": null,
                "collateralAmountsThreshold": null,
                "markToMarkAdjustmentIndependantAmount": null,
                "agreementMarginRegimeProducts": null,
                "legalAgreementCollateralTriggers": null,
                "agreementAgrProProduct": null,
                "agrOffJpmGuranteeExist": null,
                "agrOffInCloseoutNet": null,
                "agrOffInNovationNet": null,
                "agrOffInSettlementNet": null,
                "isCrossMargined": null,
                "familyName": null,
                "upfrontRequiredFlag": null,
                "stpLevel": null,
                "excludeFromDiary": null,
                "marginingSystem": null,
                "interestMarginingSystem": null,
                "baseId": null,
                "asiaMoveAutomationFlag": null,
                "defaultAssetType": null,
                "moveDisabledComment": null,
                "baseCashMoveProcessingLimits": null,
                "csr": null,
                "imCallDirection": null,
                "coltToBeDoneFlag": null,
                "isEligibleForTradeFlag": null,
                "coltStatus": null,
                "regimeAndComplianceDate": null,
                "investmentAdvisor": null,
                "otcCrossMarginingFlag": null,
                "eligibilitySet": null,
                "statementLegalEntityName": null,
                "isCodedStatement": null,
                "codedStatementName": null,
                "isCsrSignedOff": null,
                "idPrtn": null,
                "citAsOffDate": null,
                "citUntilDate": null,
                "independentAmountType": null,
                "independentAmount": null,
                "eligibleTradeCurrencies": null,
                "eligibleTradesScheduled": null,
                "eligibleTradesByDate": null,
                "leSubEntity": null,
                "leSubEntityReportingCurrency": null,
                "borrowFromLESubEntity": null,
                "ccp": null,
                "ccpCode": null,
                "linkLeSubEntities": null,
                "linkCpSubEntities": null,
                "clientAgreementAlias": null,
                "clientAgreementAliases": null,
                "counterpartyIndustryClassification": null,
                "clearingAccountNumber": null,
                "splitTypeConfigs": null,
                "imosFundingModel": null,
                "transferTimeCurrencies": null,
                "securityTransferTimes": null,
                "statementSla": null,
                "statementTimezone": null,
                "stmtTimezone": null,
                "distributionAndInterests": null,
                "mailboxName": null,
                "mailboxEmailAddress": null,
                "securitiesLongboxModel": null,
                "cashLongboxModel": null,
                "autoBookAgreedPayments": null,
                "securityMap": null,
                "clearedAutoFundAccount": null,
                "nonClearedAutoFundCurrency": null,
                "nonClearedAutoFundAccount": null,
                "preferredAccountIds": null,
                "postRegulations": null,
                "receiveRegulations": null,
                "legalEntityOwnershipCaids": null,
                "simmCalculationCurrency": null,
                "indexDecomposition": null,
                "businessLocations": null,
                "leCreditRatingRuleDescription": null,
                "cpCreditRatingRuleDescription": null,
                "statementType": null,
                "isImReconRequired": null,
                "marginFlowTypeOverride": null,
                "clientBranchOnStatementFlag": null,
                "dealId": null,
                "collateralMonitoringGroup": null,
                "collateralConfidenceFactor": null,
                "curePeriod": null,
                "fxRegion": null,
                "statementEmailSubject": null,
                "nettingsetRootId": null,
                "segmentId": null,
                "pbLegalEntityMTA": null,
                "pbCounterPartyMTA": null,
                "pbLegalEntityThreshold": null,
                "pbCounterPartyThreshold": null,
                "linkedQueryIdOverride": null,
                "greaterOfClientAgreementPreference": null,
                "segments": null,
                "moveDisabledReason": null,
                "inflationIndexedUnitCurrency": null,
                "inflationIndexedUnitApplicableForThresholdAndMinimumTransferAmount": null,
                "feedDependencies": null,
                "restrictAutomatedReuseOfCollateral": null,
                "agreementShortName": null,
                "agreementShortName2": null,
                "agreementShortName3": null,
                "consentOfRepledge": null,
                "statementPassword": null,
                "markSameDayHoliday": null,
                "roundingForCash": null,
                "roundingValueForCash": null,
                "roundingForSecurities": null,
                "roundingValueForSecurities": null,
                "prodParallel": null,
                "terminationDate": null,
                "metaTicket": null,
                "traderBook": null,
                "crossMarginEntities": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "counterParty": {
                                "role": "COUNTERPARTY",
                                "eci": "0220883272",
                                "ucn": "009900094000",
                                "spn": "9031065",
                                "name": "COAST TO COAST CATERING",
                                "lei": null,
                                "sapLeCode": null,
                                "principalLei": null,
                                "principalEci": null,
                                "cbd": null,
                                "leCode": null,
                                "goldenEntityEci": null,
                                "goldenEntityName": null
                            },
                            "legalEntities": [
                                {
                                    "legalEntity": {
                                        "role": "LEGAL_OWNER",
                                        "eci": "0220883112",
                                        "ucn": "009900084000",
                                        "spn": "9022035",
                                        "name": "COAST TO COAST CATERING",
                                        "lei": null,
                                        "sapLeCode": null,
                                        "principalLei": null,
                                        "principalEci": null,
                                        "cbd": null,
                                        "leCode": null,
                                        "goldenEntityEci": null,
                                        "goldenEntityName": null
                                    },
                                    "legalAgreementProfiles": {
                                        "PFS": [
                                            {
                                                "profileId": "10000000244027",
                                                "lineOfBusiness": "PFS",
                                                "profileType": "CONTRACT",
                                                "profileStatus": "LIVE",
                                                "createdBy": null,
                                                "createdDtm": null,
                                                "updatedDtm": null,
                                                "updatedBy": null,
                                                "version": 2,
                                                "attributes": null,
                                                "approvedDtm": null,
                                                "approvedBy": null,
                                                "comments": null,
                                                "activationDtm": null
                                            },
                                            {
                                                "profileId": "10000000244029",
                                                "lineOfBusiness": "PFS",
                                                "profileType": "CONTRACT",
                                                "profileStatus": "LIVE",
                                                "createdBy": null,
                                                "createdDtm": null,
                                                "updatedDtm": null,
                                                "updatedBy": null,
                                                "version": 5,
                                                "attributes": null,
                                                "approvedDtm": null,
                                                "approvedBy": null,
                                                "comments": null,
                                                "activationDtm": null
                                            }
                                        ],
                                        "FI_REPO": [
                                            {
                                                "profileId": "10000000244028",
                                                "lineOfBusiness": "FI_REPO",
                                                "profileType": "CONTRACT",
                                                "profileStatus": null,
                                                "createdBy": null,
                                                "createdDtm": null,
                                                "updatedDtm": null,
                                                "updatedBy": null,
                                                "version": 6,
                                                "attributes": null,
                                                "approvedDtm": null,
                                                "approvedBy": null,
                                                "comments": null,
                                                "activationDtm": null
                                            },
                                            {
                                                "profileId": "10000000244029",
                                                "lineOfBusiness": "FI_REPO",
                                                "profileType": "CONTRACT",
                                                "profileStatus": null,
                                                "createdBy": null,
                                                "createdDtm": null,
                                                "updatedDtm": null,
                                                "updatedBy": null,
                                                "version": 6,
                                                "attributes": null,
                                                "approvedDtm": null,
                                                "approvedBy": null,
                                                "comments": null,
                                                "activationDtm": null
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    ]
                },
                "crossMarginEntitiesRules": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "lineOfBusiness": "PFS",
                            "entityRules": [
                                {
                                    "ruleId": "EQUITY_PB_FAMILY",
                                    "ruleDescription": "Include Equity PB Family",
                                    "conditions": {
                                        "@type": ".AndConnector",
                                        "type": "AND",
                                        "failMode": "FALSE",
                                        "expr": [
                                            {
                                                "@type": ".operators.EqCondition",
                                                "expr": [
                                                    {
                                                        "@type": ".operands.JsonPathOperand",
                                                        "id": {
                                                            "@type": ".NamedID",
                                                            "id": "instrument.familyDescription"
                                                        },
                                                        "type": "JSONPATH",
                                                        "failMode": "FALSE"
                                                    },
                                                    {
                                                        "@type": ".operands.StringOperand",
                                                        "value": "PB_FAM"
                                                    }
                                                ]
                                            },
                                            {
                                                "@type": ".operators.EqCondition",
                                                "expr": [
                                                    {
                                                        "@type": ".operands.JsonPathOperand",
                                                        "id": {
                                                            "@type": ".NamedID",
                                                            "id": "instrument.marginFlag"
                                                        },
                                                        "type": "JSONPATH",
                                                        "failMode": "FALSE"
                                                    },
                                                    {
                                                        "@type": ".operands.StringOperand",
                                                        "value": "TRUE"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "action": "INCLUDE",
                                    "isEnabled": "YES"
                                },
                                {
                                    "ruleId": "EXCLUDE_FAMILY_OVERRIDE",
                                    "ruleDescription": "Excluded Family Override",
                                    "conditions": {
                                        "@type": ".InCondition",
                                        "operand": {
                                            "@type": ".JsonPathOperand",
                                            "id": {
                                                "@type": ".NamedID",
                                                "id": "familyId"
                                            },
                                            "type": "JSONPATH",
                                            "failMode": "FALSE"
                                        },
                                        "membersType": "STRING",
                                        "members": [
                                            "[]"
                                        ]
                                    },
                                    "action": "EXCLUDE",
                                    "isEnabled": "YES"
                                }
                            ]
                        },
                        {
                            "lineOfBusiness": "CLEARING",
                            "entityRules": [
                                {
                                    "ruleId": "ACCOUNT_SPN",
                                    "ruleDescription": "Account SPN",
                                    "conditions": {
                                        "@type": ".AndConnector",
                                        "type": "AND",
                                        "failMode": "FALSE",
                                        "expr": [
                                            {
                                                "@type": ".operators.EqCondition",
                                                "expr": [
                                                    {
                                                        "@type": ".operands.JsonPathOperand",
                                                        "id": {
                                                            "@type": ".NamedID",
                                                            "id": "account.SPN"
                                                        },
                                                        "type": "JSONPATH",
                                                        "failMode": "FALSE"
                                                    },
                                                    {
                                                        "@type": ".operands.StringOperand",
                                                        "value": "7014279"
                                                    }
                                                ]
                                            },
                                            {
                                                "@type": ".operators.EqCondition",
                                                "expr": [
                                                    {
                                                        "@type": ".operands.JsonPathOperand",
                                                        "id": {
                                                            "@type": ".NamedID",
                                                            "id": "account.marginFlag"
                                                        },
                                                        "type": "JSONPATH",
                                                        "failMode": "FALSE"
                                                    },
                                                    {
                                                        "@type": ".operands.StringOperand",
                                                        "value": "TRUE"
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "action": "INCLUDE",
                                    "isEnabled": "YES"
                                },
                                {
                                    "ruleId": "EXCLUDE_ACCOUNT_OVERRIDE",
                                    "ruleDescription": "Excluded Account Override",
                                    "conditions": {
                                        "@type": ".InCondition",
                                        "operand": {
                                            "@type": ".JsonPathOperand",
                                            "id": {
                                                "@type": ".NamedID",
                                                "id": "account.id"
                                            },
                                            "type": "JSONPATH",
                                            "failMode": "FALSE"
                                        },
                                        "membersType": "STRING",
                                        "members": [
                                            "[]"
                                        ]
                                    },
                                    "action": "EXCLUDE",
                                    "isEnabled": "YES"
                                }
                            ]
                        },
                        {
                            "lineOfBusiness": "FI_REPO",
                            "entityRules": [
                                {
                                    "ruleId": "ACCOUNT_SPN",
                                    "ruleDescription": "Account SPN",
                                    "conditions": {
                                        "@type": ".EqCondition",
                                        "expr": [
                                            {
                                                "@type": ".operands.JsonPathOperand",
                                                "id": {
                                                    "@type": ".NamedID",
                                                    "id": "account.SPN"
                                                },
                                                "type": "JSONPATH",
                                                "failMode": "FALSE"
                                            },
                                            {
                                                "@type": ".operands.StringOperand",
                                                "value": "7014279"
                                            }
                                        ]
                                    },
                                    "action": "INCLUDE",
                                    "isEnabled": "YES"
                                },
                                {
                                    "ruleId": "EXCLUDE_ACCOUNT_OVERRIDE",
                                    "ruleDescription": "Excluded Account Override",
                                    "conditions": {
                                        "@type": ".InCondition",
                                        "operand": {
                                            "@type": ".JsonPathOperand",
                                            "id": {
                                                "@type": ".NamedID",
                                                "id": "account.id"
                                            },
                                            "type": "JSONPATH",
                                            "failMode": "FALSE"
                                        },
                                        "membersType": "STRING",
                                        "members": [
                                            "[]"
                                        ]
                                    },
                                    "action": "EXCLUDE",
                                    "isEnabled": "YES"
                                }
                            ]
                        }
                    ]
                },
                "crossMarginProductsRules": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "lineOfBusiness": "PRINCIPAL_DERIVATIVE",
                            "productRules": [
                                {
                                    "ruleId": "111",
                                    "ruleDescription": "rule description1",
                                    "conditions": null,
                                    "action": "INCLUDE",
                                    "isEnabled": "YES"
                                },
                                {
                                    "ruleId": "1222",
                                    "ruleDescription": "rule description2",
                                    "conditions": null,
                                    "action": "EXCLUDE",
                                    "isEnabled": "NO"
                                }
                            ]
                        },
                        {
                            "lineOfBusiness": "PFS",
                            "productRules": [
                                {
                                    "ruleId": "111",
                                    "ruleDescription": "rule description1",
                                    "conditions": null,
                                    "action": "INCLUDE",
                                    "isEnabled": "YES"
                                },
                                {
                                    "ruleId": "1222",
                                    "ruleDescription": "rule description2",
                                    "conditions": null,
                                    "action": "EXCLUDE",
                                    "isEnabled": "NO"
                                }
                            ]
                        }
                    ]
                },
                "crossMarginCallManagement": null,
                "crossMarginCollateralManagement": null,
                "simmriskClassMultipliers": null
            },
            "approvedDtm": null,
            "approvedBy": null,
            "comments": null,
            "activationDtm": null
        },
        "linkedProfiles": {
            "accounts": [],
            "statements": [],
            "settlementInstructions": [],
            "consolidatedStatement": [],
            "contacts": [],
            "cassAccounts": [],
            "nettingGroupProfiles": [],
            "disputeProfiles": [],
            "commitmentProfiles": [],
            "requirementProfiles": [],
            "contactProfiles": [],
            "defaultProfiles": [],
            "collateralMoveSimulationProfiles": []
        },
        "profileOverrides": null
    }
}


//abcd request
{"legalAgreement":{"profileId":"10000000010003","lineOfBusiness":"XM","profileType":"CPMNA","profileStatus":"LIVE","createdBy":"CAPTIS","createdDtm":1719933080.228,"updatedDtm":1741155636.113,"updatedBy":"F757572","version":"1","attributes":{"parties":null,"documentDate":null,"goLiveDate":null,"governingLaw":null,"region":null,"comments":null,"thresholdMonitoring":null,"bilateralFlag":null,"unilateralCPFavour":null,"regulatoryAgreement":null,"segregationModel":null,"splitType":null,"pledgorSegregationModel":null,"securedPartySegregationModel":null,"agreementType":null,"agreementReportingType":null,"midBidPriceIndicator":null,"reportingCurrency":null,"parameterCurrency":null,"roundingAmount":null,"legalEntityMTA":null,"counterPartyMTA":null,"legalEntityThreshold":null,"counterPartyThreshold":null,"callNotificationTime":null,"callNotificationLocation":null,"csaNotificationTimezone":null,"transferTime":null,"csaTransferTime":null,"requirementHairCut":null,"businessDayLocations":null,"cnsdrRegHolidaySettlement":null,"callFrequency":null,"callFrequencies":null,"callFrequencyComments":null,"eligibleProducts":null,"autoAgreeFlag":null,"acadiaSoftEnabled":null,"stpRba":null,"stpAcadiaMovesFlag":null,"disputeToleranceType":null,"disputeToleranceAmount":null,"agreementName":null,"stpCancellationFlag":null,"enableCashCopySwift":null,"destinationBICAddress":null,"ampID":null,"agreementNameOverride":null,"agreementNameOverrideFlag":null,"password":null,"confirmPassword":null,"isPasswordRequired":null,"autoReleaseFlag":null,"autoReleaseTime":null,"marginCallCobDate":null,"autoRecallFromClient":null,"imosPublisherSuppression":null,"clearedMarginOversightEnabled":null,"bufferSetup":null,"marginValidationSetup":null,"interestSchedule":null,"interestAccrualEndDate":null,"interestStmtApproval":null,"allowInterestMoves":null,"autoPayInterest":null,"weekly":null,"autoReturnOrDeliverToClient":null,"updateDateTime":null,"considerIncomeEvent":null,"considerCoacs":null,"effectivePeriod":null,"rehypothecateFlag":null,"rehypothecationSecurities":null,"rehypothecationCash":null,"rehypothecationCashCurrencies":null,"restrictedRehypothecation":null,"restrictedRehypoSecurities":null,"restrictedRehypoCash":null,"restrictedRehypoCashCurrencies":null,"positionOrderSource":null,"clearedAutoFundAccountBySplitType":null,"ampMarginFlag":null,"calculationType":null,"imDisputeThreshold":null,"cpPostingBasis":null,"customerType":null,"customerTypeId":null,"disputeThresholdAmount":null,"disputeThresholdPercentage":null,"holidayRegion":null,"hybridOffset":null,"iaAmpIndicator":null,"marginFlowType":null,"imSegregationModel":null,"interEntityImSplitType":null,"moveSplitFlag":null,"nccaFlag":null,"jpmMarginFlg":null,"leImDisputeThreshold":null,"lePostingBasis":null,"receiveReviewRequiredFlag":null,"payReviewRequiredFlag":null,"leModelType":null,"moveDisableFlag":null,"prmsMarginClientFlag":null,"variableReportingCurrency":null,"imCpRehypoFlag":null,"imLeRehypoFlag":null,"valuationAgentId":null,"valuationAgentFlag":null,"soleCalcAgent":null,"settlementCurrency":null,"vmCpRehypoFlag":null,"vmLeRehypoFlag":null,"cimActionRequiredFlag":null,"cimApprovalRequiredFlag":null,"grossPaymentNettingFlag":null,"rimSegregationModel":null,"sourceSystem":null,"linkedQueryIds":null,"groupId":null,"isMtuIndFlag":null,"isTripartyFlag":null,"agreementAlias":null,"relatedPbAgreementNumber":null,"csaType":null,"imReportingCurrency":null,"specialCustomerType":null,"houseMarginCalculationModels":null,"settlementNetting":null,"includeLegacyTrades":null,"crossMarginingApplicable":null,"includeOutOfScopeSensitivities":null,"includeFXSpots":null,"excludeJumpToDefaultAddOn":null,"simmPortfolioAddOn":null,"imosAgreementCaid":null,"imosOwnershipCaid":null,"cmOwnershipCaid":null,"masterAgreementVersion":null,"independentAdjustments":null,"independentAmounts":null,"legalEntityIndependentAmounts":null,"counterPartyIndependentAmounts":null,"roundingAmountLE":null,"returnRoundingAmountLE":null,"returnRoundingAmountCP":null,"roundingAmountCP":null,"imTermFlag":null,"csCsaCovered":null,"roundingAmountCurrencyCP":null,"returnRoundingAmountCurrencyCP":null,"roundingAmountCurrencyLE":null,"returnRoundingAmountCurrencyLE":null,"independentAmountReturnable":null,"calculationCurrency":null,"imFloorAmount":null,"mtmCalcType":null,"excludeFxNopSpotFlag":null,"grossCPMinimumTransferAmount":null,"grossLEMinimumTransferAmount":null,"iaMultiplier":null,"marginProducts":null,"primaryUnifiedDocId":null,"primaryDocTitle":null,"colValDisputeResolution":null,"firstParty":null,"jpmRole":null,"multiApplicableUnderAgreement":null,"priceSource":null,"secondParty":null,"partyAssignedJPLE":null,"ctpyCltrl":null,"mktValDetermination":null,"mktValPriceDisupute":null,"transferabilityCP":null,"transferabilityJPM":null,"mgnPaymentLateNotice":null,"mgnPaymentTimelyNotice":null,"jpmCollateral":null,"amendmentsEffectiveDate":null,"allBranchesCounterPartyValue":null,"standardPartyInNovationNet":null,"standardPartyInSettlementNet":null,"standardPartyCltOid":null,"collateralStandardParty":null,"standardPartyJpmGuranteeExist":null,"standardPartyInCloseoutNet":null,"secondaryUnifiedDocId":null,"secondaryDocumentTitle":null,"primaryDocumentCreationDate":null,"secondaryDocumentCreationDate":null,"primaryDocumentEffectiveDate":null,"secondaryDocumentEffectiveDate":null,"primaryDocumentExpirationDate":null,"secondaryDocumentExpirationDate":null,"primaryDocumentModificationDate":null,"secondaryDocumentModificationDate":null,"primaryAgreementCreator":null,"secondaryAgreementCreator":null,"primaryDocumentCreatorName":null,"secondaryDocumentCreatorName":null,"primaryTaxonomyVersionId":null,"secondaryTaxonomyVersionId":null,"primaryAgreementGoverningLawCountry":null,"secondaryAgreementGoverningLawCountry":null,"primaryAgreementGoverningLawState":null,"secondaryAgreementGoverningLawState":null,"investorAdvisorUcn":null,"csUcnIa":null,"governingLawCountryDescription":null,"governingLawRegionDescription":null,"contractType":null,"preferred":null,"additionalPrimaryGoverningLaw":null,"inIsda10A":null,"crossDefaultPaymentMaxVal":null,"masterAgreementFinancialCovenantType":null,"electiveTerminationRightsExists":null,"jpCreditEventUponMergerApplies":null,"cpCreditEventUponMergerApplies":null,"isApplicableSPNBranch":null,"calculationAgent":null,"isApplicableOFFBranch":null,"isJpmCollateralMaxValSet":null,"jpmGuaranteeExists":null,"jpmCloseOutApplicable":null,"cpCloseOutApplicable":null,"jpOfficialSettlementType":null,"cpOfficialSettlementType":null,"guarantyAgreementFlg":null,"jpNovationType":null,"cpNovationType":null,"inCltrlCounterParty":null,"leAutomaticEarlyTerminationApplies":null,"cpAutomaticEarlyTerminationApplies":null,"terminationCurrency":null,"governingLawCountryCode":null,"thresholdCurrencyCode":null,"governingLawId":null,"specificPreferredCallTimeId":null,"specificPreferredCallTime":null,"executionCutoffTime":null,"executionCutoffTimeZone":null,"paymentNettingFlag":null,"csaTerminationCurrency":null,"negativeInterestFlag":null,"opicsZeroRateFloor":null,"interestRate":null,"taxInterestRate":null,"returnRoundingAmount":null,"timeOfNotCalling":null,"taxTransferType":null,"unregulatedTradeEffectiveDate":null,"gracePeriodValue":null,"transferTimeValue":null,"terminationCurrencyForTwoAffectedPartiesLE":null,"terminationCurrencyForTwoAffectedPartiesCP":null,"amendColtrExistFlag":null,"amendmentDate":null,"substitution":null,"substitutionRightsId":null,"collateralAgreementId":null,"valuationDateTimeFrequency":null,"valuationDateTimeFrequencyId":null,"locId":null,"rehypothecationDesc":null,"independantAdjustmentType":null,"independantAdjustmentTypeId":null,"initialVariationMargin":null,"collateralAmountsThreshold":null,"markToMarkAdjustmentIndependantAmount":null,"agreementMarginRegimeProducts":null,"legalAgreementCollateralTriggers":null,"agreementAgrProProduct":null,"agrOffJpmGuranteeExist":null,"agrOffInCloseoutNet":null,"agrOffInNovationNet":null,"agrOffInSettlementNet":null,"isCrossMargined":null,"familyName":null,"upfrontRequiredFlag":null,"stpLevel":null,"excludeFromDiary":null,"marginingSystem":null,"interestMarginingSystem":null,"baseId":null,"asiaMoveAutomationFlag":null,"defaultAssetType":null,"moveDisabledComment":null,"baseCashMoveProcessingLimits":null,"csr":null,"imCallDirection":null,"coltToBeDoneFlag":null,"isEligibleForTradeFlag":null,"coltStatus":null,"regimeAndComplianceDate":null,"investmentAdvisor":null,"otcCrossMarginingFlag":null,"eligibilitySet":null,"statementLegalEntityName":null,"isCodedStatement":null,"codedStatementName":null,"isCsrSignedOff":null,"idPrtn":null,"citAsOffDate":null,"citUntilDate":null,"independentAmountType":null,"independentAmount":null,"eligibleTradeCurrencies":null,"eligibleTradesScheduled":null,"eligibleTradesByDate":null,"leSubEntity":null,"leSubEntityReportingCurrency":null,"borrowFromLESubEntity":null,"ccp":null,"ccpCode":null,"linkLeSubEntities":null,"linkCpSubEntities":null,"clientAgreementAlias":null,"clientAgreementAliases":null,"counterpartyIndustryClassification":null,"clearingAccountNumber":null,"splitTypeConfigs":null,"imosFundingModel":null,"transferTimeCurrencies":null,"securityTransferTimes":null,"statementSla":null,"statementTimezone":null,"stmtTimezone":null,"distributionAndInterests":null,"mailboxName":null,"mailboxEmailAddress":null,"securitiesLongboxModel":null,"cashLongboxModel":null,"autoBookAgreedPayments":null,"securityMap":null,"clearedAutoFundAccount":null,"nonClearedAutoFundCurrency":null,"nonClearedAutoFundAccount":null,"preferredAccountIds":null,"postRegulations":null,"receiveRegulations":null,"legalEntityOwnershipCaids":null,"simmCalculationCurrency":null,"indexDecomposition":null,"businessLocations":null,"leCreditRatingRuleDescription":null,"cpCreditRatingRuleDescription":null,"statementType":null,"isImReconRequired":null,"marginFlowTypeOverride":null,"clientBranchOnStatementFlag":null,"dealId":null,"collateralMonitoringGroup":null,"collateralConfidenceFactor":null,"curePeriod":null,"fxRegion":null,"statementEmailSubject":null,"nettingsetRootId":null,"segmentId":null,"pbLegalEntityMTA":null,"pbCounterPartyMTA":null,"pbLegalEntityThreshold":null,"pbCounterPartyThreshold":null,"linkedQueryIdOverride":null,"greaterOfClientAgreementPreference":null,"segments":null,"moveDisabledReason":null,"inflationIndexedUnitCurrency":null,"inflationIndexedUnitApplicableForThresholdAndMinimumTransferAmount":null,"feedDependencies":null,"restrictAutomatedReuseOfCollateral":null,"agreementShortName":null,"agreementShortName2":null,"agreementShortName3":null,"consentOfRepledge":null,"statementPassword":null,"markSameDayHoliday":null,"roundingForCash":null,"roundingValueForCash":null,"roundingForSecurities":null,"roundingValueForSecurities":null,"prodParallel":null,"terminationDate":null,"metaTicket":null,"traderBook":null,"crossMarginEntities":{"source":"USER","sourceId":null,"value":[{"counterParty":{"role":"COUNTERPARTY","eci":"0220883272","ucn":"009900094000","spn":"9031065","name":"COAST TO COAST CATERING","lei":null,"sapLeCode":null,"principalLei":null,"principalEci":null,"cbd":null,"leCode":null,"goldenEntityEci":null,"goldenEntityName":null},"legalEntities":[{"legalEntity":{"role":"LEGAL_OWNER","eci":"0220883112","ucn":"009900084000","spn":"9022035","name":"COAST TO COAST CATERING","lei":null,"sapLeCode":null,"principalLei":null,"principalEci":null,"cbd":null,"leCode":null,"goldenEntityEci":null,"goldenEntityName":null},"legalAgreementProfiles":{"PFS":[{"profileId":"10000000244027","lineOfBusiness":"PFS","profileType":"CONTRACT","profileStatus":"LIVE","createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":2,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"10000000244029","lineOfBusiness":"PFS","profileType":"CONTRACT","profileStatus":"LIVE","createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":5,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null}],"FI_REPO":[{"profileId":"10000000244028","lineOfBusiness":"FI_REPO","profileType":"CONTRACT","profileStatus":null,"createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":6,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"10000000244029","lineOfBusiness":"FI_REPO","profileType":"CONTRACT","profileStatus":null,"createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":6,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null}]}}]}]},"crossMarginEntitiesRules":{"source":"USER","sourceId":null,"value":[{"lineOfBusiness":"PFS","entityRules":[{"ruleId":"EQUITY_PB_FAMILY","ruleDescription":"Include Equity PB Family","conditions":{"@type":".AndConnector","type":"AND","failMode":"FALSE","expr":[{"@type":".operators.EqCondition","expr":[{"@type":".operands.JsonPathOperand","id":{"@type":".NamedID","id":"instrument.familyDescription"},"type":"JSONPATH","failMode":"FALSE"},{"@type":".operands.StringOperand","value":"PB_FAM"}]},{"@type":".operators.EqCondition","expr":[{"@type":".operands.JsonPathOperand","id":{"@type":".NamedID","id":"instrument.marginFlag"},"type":"JSONPATH","failMode":"FALSE"},{"@type":".operands.StringOperand","value":"TRUE"}]}]},"action":"INCLUDE","isEnabled":"YES"},{"ruleId":"EXCLUDE_FAMILY_OVERRIDE","ruleDescription":"Excluded Family Override","conditions":{"@type":".InCondition","operand":{"@type":".JsonPathOperand","id":{"@type":".NamedID","id":"familyId"},"type":"JSONPATH","failMode":"FALSE"},"membersType":"STRING","members":["[]"]},"action":"EXCLUDE","isEnabled":"YES"}]},{"lineOfBusiness":"CLEARING","entityRules":[{"ruleId":"ACCOUNT_SPN","ruleDescription":"Account SPN","conditions":{"@type":".AndConnector","type":"AND","failMode":"FALSE","expr":[{"@type":".operators.EqCondition","expr":[{"@type":".operands.JsonPathOperand","id":{"@type":".NamedID","id":"account.SPN"},"type":"JSONPATH","failMode":"FALSE"},{"@type":".operands.StringOperand","value":"7014279"}]},{"@type":".operators.EqCondition","expr":[{"@type":".operands.JsonPathOperand","id":{"@type":".NamedID","id":"account.marginFlag"},"type":"JSONPATH","failMode":"FALSE"},{"@type":".operands.StringOperand","value":"TRUE"}]}]},"action":"INCLUDE","isEnabled":"YES"},{"ruleId":"EXCLUDE_ACCOUNT_OVERRIDE","ruleDescription":"Excluded Account Override","conditions":{"@type":".InCondition","operand":{"@type":".JsonPathOperand","id":{"@type":".NamedID","id":"account.id"},"type":"JSONPATH","failMode":"FALSE"},"membersType":"STRING","members":["[]"]},"action":"EXCLUDE","isEnabled":"YES"}]},{"lineOfBusiness":"FI_REPO","entityRules":[{"ruleId":"ACCOUNT_SPN","ruleDescription":"Account SPN","conditions":{"@type":".EqCondition","expr":[{"@type":".operands.JsonPathOperand","id":{"@type":".NamedID","id":"account.SPN"},"type":"JSONPATH","failMode":"FALSE"},{"@type":".operands.StringOperand","value":"7014279"}]},"action":"INCLUDE","isEnabled":"YES"},{"ruleId":"EXCLUDE_ACCOUNT_OVERRIDE","ruleDescription":"Excluded Account Override","conditions":{"@type":".InCondition","operand":{"@type":".JsonPathOperand","id":{"@type":".NamedID","id":"account.id"},"type":"JSONPATH","failMode":"FALSE"},"membersType":"STRING","members":["[]"]},"action":"EXCLUDE","isEnabled":"YES"}]}]},"crossMarginProductsRules":{"source":"USER","sourceId":null,"value":[{"lineOfBusiness":"PRINCIPAL_DERIVATIVE","productRules":[{"ruleId":"111","ruleDescription":"rule description1","conditions":null,"action":"INCLUDE","isEnabled":"YES"},{"ruleId":"1222","ruleDescription":"rule description2","conditions":null,"action":"EXCLUDE","isEnabled":"NO"}]},{"lineOfBusiness":"PFS","productRules":[{"ruleId":"111","ruleDescription":"rule description1","conditions":null,"action":"INCLUDE","isEnabled":"YES"},{"ruleId":"1222","ruleDescription":"rule description2","conditions":null,"action":"EXCLUDE","isEnabled":"NO"}]}]},"crossMarginCallManagement":null,"crossMarginCollateralManagement":null,"simmriskClassMultipliers":null,"masterAgreements":[{"agreementId":"10000000244027","lineOfBusiness":"PFS","agreementCategory":"PFS","profileType":"CONTRACT","legalEntityName":"PFS","status":"LIVE","updatedBy":null,"createdBy":null,"version":2,"eci":"0220883112","_originalData":{"profileId":"10000000244027","lineOfBusiness":"PFS","profileType":"CONTRACT","profileStatus":"LIVE","createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":2,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"_agreementType":"PFS"},{"agreementId":"10000000244029","lineOfBusiness":"PFS","agreementCategory":"PFS","profileType":"CONTRACT","legalEntityName":"PFS","status":"LIVE","updatedBy":null,"createdBy":null,"version":5,"eci":"0220883112","_originalData":{"profileId":"10000000244029","lineOfBusiness":"PFS","profileType":"CONTRACT","profileStatus":"LIVE","createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":5,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"_agreementType":"PFS"},{"agreementId":"10000000244028","lineOfBusiness":"FI_REPO","agreementCategory":"FI_REPO","profileType":"CONTRACT","legalEntityName":"FI_REPO","status":null,"updatedBy":null,"createdBy":null,"version":6,"eci":"0220883112","_originalData":{"profileId":"10000000244028","lineOfBusiness":"FI_REPO","profileType":"CONTRACT","profileStatus":null,"createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":6,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"_agreementType":"FI_REPO"},{"agreementId":"10000000244029","lineOfBusiness":"FI_REPO","agreementCategory":"FI_REPO","profileType":"CONTRACT","legalEntityName":"FI_REPO","status":null,"updatedBy":null,"createdBy":null,"version":6,"eci":"0220883112","_originalData":{"profileId":"10000000244029","lineOfBusiness":"FI_REPO","profileType":"CONTRACT","profileStatus":null,"createdBy":null,"createdDtm":null,"updatedDtm":null,"updatedBy":null,"version":6,"attributes":null,"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"_agreementType":"FI_REPO"}],"eci":"0220883272","spn":"9031065"},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"linkedProfiles":{"accounts":[],"statements":[],"settlementInstructions":[],"consolidatedStatement":[],"contacts":[],"cassAccounts":[],"nettingGroupProfiles":[],"disputeProfiles":[],"commitmentProfiles":[],"requirementProfiles":[],"contactProfiles":[],"defaultProfiles":[],"collateralMoveSimulationProfiles":[]},"profileOverrides":null}
