//utility

//----------------------------------------------
export const cloneObject = (obj = {}) => {
  return JSON.parse(JSON.stringify(obj))
}

//----------------------------------------------
export const deepMerge = (target, source) => {
  Object.entries(source).forEach(([key, value]) => {
      if (value && typeof value === 'object'  && !Array.isArray(value)) {
          deepMerge(target[key] = target[key] || {}, value);
          return;
      }
      target[key] = value;
  });
  return target;
}
//----------------------------------------------

export class Debouncer {
  constructor(options = {}) {
    let {id = null, threshold = 25, allowDuplicates = false} = options
    this.id = id
    this.isSet = false
    this.allowDuplicates = allowDuplicates
    this.inDebounce = null
    this.buffer = []
    this.threshold = threshold
  }

  list(){
    return this.buffer
  }

  execute(){
    let clone = [...this.buffer]
    this.buffer = []
    return clone.map(x => x = JSON.parse(x))
  }

  add(item, func, delay){
    if(!!item){
    let isDuplicate = this.buffer.find(i => i === JSON.stringify(item))
    if( (!isDuplicate && !this.allowDuplicates) || this.allowDuplicates){
      this.buffer.push(JSON.stringify(item))
    }
    if(this.buffer.length >= this.threshold){
      func()
    }
    else{
      this.set(func, delay)
    }
    }
    else{
    this.set(func, delay)
    }
  }

  set(func, delay) {
    clearTimeout(this.inDebounce)
    this.inDebounce = setTimeout(() => {
    this.isSet = false;
    func()
    }, delay)
  }

  clear(){
    this.buffer = []
    clearTimeout(this.inDebounce)
  }
}
//----------------------------------------------
export const updateObjectWithMatchingKeys = ({obj = {}, data = {}, allowUnassigned = true}) => {
  for (let [key, val] of Object.entries(obj)) {
    obj[key] = !!data[key] ? data[key] : val
  }
  if(allowUnassigned){
    for (let [key, val] of Object.entries(data)) {
      obj[key] = data[key]
    }
  }
}

export const createNestedObject = (base, arr, insertAtEnd) => {
  arr.forEach((name, i) => {
    base = base[ arr[i] ] = base[ arr[i] ] || (i !== arr.length - 1) ? {} : insertAtEnd;
  })
};

//----------------------------------------------
export const traverseObjectAndReturn = ({obj, string}) => {
  let clone = cloneObject(obj)
  let prop, props = string.split('.');
  for (var i = 0, iLen = props.length - 1; i < iLen; i++) {
      prop = props[i];
      let candidate = clone[prop];
      if (candidate !== undefined && !!candidate) {
        clone = candidate;
      } else {
          break;
      }
  }

  return clone[props[i]] || null;
}

//----------------------------------------------
export const traverseObject = ({obj, string, insertAtEnd = {}}) => {
	let parts = string.split('.');
  let str = '';

  parts.forEach((part, i) => {
    str += `${i > 0 ? '.' : ''}${part}`
    let nestedData = traverseObjectAndReturn({obj, string: str})
    if(!!nestedData){
      return nestedData
    }
    else{
      createNestedObject( obj, str.split('.'), insertAtEnd );
    }
  })

  return null
}

//----------------------------------------------
export const traverseObjectAndInsert = ({obj, string, bindOn = null, newValues = null}) => {
  let parts = string.split('.');

  let newObj = obj[parts[0]];
  if(parts[1]){
    parts.splice(0,1);
    return traverseObjectAndInsert({obj: newObj, string: parts.join('.'), bindOn, newValues});
  }
  else{
    obj[parts[0]] = !!bindOn ? ( parts[0] === bindOn ? newValues : {} ) : {}
  }
}

//----------------------------------------------
export const traverseFormToBindValue = ({formData, bind, layer = null, filterFunction = () => true}) => {
  let result = []

  if(!!formData){
    let clone = cloneObject(formData),
        data = !!bind ? traverseObjectAndReturn({obj: clone, string: bind}) : null;

    //----------------------------- already at source/value level, so filter and return
    if(!!data && !Array.isArray(data) ) {
        if(!!data.value && Array.isArray(data.value)){
            for (let i = 0; i < data.value.length; i++) {
                if(!!data.value[i]){
                    data.value[i]["_skey"] = cloneObject(data.value[i]);
                }
            }
            return data.value.filter(x => filterFunction(x));
        }else {
            if (data.value) {
                return data.value.filter(x => filterFunction(x));
            }
        }
    }

    //-----------------------------  requires data extraction
    if(!!data && Array.isArray(data)){
      data.forEach(item => {
        let obj = {},
        layeredItem = !!layer ? item[layer] : item;
        //-----------------------------------
          for (let [key, val] of Object.entries(layeredItem)) {
              obj[key] = typeof val === 'string' || typeof val === 'number' ? val : (!!layer ? (!!item[layer][key] ? item[layer][key].value : null) : (!!item[key] ? item[key].value : null));
          }
          obj["_skey"]=layeredItem;
          if(filterFunction(layeredItem)) {
            result.push(obj);
          }
      });
    }
    //-----------------------------
  }

  return result
}

export const objectExists = (object, objString) => {
    if(!!object && !!objString) {
        let props = objString.split('.');
        for (var i = 0; i < props.length; i++) {
            object = object[props[i]]
            if(object == undefined) {
                return false;
            }
        }
        return true;
    }
    return false;
}
export const isStringNotNull = (objString) => {
    if(!!objString || objString === '') {
        return true;
    }
    return false;
}




//abcd component


import React, {Component, Fragment} from 'react';
import autoBind from 'react-autobind';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';
import {fetchConfig} from './config/config';
import axios from 'axios'

import moment from "moment";
import {
    configSetup,
    formBind,
    newFormBind,
    tableEntryUpdate,
    tableOnlySetup
} from '../../../../../../javascript/config';
import {cloneObject, Debouncer, objectExists, traverseFormToBindValue, traverseObject, traverseObjectAndInsert, traverseObjectAndReturn, updateObjectWithMatchingKeys} from '../../../../../../javascript/utility';
import {mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal} from '../../../../../../javascript/mixins'

import {DataGrid} from '@jpmuitk/data-grid';
import {Button, Dialog, DialogActions, DialogContent, Icon, Spinner} from '@jpmuitk/components';

import Buttons from '../../../../../Common/Buttons/Buttons';
import Header from '../../../../../Common/Header/Header';
import FormBuilder from '../../../../../Common/FormBuilder';

import * as appStateAction from '../../../../../../actions/appStateAction';
import configRest from "../../../../../../config/config";
import AmountGrid from "../../../../../Common/Amount/AmountGrid";
import {dropdownPresets} from '../../../../../../config/dropdownPresets';
import EligibleProducts from "../../../../../Common/EligibleProduct/EligibleProducts";
import regulationsMapping from './config/regulations_mapping.json';
import cityTimezoneMapping from './config/city_timezone_mapping.json';
import transferTimeMapping from './config/region_to_transfer_time_mapping.json';
import {isReadWrite} from "../../../../../../javascript/entitlementUtils";
import {inlineGetServiceCall} from "../../../../../../api/ApiUtils";
import {MessageBox} from "../../../../../Common/messagebox";
const debounce = new Debouncer();
const regulations = JSON.parse(JSON.stringify(regulationsMapping));
const statementTimezoneMasterMap = JSON.parse(JSON.stringify(cityTimezoneMapping));
const regionTransferTimeMapping = JSON.parse(JSON.stringify(transferTimeMapping));

const key = 'agreementParameter';
let filteredData = null;
let selectedRowIdx = null;

const customTableEntryUpdate = ({newdata, markSource = null}) => {
    let values = {}
    newdata.forEach(x => {
        x.column.forEach(form => {
            const {bind, defaultValue, value = null} = form;
            values[bind] = (!!markSource && markSource) ? {value: value !== null ? value : defaultValue, source: defaultValue !== value ? "USER" : null} : value
        });
    });
    return values
}

class _Component extends Component {
  constructor(props) {
    super(props);

    this.state = {
        permissions: {
            readonly: this.props.data.profileReadOnly ? true : !isReadWrite(this.props.userInfo, 'ROLE_AGENCY_UI_READ_WRITE'),
            partialReadonly: this.props.data.profileReadOnly ? true : !isReadWrite(this.props.userInfo, 'ROLE_AGENCY_UI_READ_WRITE')},
      config: null,
      toggleState: true,
      ready: true,
      gridApi: {},
      modal: {
        disabled: null,
        show: false,
        header: {},
        formdata: null,
        onUpdate: () => {},
        onSave: () => {}
      },
        modalTransferTimeCurrencies: {
            show: false,
            fetching: true,
            fullscreen: false,
            header: {
                title: `Transfer Times`
            },
            gridApi: null,
            tabledata: null,
            onGridReady: ({api}) => {
                const {modalTransferTimeCurrencies} = this.state;
                modalTransferTimeCurrencies.gridApi = api;
                this.setState({modalTransferTimeCurrencies});

            },
            onOpen: () => {
                const {modalTransferTimeCurrencies} = this.state;
                const lob = this.props.appState.lob.toUpperCase();
                modalTransferTimeCurrencies.fetching = true;
                modalTransferTimeCurrencies.fullscreen = false;
                this.setState({modalTransferTimeCurrencies});

                // do api to get data
                setTimeout(async() => {
                    modalTransferTimeCurrencies.fetching = false;
                    modalTransferTimeCurrencies.fullscreen = true;
                    const {data} = this.props;
                    const rowData = [];
                    const choosenCurrencies = [];
                    if(!!data.transferTimeCurrencies) {
                        data.transferTimeCurrencies.forEach(transferTimeCurr => {
                            const chosenCurrencies = transferTimeCurr.currency.split(',');
                            chosenCurrencies.forEach(curr => {
                                choosenCurrencies.push(curr);
                                rowData.push({"currency":curr,"transferTime":transferTimeCurr.transferTime})
                            });
                        });
                    }

                    dropdownPresets.TRANSFER_TIME_CURRENCY.forEach(dropdownCurrency => {
                        if(!choosenCurrencies.includes(dropdownCurrency)) {
                            rowData.push({"currency":dropdownCurrency,"transferTime":null})
                        }
                    });
                    modalTransferTimeCurrencies.tabledata.rowData = rowData;

                    this.setState({modalTransferTimeCurrencies})
                }, 200)
            },
            onClose: () => {
                const {modalTransferTimeCurrencies} = this.state;
                modalTransferTimeCurrencies.show = false;
                modalTransferTimeCurrencies.fetching = true;
                modalTransferTimeCurrencies.fullscreen = false;
                modalTransferTimeCurrencies.tabledataSelected = [];
                this.setState({modalTransferTimeCurrencies})
            },
            onSave: () => {
                const data = cloneObject(this.props.data),
                    {onTableUpdate} = this.props,
                    {modalTransferTimeCurrencies} = this.state,
                    prop = 'compositeProfile.legalAgreement.attributes.transferTimeCurrencies';

                // creates structure if it doesn't exist or returns array
                let obj = !!data ? cloneObject(data) : {};

                // check if object exists first
                if(traverseObjectAndReturn({obj, string: prop}) === null){
                    traverseObject({obj, string: prop, insertAtEnd: {'source': 'USER', 'value': []}  })
                }

                let transferTimeCurrencies = traverseObjectAndReturn({obj, string: prop});

                var reduced = {};
                modalTransferTimeCurrencies.tabledata.rowData.forEach(x => {
                    if(!!x.currency && !!x.transferTime && x.currency !== 'Select' && x.transferTime !== 'Select') {
                        if(!!reduced[x.transferTime]){
                            reduced[x.transferTime].push(x.currency);
                        } else{
                            reduced[x.transferTime] = [x.currency];
                        }
                    }
                });
                let filtered = [];
                Object.entries(reduced).forEach(entry => {
                    filtered.push({"transferTime":entry[0],"currency": !!entry[1] ? entry[1].join(',') : null});
                })

                let confirmPrompt = true;
                if(filtered.length === 0){
                    confirmPrompt = confirm("You have not selected any items.  Would you like to continue?")
                }
                if(confirmPrompt){
                    transferTimeCurrencies.value = reduced;
                    traverseObjectAndInsert({obj:data, string: prop, bindOn:'transferTimeCurrencies', newValues: transferTimeCurrencies});
                    data.transferTimeCurrencies = filtered;
                    this.props.onCustFormUpdate(data,[{prop,bindOn:'transferTimeCurrencies'}])
                    modalTransferTimeCurrencies.show = false;

                    this.setState({modalTransferTimeCurrencies});
                    this.gridBindEvents({api: this.state.gridApi.modalTransferTimeCurrencies})
                }
            }
        },
      resetFormFields: {
          resetIfSelected: [{ field: 'frequency', value: '*' }],
          resetExclude: ['frequency']
      }
    };

    const {user} = this.props.appState;

    this.bindedEvents = {
        UPDATE_TRASNFERTIME_CURRUNCIES: (region) => {
            if (!!region) {
                if (!objectExists(this.props, 'data.compositeProfile.legalAgreement.version') &&
                    objectExists(this.props, 'data.compositeProfile.legalAgreement.attributes.calculationType.value') &&
                    this.props.data.compositeProfile.legalAgreement.attributes.calculationType.value === 'CLEARED_ACCOUNT') {
                    let filtered = regionTransferTimeMapping[region];
                    const data = cloneObject(this.props.data)
                    let prop = 'compositeProfile.legalAgreement.attributes.transferTimeCurrencies';

                    let obj = !!data ? cloneObject(data) : {};

                    if (traverseObjectAndReturn({obj, string: prop}) === null) {
                        traverseObject({obj, string: prop, insertAtEnd: {'source': 'USER', 'value': []}})
                    }

                    let transferTimeCurrencies = traverseObjectAndReturn({obj, string: prop});
                    let reduced = {};
                    filtered.forEach(entry => {
                        reduced[entry.transferTime] = entry.currency.split(',');
                    })
                    transferTimeCurrencies.value = reduced;
                  traverseObjectAndInsert({obj:data, string: prop, bindOn:'transferTimeCurrencies', newValues: transferTimeCurrencies});
                    data.transferTimeCurrencies = filtered;
                    this.props.onCustFormUpdate(data, [{prop, bindOn: 'transferTimeCurrencies'}])
                }

            }

        },
        CREATE_NEW_CALL_FREQUENCY: () => {
            const {data, onTableUpdate} = this.props;
            let newEntry = null,
                prop = 'compositeProfile.legalAgreement.attributes.callFrequencies';

            // creates structure if it doesn't exist or returns array
            let obj = !!data ? cloneObject(data) : {};

            // check if object exists first
            if (traverseObjectAndReturn({obj, string: prop}) === null) {
                traverseObject({obj, string: prop, insertAtEnd: {}})
            }

            let arr = traverseObjectAndReturn({obj, string: prop});
            if (!arr.value) {
                arr.value = [];
            }

            selectedRowIdx = null;

            this.toggleModal({
                state: true,
                header: {title: 'Call Frequency'},
                formdata: newFormBind({formdata: this.state.config.create.newCallFrequency}),
                onUpdate: (newdata) => {
                    newEntry = tableEntryUpdate({newdata, markSource: true});
                },
                onSave: () => {
                    console.log('onSave data...');
                    this.setState({resetTable: true}, () => {
                        let exists = false;
                        if (arr && arr.value && arr.value.length > 0) {
                            arr.value.forEach(item => {
                                if ((item.frequency && item.frequency.value && item.frequency.value === newEntry.frequency.value) ||
                                    (item.frequency && item.frequency === newEntry.frequency.value)) {
                                    exists = true;
                                    alert("This frequency is already added into the table. Please delete the existing duplicate frequency in the table before adding this one.");
                                }
                            });
                        }
                        if (!exists) {
                            const tempNewEntry = {};
                            Object.keys(newEntry).forEach(item => {
                                if (newEntry[item].value) {
                                    tempNewEntry[item] = newEntry[item].value;
                                }
                            });
                            arr.value.push(tempNewEntry);
                            this.toggleModal(false);
                            onTableUpdate({prop, data: arr});
                            this.setState({resetTable: false})
                            this.gridBindEvents(this.state.gridApi["callFrequency"]);
                        }
                    })
                }
            })
        },
        CREATE_NEW_SPLIT_TYPE_CONFIG: () => {
            const {data, onTableUpdate} = this.props;
            let newEntry = null,
                prop = 'compositeProfile.legalAgreement.attributes.splitTypeConfigs';

            // creates structure if it doesn't exist or returns array
            let obj = !!data ? cloneObject(data) : {};

            // check if object exists first
            if (traverseObjectAndReturn({obj, string: prop}) === null) {
                traverseObject({obj, string: prop, insertAtEnd: {}})
            }

            let arr = traverseObjectAndReturn({obj, string: prop});
            if (!arr.value) {
                arr.value = [];
            }

            selectedRowIdx = null;

            this.toggleModal({
                state: true,
                header: {title: 'Split Type Config'},
                formdata: newFormBind({formdata: this.state.config.create.newSplitTypeConfig}),
                onUpdate: (newdata) => {
                    newEntry = tableEntryUpdate({newdata, markSource: true});
                },
                onSave: () => {
                    console.log('onSave data...');
                    this.setState({resetTable: true}, () => {
                        let exists = false;
                        if (arr && arr.value && arr.value.length > 0) {
                            arr.value.forEach(item => {
                                if ((item.splitType && item.splitType.value && item.splitType.value === newEntry.splitType.value) ||
                                    (item.splitType && item.splitType === newEntry.splitType.value)) {
                                    exists = true;
                                    alert("This split type is already added into the table. Please delete the existing duplicate split type in the table before adding this one.");
                                }
                            });
                        }
                        if (!exists) {
                            const tempNewEntry = {};
                            Object.keys(newEntry).forEach(item => {
                                if (newEntry[item].value) {
                                    tempNewEntry[item] = newEntry[item].value;
                                }
                            });
                            arr.value.push(tempNewEntry);
                            this.toggleModal(false);
                            onTableUpdate({prop, data: arr});
                            this.setState({resetTable: false})
                            this.gridBindEvents(this.state.gridApi["splitTypeConfigs"]);
                        }
                    })
                }
            })
        },
        CREATE_NEW_CALCULATION_PRODUCTS: () => {
            const {data, onTableUpdate} = this.props;
            let newEntry = null,
                prop = 'compositeProfile.legalAgreement.attributes.calcProducts';

            // creates structure if it doesn't exist or returns array
            let obj = !!data ? cloneObject(data) : {};

            // check if object exists first
            if (traverseObjectAndReturn({obj, string: prop}) === null) {
                traverseObject({obj, string: prop, insertAtEnd: {"source": "USER", "value": []}})
            }

            let arr = traverseObjectAndReturn({obj, string: prop});

            selectedRowIdx = null;

            this.toggleModal({
                state: true,
                header: {title: 'Calculation Method/Product'},
                formdata: newFormBind({formdata: this.state.config.create.newCalculation}),
                onUpdate: (newdata) => {
                    newEntry = tableEntryUpdate({newdata, markSource: false});
                },
                onSave: () => {
                    this.setState({resetTable: true}, () => {
                        let exists = false;
                        if (arr && arr.value && arr.value.length > 0) {
                            arr.value.forEach(item => {
                                if (item.calculationMethod && item.calculationMethod === newEntry.calculationMethod) {
                                    exists = true;
                                    alert("This Calculation Method is already added into the table.");
                                }
                            });
                        }
                        if (!exists) {
                            arr.value.push(newEntry);
                            this.toggleModal(false);
                            onTableUpdate({prop, data: arr});
                            this.setState({resetTable: false})

                            this.gridBindEvents(this.state.gridApi["calculations"]);
                        }
                    })
                }
            })
        },
        TOGGLE_CHECKBOXES: () => {
            let clone = cloneObject(this.state.config);
            let snapshot = clone.layout.find(x => x.refKey === 'productEligibility').data.map(x => {
                x.column.map(form => {
                    form.value = !form.value;
                    form.defaultValue = !form.defaultValue;
                    form.source = 'USER';
                    return form
                });
                return x
            });

            // update global
            this.props.onFormUpdate(snapshot);

            // update local
            this.setState({config: clone, ready: false}, () => {
                this.setState({ready: true})
            })
        },
        HANDLE_LE_UCN_UPDATE: (leUCNValue) => {
            if (!leUCNValue) {
                return;
            }
            let searchBy = {};
            const lob = this.props.appState.lob.toUpperCase();
            searchBy['ucn'] = leUCNValue;

            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                parties = Object.assign({}, attributes.parties),
                value = Object.assign([], parties.value),
                partyObj = {};


            debounce.add(null, async () => {
                const res = await axios.post(`${configRest.BASE_URL}/${configRest.REST_URL}/ref-data/search`, searchBy);
                if (res && !!res.data) {
                    const data = res.data[0];
                    let clone = cloneObject(this.state.config);
                    let snapshot = clone.layout.find(x => x.refKey === 'agreement').data.map(x => {
                        x.column.map(form => {
                            if (form.bind === 'compositeProfile.legalAgreement.attributes.parties') {
                                if (!!form.value) {
                                    var entry = form.value.find(entry => entry.role === 'LEGAL_OWNER');
                                    if (!!entry) {
                                        entry.ucn = leUCNValue;
                                        entry.eci = data.eci;
                                        entry.spn = data.spn;
                                        entry.name = data.name;
                                        entry.lei = data.lei;
                                    } else {
                                        form.value.push({
                                            "role": "LEGAL_OWNER",
                                            "eci": data.eci,
                                            "ucn": leUCNValue,
                                            "spn": data.spn,
                                            "name": data.name,
                                            "lei": data.lei
                                        });
                                    }

                                } else {
                                    form.value = [{
                                        "role": "LEGAL_OWNER",
                                        "eci": data.eci,
                                        "ucn": leUCNValue,
                                        "spn": data.spn,
                                        "name": data.name,
                                        "lei": data.lei
                                    }];
                                }
                            }
                            if (form.title === 'Legal Entity Name') {
                                form.value = data.name;
                                form.defaultValue = data.name;
                                form.source = 'USER'
                            }
                            if (form.title === 'Legal Entity ECI') {
                                form.value = data.eci;
                                form.defaultValue = data.eci;
                                //this.props.appState.leEci = data.eci;
                                form.source = 'USER'
                            }
                            if (form.title === 'Legal Entity SPN') {
                                form.value = data.spn;
                                form.defaultValue = data.spn;
                                form.source = 'USER'
                            }
                            if (form.title === 'Legal Entity LEI') {
                                form.value = data.lei;
                                form.defaultValue = data.lei;
                                form.source = 'USER'
                            }
                            partyObj = {
                                "role": "LEGAL_OWNER",
                                "eci": data.eci,
                                "ucn": leUCNValue,
                                "spn": data.spn,
                                "name": data.name,
                                "lei": data.lei
                            };
                            return form
                        });
                        return x
                    });

                    let oldValue = value.filter((item) => item.role !== "LEGAL_OWNER");
                    oldValue.push(partyObj);
                    parties.value = oldValue;
                    parties.source = 'USER';

                    attributes.parties = parties;
                    legalAgreement.attributes = attributes;
                    compositeProfile.legalAgreement = legalAgreement;
                    formData.compositeProfile = compositeProfile;

                    const leSubEntitiesRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${data.eci}/le-sub-entities`);
                    if (leSubEntitiesRes && !!leSubEntitiesRes.data) {
                        formData.leSubEntityList = formData.linkedLESubEntities = leSubEntitiesRes.data;
                        formData.leSubEntityList.splice(0, 0, '');
                    }

                    const profileRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${data.eci}/le-longbox-accounts`)
                    if (profileRes && !!profileRes.data) {
                        let longboxAccounts = profileRes.data;
                        if (longboxAccounts.length > 0) {
                            formData.linkedLongboxAccounts = longboxAccounts;
                        }
                    }
                    // update global
                    this.props.onFormUpdate(snapshot);
                    this.props.onCustFormUpdate(formData);
                    // update local
                    this.setState({config: clone, ready: false}, () => {
                        this.setState({ready: true})
                    })
                }
            }, leUCNValue.length > 5 ? 600 : 0)
        },
        HANDLE_CP_UCN_UPDATE: (cpUCNValue) => {
            if (!cpUCNValue) {
                return;
            }
            let searchBy = {};
            const lob = this.props.appState.lob.toUpperCase();
            searchBy['ucn'] = cpUCNValue;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                parties = Object.assign({}, attributes.parties),
                value = Object.assign([], parties.value),
                partyObj = {};
            debounce.add(null, async () => {
                const res = await axios.post(`${configRest.BASE_URL}/${configRest.REST_URL}/ref-data/search`, searchBy);
                if (res && !!res.data) {
                    const data = res.data[0];
                    let clone = cloneObject(this.state.config);
                    let snapshot = clone.layout.find(x => x.refKey === 'agreement').data.map(x => {
                        x.column.map(form => {
                            if (form.bind === 'compositeProfile.legalAgreement.attributes.parties') {
                                if (!!form.value) {
                                    var entry = form.value.find(entry => entry.role == 'COUNTERPARTY');
                                    if (!!entry) {
                                        entry.ucn = cpUCNValue;
                                        entry.eci = data.eci;
                                        entry.spn = data.spn;
                                        entry.name = data.name;
                                        entry.lei = data.lei;
                                    } else {
                                        form.value.push({
                                            "role": "COUNTERPARTY",
                                            "eci": data.eci,
                                            "ucn": cpUCNValue,
                                            "spn": data.spn,
                                            "name": data.name,
                                            "lei": data.lei
                                        });
                                    }
                                } else {
                                    form.value = [{
                                        "role": "COUNTERPARTY",
                                        "eci": data.eci,
                                        "ucn": cpUCNValue,
                                        "spn": data.spn,
                                        "name": data.name,
                                        "lei": data.lei
                                    }];
                                }
                            }
                            if (form.title === 'Counterparty Name') {
                                form.value = data.name;
                                form.defaultValue = data.name;
                                form.source = 'USER'
                            }
                            if (form.title === 'Counterparty ECI') {
                                form.value = data.eci;
                                form.defaultValue = data.eci;
                                //this.props.appState.cpEci = data.eci;
                                form.source = 'USER'
                            }
                            if (form.title === 'Counterparty SPN') {
                                form.value = data.spn;
                                form.defaultValue = data.spn;
                                form.source = 'USER'
                            }
                            if (form.title === 'Counterparty LEI') {
                                form.value = data.lei;
                                form.defaultValue = data.lei;
                                form.source = 'USER'
                            }
                            partyObj = {
                                "role": "COUNTERPARTY",
                                "eci": data.eci,
                                "ucn": cpUCNValue,
                                "spn": data.spn,
                                "name": data.name,
                                "lei": data.lei
                            };
                            return form
                        });
                        return x
                    });
                    let oldValue = value.filter((item) => item.role !== "COUNTERPARTY");
                    oldValue.push(partyObj);
                    parties.value = oldValue;
                    parties.source = 'USER';

                    attributes.parties = parties;
                    legalAgreement.attributes = attributes;
                    compositeProfile.legalAgreement = legalAgreement;
                    formData.compositeProfile = compositeProfile;

                    // update global
                    this.props.onFormUpdate(snapshot);
                    this.props.onCustFormUpdate(formData);
                    // update local
                    this.setState({config: clone, ready: false}, () => {
                        this.setState({ready: true})
                    })
                }
            }, cpUCNValue.length > 5 ? 600 : 0)

        },
        HANDLE_PARENT_LE_UCN_UPDATE: (parentLEUCNValue) => {
            if (!parentLEUCNValue) {
                return;
            }
            let searchBy = {};
            const lob = this.props.appState.lob.toUpperCase();
            searchBy['ucn'] = parentLEUCNValue;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                parties = Object.assign({}, attributes.parties),
                value = Object.assign([], parties.value),
                partyObj = {};
            debounce.add(null, async () => {
                const res = await axios.post(`${configRest.BASE_URL}/${configRest.REST_URL}/ref-data/search`, searchBy);
                if (res && !!res.data) {
                    const data = res.data[0];
                    let clone = cloneObject(this.state.config);
                    let snapshot = clone.layout.find(x => x.refKey === 'agreement').data.map(x => {
                        x.column.map(form => {
                            if (form.bind === 'compositeProfile.legalAgreement.attributes.parties') {
                                if (!!form.value) {
                                    var entry = form.value.find(entry => entry.role === 'LEGAL_OWNER_PARENT');
                                    if (!!entry) {
                                        entry.ucn = parentLEUCNValue;
                                        entry.eci = data.eci;
                                        entry.spn = data.spn;
                                        entry.name = data.name;
                                        entry.lei = data.lei;
                                    } else {
                                        form.value.push({
                                            "role": "LEGAL_OWNER_PARENT",
                                            "eci": data.eci,
                                            "ucn": parentLEUCNValue,
                                            "spn": data.spn,
                                            "name": data.name,
                                            "lei": data.lei
                                        });
                                    }
                                } else {
                                    form.value = [{
                                        "role": "LEGAL_OWNER_PARENT",
                                        "eci": data.eci,
                                        "ucn": parentLEUCNValue,
                                        "spn": data.spn,
                                        "name": data.name,
                                        "lei": data.lei
                                    }];
                                }
                            }
                            if (form.title === 'Parent LE Name') {
                                form.value = data.name;
                                form.defaultValue = data.name;
                                form.source = 'USER'
                            }
                            if (form.title === 'Parent LE LEI') {
                                form.value = data.lei;
                                form.defaultValue = data.lei;
                                form.source = 'USER'
                            }
                            if (form.title === 'Parent LE ECI') {
                                form.value = data.eci;
                                form.defaultValue = data.eci;
                                form.source = 'USER'
                            }
                            partyObj = {
                                "role": "LEGAL_OWNER_PARENT",
                                "eci": data.eci,
                                "ucn": parentLEUCNValue,
                                "spn": data.spn,
                                "name": data.name
                            };
                            return form
                        });
                        return x
                    });
                    let oldValue = value.filter((item) => item.role !== "LEGAL_OWNER_PARENT");
                    oldValue.push(partyObj);
                    parties.value = oldValue;
                    parties.source = 'USER';

                    attributes.parties = parties;
                    legalAgreement.attributes = attributes;
                    compositeProfile.legalAgreement = legalAgreement;
                    formData.compositeProfile = compositeProfile;

                    //get subentities for trade setup
                    const cpSubEntitiesRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${data.eci}/cp-sub-entities`);
                    if (cpSubEntitiesRes && !!cpSubEntitiesRes.data) {
                        formData.linkedCPSubEntities = cpSubEntitiesRes.data;
                    }
                    // update global
                    this.props.onFormUpdate(snapshot);
                    this.props.onCustFormUpdate(formData);
                    // update local
                    this.setState({config: clone, ready: false}, () => {
                        this.setState({ready: true})
                    })
                }
            }, parentLEUCNValue.length > 5 ? 600 : 0)

        },
        HANDLE_ROUNDING_AMOUNT_UPDATE: () => {
            let clone = cloneObject(this.state.config);
            let deliverRoundingAmount;
            let returnRoundingAmount;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                deliverRoundingAmountObj = Object.assign({}, attributes.roundingAmount),
                returnRoundingAmountObj = Object.assign({}, attributes.returnRoundingAmount);
            clone.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Deliver Rounding Amount') {
                        deliverRoundingAmount = form.value;
                  };
                    if (form.title === 'Return Rounding Amount') {
                        returnRoundingAmount = form.value;
                  }});
            });

            let snapshot = clone.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Deliver Rounding Amount') {
                        if (!deliverRoundingAmount && !!returnRoundingAmount) {
                            form.value = returnRoundingAmount;
                            form.source = 'USER';
                            deliverRoundingAmountObj.value = returnRoundingAmount;
                            deliverRoundingAmountObj.source = 'USER';
                        }
                  };
                    if (form.title === 'Return Rounding Amount') {
                        if (!returnRoundingAmount && !!deliverRoundingAmount) {
                            form.value = deliverRoundingAmount;
                            form.source = 'USER';
                            returnRoundingAmountObj.value = deliverRoundingAmount;
                            returnRoundingAmountObj.source = 'USER';
                        }
                    }
                    return form;
                });
                return x;
            });

            attributes.roundingAmount = deliverRoundingAmountObj;
            attributes.returnRoundingAmount = returnRoundingAmountObj;
            legalAgreement.attributes = attributes;
            compositeProfile.legalAgreement = legalAgreement;
            formData.compositeProfile = compositeProfile;

            this.props.onFormUpdate(snapshot);
            this.props.onCustFormUpdate(formData);

            this.setState({config: clone, ready: false}, () => {
                this.setState({ready: true})
            });
        },
        HANDLE_POST_REGULATION_UPDATE: () => {
            let clone = cloneObject(this.state.config);
            let postRegulationValues;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                postRegulationPairs = [];

            let snapshot = clone.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Post Regulations') {
                        if (!!form.value) {
                            postRegulationValues = form.value
                        }
                  };
                    return form;
                });
                return x;
            });

            postRegulationValues.map(postRegulationValue => {
                let postRegulationObj = {
                    "value": regulations[postRegulationValue].value,
                    "code": regulations[postRegulationValue].code
                };
                postRegulationPairs.push(postRegulationObj);
            });

            attributes.postRegulations = {"source": "USER", "value": postRegulationPairs};
            legalAgreement.attributes = attributes;
            compositeProfile.legalAgreement = legalAgreement;
            formData.compositeProfile = compositeProfile;

            this.props.onFormUpdate(snapshot);
            this.props.onCustFormUpdate(formData);

        },
        HANDLE_RECEIVE_REGULATION_UPDATE: () => {
            let clone = cloneObject(this.state.config);
            let receiveRegulationValues;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                receiveRegulationPairs = [];

            let snapshot = clone.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Receive Regulations') {
                        if (!!form.value) {
                            receiveRegulationValues = form.value
                        }
                      };
                    return form;
                });
                return x;
            });

            receiveRegulationValues.forEach(receiveRegulationValue => {
                let receiveRegulationObj = {
                    "value": regulations[receiveRegulationValue].value,
                    "code": regulations[receiveRegulationValue].code
                };
                receiveRegulationPairs.push(receiveRegulationObj);
            });

            attributes.receiveRegulations = {"source": "USER", "value": receiveRegulationPairs};
            legalAgreement.attributes = attributes;
            compositeProfile.legalAgreement = legalAgreement;
            formData.compositeProfile = compositeProfile;

            this.props.onFormUpdate(snapshot);
            this.props.onCustFormUpdate(formData);

        },
        HANDLE_STMT_TIMEZONE_UPDATE: () => {
            let clone = cloneObject(this.state.config);
            let stmtTimezoneInputValues;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes),
                statmentTimezonePairs = [];

            let snapshot = clone.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Statement Timezone') {
                        if (!!form.value) {
                            stmtTimezoneInputValues = form.value
                        }
                    };
                    return form;
                });
                return x;
            });

            let stmtTimezoneObj = {
                "value": statementTimezoneMasterMap[stmtTimezoneInputValues].value,
                "code": statementTimezoneMasterMap[stmtTimezoneInputValues].code
            };

            attributes.stmtTimezone =  {"source": "USER", "sourceId": this.props.userInfo && this.props.userInfo.userDetails && this.props.userInfo.userDetails.principalId , "value": stmtTimezoneObj};
            legalAgreement.attributes = attributes;
            compositeProfile.legalAgreement = legalAgreement;
            formData.compositeProfile = compositeProfile;

            this.props.onFormUpdate(snapshot);
            this.props.onCustFormUpdate(formData);

        },

        HANDLE_CCP_UPDATE: () => {
            let clone = cloneObject(this.state.config);
            let ccpCode,ccp;
            let formData = Object.assign({}, this.props.data),
                compositeProfile = Object.assign({}, formData.compositeProfile),
                legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
                attributes = Object.assign({}, legalAgreement.attributes);

            let snapshot = clone.layout.find(x => x.refKey === 'agreement').data.map(x => {
                x.column.map(form => {
                    if (form.bind === 'compositeProfile.legalAgreement.attributes.ccp') {
                        if (!!form.value) {
                            let ccpCodeList = this.props.staticData["CCP_CODE"],
                                results = ccpCodeList.filter(function (item) {
                                    return item.code === form.value;
                                }),
                                ccpObj = results && (results.length > 0) ? results[0] : null;
                            if(!!ccpObj){
                                ccp = ccpObj.displayName;
                                ccpCode = ccpObj.code;
                            }
                        }
                    };

                    if (form.bind === 'compositeProfile.legalAgreement.attributes.ccpCode') {
                        if (!!ccpCode) {
                            form.value = form.defaultValue = ccpCode;
                        }
                    };
                    return form;
                });
                return x;
            });

            attributes.ccpCode =  {"source": "USER", "sourceId": this.props.userInfo && this.props.userInfo.userDetails && this.props.userInfo.userDetails.principalId, "value": ccpCode};
            attributes.ccp =  {"source": "USER", "sourceId": this.props.userInfo && this.props.userInfo.userDetails && this.props.userInfo.userDetails.principalId, "value": ccp};
            legalAgreement.attributes = attributes;
            compositeProfile.legalAgreement = legalAgreement;
            formData.compositeProfile = compositeProfile;

            this.props.onFormUpdate(snapshot);
            this.props.onCustFormUpdate(formData);
            this.setState({config: clone, ready: false}, () => {
                this.setState({ready: true})
            })
        },

        IS_AGREEMENT_NON_SEG_IM: () => {
            let isRegulated = false;
            let splitTypeIsIm = false;
            this.state.config.layout.find(x => x.refKey === 'parameters').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Regulatory Agreement' && !!form.value && form.value === 'YES') {
                        isRegulated = true;
                    }
                    if (form.title === 'IM/VM Split Type' && !!form.value && form.value === 'IM') {
                        splitTypeIsIm = true;
                    }
                })
            });
            return !(isRegulated && splitTypeIsIm);
        },
        VALIDATE_AGREEMENT_NAME_LENGTH: () => {
            let clone = cloneObject(this.state.config);
            clone.layout.find(x => x.refKey === 'marginPreferences').data.map(x => {
                x.column.map(form => {
                    if (form.title === 'Agreement Name Override') {
                        if (!!form.value && (form.value.length > form.max)) {
                            form.color = "white";
                            form.backgroundColor = "red";
                        } else {
                            form.color = "";
                            form.backgroundColor = "";
                        }
                    }});
            });
            this.setState({config: clone, ready: false}, () => {
                this.setState({ready: true})
            });
        },
        IS_DERIVATIVE_AGREEMENT_SETUP: () => {
            return this.props.isDerivativeAgreementSetup(this.props);
        },
        IS_CLEARED_AGREEMENT_SETUP: () => {
            return this.props.isClearedAgreementSetup(this.props);
        },
        UPDATING_EXISTING_AGREEMENT: () => {
            //rowIndex is null when CREATE NEW, so enable update
            return objectExists(this, 'props.data.compositeProfile.legalAgreement.version') &&
                this.props.data.compositeProfile.legalAgreement.version > 0;
        },
        EDIT_TRANSFER_TIMES: () => {
            let modalTransferTimeCurrencies = this.state.modalTransferTimeCurrencies;
            modalTransferTimeCurrencies.show = true;
            this.setState({modalTransferTimeCurrencies})
        },
       CREATE_SECURITY_TRANSFER_TIMES: () => {
            const {data, onTableUpdate} = this.props;
            let newEntry = null,
                prop = 'compositeProfile.legalAgreement.attributes.securityTransferTimes';

            // creates structure if it doesn't exist or returns array
            let obj = !!data ? cloneObject(data) : {};

            // check if object exists first
            if (traverseObjectAndReturn({obj, string: prop}) === null) {
                traverseObject({obj, string: prop, insertAtEnd: {}})
            }

            let arr = traverseObjectAndReturn({obj, string: prop});
            if (!arr.value) {
                arr.value = [];
            }

            selectedRowIdx = null;

            this.toggleModal({
                state: true,
                header: {title: 'Create Transfer Time for Security'},
                formdata: newFormBind({formdata: this.state.config.create.transferTimeSecurity, staticData:this.props.staticData}),
                onUpdate: (newdata) => {
                    newEntry = tableEntryUpdate({newdata, markSource: true});
                },
                onSave: () => {
                    console.log('onSave data...');
                    this.setState({resetTable: true}, () => {
                        let exists = false,
                            skip = false,
                            tempNewEntry = {};
                        Object.keys(newEntry).forEach(item => {
                            if (newEntry[item].value) {
                                tempNewEntry[item] = newEntry[item].value;
                            }
                        });
                        if(tempNewEntry && (!tempNewEntry.assetType || !tempNewEntry.countries || !tempNewEntry.transferTime ||(tempNewEntry.countries && tempNewEntry.countries.length === 0)) ){
                            MessageBox.error('Validation Error', 'Asset Type , Countries and Transfer Time  are required.', 500);
                            return ;
                        }
                        if (arr && arr.value && arr.value.length > 0) {
                            arr.value.forEach(item => {
                                if(JSON.stringify(item) === JSON.stringify(tempNewEntry)){
                                    exists = true;
                                    MessageBox.error('Validation Error', 'Transfer Time combination already exists.', 500);
                                }else if(item.assetType === tempNewEntry.assetType){
                                    if(item.transferTime === tempNewEntry.transferTime){
                                        item.countries = new Set(item.countries.concat(tempNewEntry.countries));
                                        skip = true;
                                        MessageBox.alert('Info Message', 'Selected Asset Type and Transfer Time combination already exists, so selected countries will be merged with existing Transfer Time.', 500);
                                    }else{
                                        tempNewEntry.countries.forEach(country =>{
                                            if(item.countries.includes(country)){
                                                exists = true;
                                                MessageBox.error('Validation Error', 'Selected Countries are already part of another Transfer Time.', 500);
                                                return;
                                            }
                                        });
                                    }
                                }
                            });
                        }
                        if (!exists) {
                            if (!skip){
                                arr.value.push(tempNewEntry);
                            }
                            this.toggleModal(false);
                            onTableUpdate({prop, data: arr});
                            this.setState({resetTable: false})
                            this.gridBindEvents(this.state.gridApi["transferTimesSecurity"]);
                        }
                    })
                }
            })
        }
    };
      this.filterFunctions = {
          CALL_FREQUENCY_FILTER : (callFrequencies) => {
              return callFrequencies;
          }
      };

    autoBind(this);

    this.buttons = this.state.permissions.readonly ? [{title: 'Cancel', onclick: this.props.onCancel}] : [
      {title: 'Cancel', onclick: this.props.onCancel},
      {title: 'Save Draft', onclick: this.props.onSave, displayIf: this.isAgreementNewOrActive.bind(this)},
      {title: 'Submit', onclick: this.props.onSubmit, displayIf: this.isAgreementNewOrActive.bind(this)},
      {title: 'Terminate', onclick: this.props.onTerminate, displayIf: this.isAgreementActive.bind(this)},
      {title: 'ReActivate', onclick: this.props.onActivate, displayIf: this.isAgreementInActive.bind(this)}
    ];
  };

  isAgreementNewOrActive() {
      const agreementPresent = objectExists(this,'props.data.compositeProfile.legalAgreement.profileStatus');
      return !agreementPresent || this.props.data.compositeProfile.legalAgreement.profileStatus === 'LIVE' || this.props.data.compositeProfile.legalAgreement.profileStatus === 'NEW';
  }

  isAgreementActive() {
      const agreementPresent = objectExists(this,'props.data.compositeProfile.legalAgreement.profileStatus');
      return agreementPresent && this.props.data.workflowStatus === 'LIVE';
  }

  isAgreementInActive() {
      const agreementPresent = objectExists(this,'props.data.compositeProfile.legalAgreement.profileStatus');
      return agreementPresent && this.props.data.workflowStatus === 'INACTIVE';
  }

  componentDidMount(){
    this.setup(fetchConfig(this.props.appState.lob));
}

  setup = (config) => {
    let cloneData = cloneObject(this.props.data);
    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.parties')) {
        cloneData.compositeProfile.legalAgreement.attributes.parties.value.forEach(party => {
           if(party.role === 'LEGAL_OWNER'){
               traverseObjectAndInsert({obj:cloneData, string: 'compositeProfile.legalAgreement.attributes.legalEntityUcn', bindOn:'legalEntityUcn', newValues: party.ucn});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.legalEntityName', bindOn:'legalEntityName', newValues:party.name});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.legalEntityEci', bindOn:'legalEntityEci', newValues:party.eci});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.legalEntitySpn', bindOn:'legalEntitySpn', newValues: party.spn});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.legalEntityLei', bindOn:'legalEntityLei', newValues: party.lei});
           }else if(party.role === 'COUNTERPARTY') {
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.counterPartyUcn', bindOn:'counterPartyUcn', newValues:party.ucn});
               traverseObjectAndInsert({obj:cloneData, string: 'compositeProfile.legalAgreement.attributes.counterPartyName', bindOn:'counterPartyName', newValues:party.name});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.counterPartyEci', bindOn:'counterPartyEci', newValues:party.eci});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.counterPartySpn', bindOn:'counterPartySpn', newValues:party.spn});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.counterPartyLei', bindOn:'counterPartyLei', newValues:party.lei});
           }else if(party.role === 'LEGAL_OWNER_PARENT') {
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.parentLegalEntityUcn', bindOn:'parentLegalEntityUcn', newValues:party.ucn});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.parentLegalEntityEci', bindOn:'parentLegalEntityEci', newValues:party.eci});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.parentLegalEntityName', bindOn:'parentLegalEntityName', newValues:party.name});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.parentLegalEntityLei', bindOn:'parentLegalEntityLei', newValues:party.lei});
               traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.parentLegalEntityEci', bindOn:'parentLegalEntityEci', newValues:party.eci});
           }

        })
    }

    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.postRegulations') && !!cloneData.compositeProfile.legalAgreement.attributes.postRegulations && !!cloneData.compositeProfile.legalAgreement.attributes.postRegulations.value) {
        let postRegulationCodes = [];
        cloneData.compositeProfile.legalAgreement.attributes.postRegulations.value.forEach(postRegulation => {
            postRegulationCodes.push(postRegulation.code + '-' + postRegulation.value);
        });
        traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.postRegulationCodes', bindOn:'postRegulationCodes', newValues: {"source": cloneData.compositeProfile.legalAgreement.attributes.postRegulations.source, "value" : postRegulationCodes}});
    }

    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.stmtTimezone') && !!cloneData.compositeProfile.legalAgreement.attributes.stmtTimezone && !!cloneData.compositeProfile.legalAgreement.attributes.stmtTimezone.value) {
          let stmtTimezoneObj = cloneData.compositeProfile.legalAgreement.attributes.stmtTimezone.value;
          let statementTimezoneCodes = (stmtTimezoneObj.code + '-' + stmtTimezoneObj.value);
          traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.statementTimezoneCodes', bindOn:'statementTimezoneCodes', newValues: {"source": cloneData.compositeProfile.legalAgreement.attributes.stmtTimezone.source, "value" : statementTimezoneCodes}});
      }

      if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.terminationDate') && !!cloneData.compositeProfile.legalAgreement.attributes.terminationDate && !!cloneData.compositeProfile.legalAgreement.attributes.terminationDate.value) {
          let terminationDateObj = cloneData.compositeProfile.legalAgreement.attributes.terminationDate.value;
          let modifiedTerminationObj  = moment(terminationDateObj).format('DD MMM YYYY');
          traverseObjectAndInsert({obj:cloneData, string:'terminationDate', bindOn:'terminationDate', newValues: {"source": cloneData.compositeProfile.legalAgreement.attributes.terminationDate.source, "value" : modifiedTerminationObj}});
      }

    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.receiveRegulations') && !!cloneData.compositeProfile.legalAgreement.attributes.receiveRegulations && !!cloneData.compositeProfile.legalAgreement.attributes.receiveRegulations.value) {
        let receiveRegulationCodes = [];
        cloneData.compositeProfile.legalAgreement.attributes.receiveRegulations.value.forEach(receiveRegulation => {
            receiveRegulationCodes.push(receiveRegulation.code + '-' + receiveRegulation.value);
        });
        traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.receiveRegulationCodes', bindOn:'receiveRegulationCodes', newValues: {"source": cloneData.compositeProfile.legalAgreement.attributes.receiveRegulations.source, "value" : receiveRegulationCodes}});
    }

    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.marginProducts.value') && cloneData.compositeProfile.legalAgreement.attributes.marginProducts.value.length > 0) {
          let calcProducts = [];
          let simmProducts = null;
          let scheduleProducts = null;
          cloneData.compositeProfile.legalAgreement.attributes.marginProducts.value.forEach(product => {
              if(product.marginProduct && product.marginProduct.value){
                  product.marginProduct = product.marginProduct.value;
              }
              if(!!product.calculationMethod && product.calculationMethod === 'SIMM') {
                  if(!simmProducts) {
                      simmProducts = [];
                  }
                  simmProducts.push(product.marginProduct)
              }
              if(!!product.calculationMethod && product.calculationMethod === 'SCHEDULE') {
                  if(!scheduleProducts) {
                      scheduleProducts = [];
                  }
                  scheduleProducts.push(product.marginProduct)
              }
          });
          if(!!simmProducts && simmProducts.length > 0) {
              calcProducts.push({"calculationMethod":"SIMM","calculationProduct":simmProducts})
          }
          if(!!scheduleProducts && scheduleProducts.length > 0) {
              calcProducts.push({"calculationMethod":"SCHEDULE","calculationProduct":scheduleProducts})
          }
          traverseObjectAndInsert({obj:cloneData, string:'compositeProfile.legalAgreement.attributes.calcProducts', bindOn:'calcProducts', newValues: {"source": cloneData.compositeProfile.legalAgreement.attributes.marginProducts.source, "value" : calcProducts}});
          this.props.onCustFormUpdate(cloneData);
      }

    if(objectExists(this,'props.data.compositeProfile.legalAgreement.attributes.transferTimeCurrencies.value')) {
        let filtered = [];
        Object.entries(this.props.data.compositeProfile.legalAgreement.attributes.transferTimeCurrencies.value).forEach(entry => {
            filtered.push({"transferTime":entry[0],"currency": entry[1].join(',')})
        })
        cloneData.transferTimeCurrencies = filtered;
    }
      if(objectExists(this,'props.data.compositeProfile.legalAgreement')) {
          let clone = cloneObject(config),
              profileStatus = this.props.data.compositeProfile.legalAgreement.profileStatus,
              attributes = cloneObject(this.props.data.compositeProfile.legalAgreement.attributes);

              clone.layout.find(x => x.refKey === 'agreement').data.map(x => {
                  x.column.map(form =>{
                      if(!!this.props.userInfo.enableAMSProfile
                          && ((form.bind === 'compositeProfile.legalAgreement.attributes.legalEntityUcn')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.counterPartyUcn')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.agreementName')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.agreementShortName')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.agreementShortName2')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.agreementShortName3')
                              || (form.bind === 'compositeProfile.legalAgreement.attributes.cmOwnershipCaid'))) {
                          form.readonly = true;
                          config = clone;
                      }
                      if((profileStatus && profileStatus.toUpperCase() === 'LIVE')
                          && ((form.bind === 'compositeProfile.legalAgreement.attributes.legalEntityUcn' && !!form.value)
                          || (form.bind === 'compositeProfile.legalAgreement.attributes.parentLegalEntityUcn' && !!form.value)
                          || (form.bind === 'compositeProfile.legalAgreement.attributes.counterPartyUcn' && !!form.value))) {
                          form.readonly = true;
                          config = clone;
                      }
                      if(attributes && attributes.cmOwnershipCaid && !!attributes.cmOwnershipCaid.value){
                          if((form.bind === 'compositeProfile.legalAgreement.attributes.cmOwnershipCaid') && (attributes.cmOwnershipCaid.source === 'DEFAULT')){
                              form.readonly = true;
                              config = clone;
                          }
                      }

                      return form
                  });
                  return x
              });
      }
      //setup for Linked Profile Accounts
      if(objectExists(this,'props.data.compositeProfile.linkedProfiles.accounts')) {
          if(cloneData.compositeProfile.linkedProfiles.accounts){
              cloneData.compositeProfile.linkedProfiles.accounts.forEach(account => {
                  if(account.profileStatus){
                      account.attributes.profileStatus = account.profileStatus;
                  }
              });
              const prop = 'compositeProfile.linkedProfiles.accounts';
              this.props.onTableUpdate({prop, data: cloneData.compositeProfile.linkedProfiles.accounts});
          }
      }

      debounce.add(null, async () => {
          if(objectExists(cloneData,'compositeProfile.legalAgreement.attributes.parentLegalEntityEci')) {
              const cpSubEntitiesRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${cloneData.compositeProfile.legalAgreement.attributes.parentLegalEntityEci}/cp-sub-entities`);
              if (cpSubEntitiesRes && !!cpSubEntitiesRes.data) {
                  cloneData.linkedCPSubEntities = cpSubEntitiesRes.data;
              }
          }
          if(objectExists(cloneData,'compositeProfile.legalAgreement.attributes.legalEntityEci')) {
              const eciId = cloneData.compositeProfile.legalAgreement.attributes.legalEntityEci;
              const leSubEntitiesRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${eciId}/le-sub-entities`);
              if (leSubEntitiesRes && !!leSubEntitiesRes.data) {
                  cloneData.leSubEntityList = cloneData.linkedLESubEntities = leSubEntitiesRes.data;
                  cloneData.leSubEntityList.splice(0, 0, '');
              }
              const profileRes = await axios.get(`${configRest.BASE_URL}/${configRest.REST_URL}/${this.props.appState.lob.toUpperCase()}/legal-entity/${eciId}/le-longbox-accounts`)
              if (profileRes && !!profileRes.data) {
                  let longboxAccounts = profileRes.data;
                  if (longboxAccounts.length > 0) {
                      cloneData.linkedLongboxAccounts = longboxAccounts;
                  }
              }
          }
          if (objectExists(this, 'props.data.compositeProfile.legalAgreement.attributes.nonClearedAutoFundCurrency')) {
              if (objectExists(this, 'props.data.compositeProfile.legalAgreement.attributes.parties.value')) {
                  let party = this.props.data.compositeProfile.legalAgreement.attributes.parties.value.find(party => {
                      return party.role === 'LEGAL_OWNER'
                  });
                  if (party && party.eci) {
                      let lob = this.props.appState.lob.toUpperCase(),
                          eci = party.eci,
                          currency= this.props.data.compositeProfile.legalAgreement.attributes.nonClearedAutoFundCurrency.value;
                          const profileRes = await inlineGetServiceCall(`${lob}/legal-entity/${eci}/${currency}/le-longbox-accounts-currency`);
                          const {success, payload, reason} = profileRes
                      cloneData.nonClearedAutoFundAccounts = (payload && payload.length) > 0 ? payload : [];
                  }
              }
          }
          this.props.onCustFormUpdate(cloneData);
      }, 300);
      this.props.onCustFormUpdate(cloneData);
      let modalTransferTimeCurrencies = this.state.modalTransferTimeCurrencies;
      modalTransferTimeCurrencies.tabledata = tableOnlySetup({tabledata: config.transferTimeCurrency});

      let configSetupVar = configSetup({config,modalTransferTimeCurrencies, formdata: cloneData, staticData: this.props.staticData, bindFunctions:this.bindedEvents});
      this.setState({config: configSetupVar });
  };

  onGridReady = ({e, refKey}) => {
    const {gridApi} = this.state,
          {api} = e;

    gridApi[refKey] = api;
    console.log(gridApi);

    this.setState({gridApi}, () => {
      api.sizeColumnsToFit();
      this.gridBindEvents({api: gridApi[refKey]})
    })
  };

  gridBindEvents = ({api}) => {
      setTimeout(() => {
          document.querySelectorAll('.callFrequencyRemoveBtn').forEach((ele, index) => {
              ele.classList.remove("callFrequencyRemoveBtn");

              ele.addEventListener("click", () => {
                  console.log("Removing call frequency row...");

                  const {gridApi} = this.state;
                  // remove from datatable
                  let rowData = [],
                      api = gridApi['callFrequency'];

                  api.forEachNode((rowNode, i) => {if(i !== index){rowData.push(rowNode.data)}});
                  api.setRowData(rowData);

                  // update upper level state
                  const {data, onTableUpdate} = this.props;
                  const prop = 'compositeProfile.legalAgreement.attributes.callFrequencies';
                  let obj = !!data ? cloneObject(data) : {};
                  let arr = traverseObjectAndReturn({obj, string: prop});

                  // remove
                  arr.value.splice(index, 1);
                  onTableUpdate({prop, data: arr});

                  // rebind buttons
                  this.gridBindEvents({api})

              })
          });
          document.querySelectorAll('.calculationsRemoveBtn').forEach((ele, index) => {
              ele.classList.remove("calculationsRemoveBtn");

              ele.addEventListener("click", () => {

                  const {gridApi} = this.state;
                  // remove from datatable
                  let rowData = [],
                      api = gridApi['calculations'];

                  api.forEachNode((rowNode, i) => {if(i !== index){rowData.push(rowNode.data)}});
                  api.setRowData(rowData);

                  // update upper level state
                  const {data, onTableUpdate} = this.props;
                  const prop = 'compositeProfile.legalAgreement.attributes.calcProducts';
                  let obj = !!data ? cloneObject(data) : {};
                  let arr = traverseObjectAndReturn({obj, string: prop});

                  // remove
                  arr.value.splice(index, 1);
                  onTableUpdate({prop, data: arr});

                  // rebind buttons
                  this.gridBindEvents({api})

              })
          });
        document.querySelectorAll('.splitTypeConfigRemoveBtn').forEach((ele, index) => {
            ele.classList.remove("splitTypeConfigRemoveBtn");

                ele.addEventListener("click", () => {
                    console.log("Removing split type row...");

                const {gridApi} = this.state;
                // remove from datatable
                let rowData = [],
                    api = gridApi['splitTypeConfigs'];

                api.forEachNode((rowNode, i) => {if(i !== index){rowData.push(rowNode.data)}});
                api.setRowData(rowData);

                // update upper level state
                const {data, onTableUpdate} = this.props;
                const prop = 'compositeProfile.legalAgreement.attributes.splitTypeConfigs';
                let obj = !!data ? cloneObject(data) : {};
                let arr = traverseObjectAndReturn({obj, string: prop});

                // remove
                arr.value.splice(index, 1);
                onTableUpdate({prop, data: arr});

                // rebind buttons
                this.gridBindEvents({api})

            })
        });
      })
  };

    onCellClicked = ({e, createKey = null, markSource = null, bind, filterFunction = () => true, refKey}) => {
        let {colDef, rowIndex} = e;
        const {actions = null, renderAsLink = null, cellRenderer} = colDef;
        selectedRowIdx = rowIndex;

        if(cellRenderer === 'removeItem')
            return;

        if((actions === null && renderAsLink === null) && !!createKey){
            const layer = null;
            const {data, onTableUpdate} = this.props;
            let currentEntry,
                prop =  bind;

            // creates structure if it doesn't exist or returns array
            let obj = !!data ? cloneObject(data) : {}
            let arr = traverseObjectAndReturn({obj, string: prop})

            // apply filter, convert to formdata
            let filtered = typeof arr === "object" && arr.value ? arr.value.filter(x => filterFunction(!!layer ? x[layer] : x)) : arr.filter(x => filterFunction(!!layer ? x[layer] : x));
            for (let i = 0; i < filtered.length; i++) {
                let layeredItem = !!layer ? filtered[i][layer] : filtered[i];

                if(JSON.stringify(layeredItem) === JSON.stringify(e.data._skey)){
                    rowIndex = i;
                }
            }
            const formdata = formBind({formdata: this.state.config.create[createKey], data: !!layer ? filtered[rowIndex][layer] : filtered[rowIndex], staticData: this.props.staticData});
            const columns = formdata.data[0].column;

            columns.forEach(item => {
                if (filtered[rowIndex][item.bind]) {
                    if(item.bind === "frequency"){
                        item.readonly = true;
                    }
                    if(item.bind === "assetType"){
                        item.readonly = true;
                    }
                    if(item.bind === "transferTime"){
                        item.readonly = true;
                    }
                    item.value = filtered[rowIndex][item.bind];
                    item.defaultValue = filtered[rowIndex][item.bind];
                }
            });

            filteredData = filtered;

            this.toggleModal({
                state: true,
                header: {title: `Edit`},
                formdata,
                onUpdate: (newdata) => {
                    let isCustomTableEntryUpdateNeeded = true;
                    if (!!newdata && newdata.length > 0) {
                        let splitTypeFieldRow = newdata.find((item) => !!item.column && item.column.length > 0 && item.column.filter(c => c.bind === 'splitType').length > 0 );
                        if(!!splitTypeFieldRow) {
                            isCustomTableEntryUpdateNeeded = false;
                        }
                    }

                    if (isCustomTableEntryUpdateNeeded) {
                        currentEntry = customTableEntryUpdate({newdata, markSource})
                    } else {
                        currentEntry = tableEntryUpdate({newdata, markSource})
                    }
                },
                onSave: () => {
                    const newObj = {};
                    Object.keys(currentEntry).forEach(item => {
                        if (currentEntry[item].value !== undefined) {
                            newObj[item] = currentEntry[item].value;
                        }
                    });
                    let exists = false;
                    if (arr && arr.value && arr.value.length > 0) {
                        arr.value.forEach((item, index) => {
                            if (item.calculationMethod && !!currentEntry.calculationMethod && item.calculationMethod === currentEntry.calculationMethod.value && index !== selectedRowIdx) {
                                exists = true;
                                MessageBox.error('Validation Error', 'This Calculation Method is already added into the table.', 500);
                            }
                            if (refKey === 'transferTimesSecurity') {
                                if (currentEntry && (!currentEntry.assetType || !currentEntry.countries || !currentEntry.transferTime || (currentEntry.countries && currentEntry.countries.length === 0))) {
                                    exists = true;
                                    MessageBox.error('Validation Error', 'Asset Type , Countries and Transfer Time  are required.', 500);
                                    return;
                                }
                                if (JSON.stringify(item) === JSON.stringify(currentEntry)) {
                                    exists = true;
                                    MessageBox.error('Validation Error', 'Transfer Time combination already exists.', 500);
                                } else if (item.assetType === currentEntry.assetType) {
                                    if (!(item.transferTime === currentEntry.transferTime)) {
                                        currentEntry.countries.forEach(country => {
                                            if (item.countries.includes(country)) {
                                                exists = true;
                                                MessageBox.error('Validation Error', 'Selected Asset Type and Countries combination already exists.', 500);
                                                return;
                                            }
                                        });
                                    } else {
                                        if (!exists) {
                                            item.countries = new Set(item.countries.concat(currentEntry.countries));
                                            MessageBox.alert('Info Message', 'Selected Asset Type and Transfer Time combination already exists, so selected countries will be merged with existing Transfer Time.', 500);
                                            return;
                                        }
                                    }
                                }
                            }
                        });
                    }

                    if (!exists) {
                        // updating filtered data with tempdata, returns updated data object - does not return new object, just uses object inheritence to update data
                        if(refKey === 'transferTimesSecurity'){
                            updateObjectWithMatchingKeys({obj: !!layer ? filtered[rowIndex][layer] : filtered[rowIndex], data: currentEntry});
                        }else {
                            updateObjectWithMatchingKeys({obj: !!layer ? filtered[rowIndex][layer] : filtered[rowIndex], data: newObj});
                        }
                        const newArr = { value: [newObj] };
                        onTableUpdate({prop: bind, data: { value: filteredData}});

                        // reset eventBinders and hide modal
                        this.gridBindEvents({api: this.state.gridApi[refKey]});
                        this.toggleModal(false);
                    }
                }
            })
        }
    };

  isFormValid = (props) => {
    mixinIsFormValid({...props, _this: this})
  };

  toggleModal = (props) => {
    mixinToggleModal({...props, _this: this})
  };

  checkGlobalConditions = (renderIf = null) => {
    return mixinCheckGlobalConditions({renderIf, _this: this})
  };
    removeSelectedItem = (compInfo, params) => {
        const {gridApi} = this.state;
        const {data, onTableUpdate} = this.props;
        const {bind, refKey, item} = compInfo;
        let deleteNode = Object.assign({}, params),
            api = gridApi[refKey],
            rowIndex=-1,
            obj = !!data ? cloneObject(data) : {},
            arr = traverseObjectAndReturn({obj, string: bind});

        if(arr && Array.isArray(arr.value)){
            for (let i = 0; i < arr.value.length; i++) {
                if(JSON.stringify(arr.value[i]) === JSON.stringify(deleteNode.data._skey)){
                    rowIndex = i;
                    break;
                }
            }
            arr.value.splice(rowIndex, 1);
            item.api.updateRowData({remove: [deleteNode.data]});
        }
        onTableUpdate({prop : bind, data: arr});
    };

    removeItem = (compInfo, params) => {
        compInfo.item = params;
        const rowIndex = params.rowIndex;
        if(!this.state.permissions.readonly){
            return <div style={{cursor:"poiner", marginLeft : "20px"}}>
                <Icon name='delete' title={"Delete"} onClick={this.removeSelectedItem.bind(this, compInfo, params)}/>
            </div>
        }
        return "";
    };

    getDisplayName = (item, title) =>{
        let displayString = "";
        if(item && (typeof item ==='object')){
            displayString = item.displayName;
        }else {
            displayString = item;
        }
        return displayString;
    };
  render() {
    const {buttons, bindedEvents, checkGlobalConditions, toggleModal, onGridReady, onCellClicked, isFormValid, getDisplayName} = this;
    const {ready, modal,modalTransferTimeCurrencies, config, permissions} = this.state;
    const {onFormUpdate, onCustFormUpdate, staticData} = this.props;
    let formData = this.props.data,
        subTitle = this.props.isDerivativeAgreementSetup(this.props) ? <><span style={{color: "red"}}>*&nbsp;</span><span>Mandatory for Non-Threshold Monitoring Agreements</span><span style={{color: "blue"}}>&nbsp;&nbsp;**&nbsp;</span><span>Mandatory for Threshold Monitoring Agreements</span></> : null;
    return !!config && ready ? (
      <div style={{marginTop: '10px',marginBottom: '10px'}}>

        {/* loop through json config layout */}
        {config.layout.map((x, i) => {
          const {refKey, createKey, header, type, data, columnDefs, renderIf, markSource, bind, rowClassRules} = x;

          return checkGlobalConditions(renderIf) ? (
            <div className={!!type &&  (type === 'amount' || refKey === 'transferTimeCurrency' || refKey === 'transferTimesSecurity') ? 'rating-container' : 'dt-container'} key={i}>
              {!!header ? (
                <Header {...header} bindedEvents={bindedEvents} permissions={permissions} subTitle={subTitle}/>
              ) : null}

              {!!type && type === 'form' ? (
                <FormBuilder data={data} onFormUpdate={onFormUpdate} bindedEvents={bindedEvents} permissions={permissions} dropDownCompOption={formData.leSubEntityList} staticData={staticData} getDisplayName={getDisplayName}/>
              ) : null}

              {!!type && type === 'datatable' ? (
                <DataGrid
                  suppressRowClickSelection={true}
                  containerProps={{style: {height: '200px'}}}
                  rowStripes
                  columnDefs={columnDefs}
                  rowClassRules={rowClassRules}
                  rowData={traverseFormToBindValue({formData, bind})}
                  onCellClicked={e => {onCellClicked({e, createKey, markSource, refKey, bind})}}
                  onGridReady={(e) => {onGridReady({e, refKey})}}
                  refKey={refKey}
                  frameworkComponents={{
                      removeItem: this.removeItem.bind(this, {refKey, bind})}}/>
              ) : null}
            {!!type && type === 'amount' ? (
                <AmountGrid
                    rowClassRules={rowClassRules}
                    bind={bind}
                    formData={formData}
                    onCustFormUpdate={onCustFormUpdate}
                    config={this.state.config}
                    readonly={permissions.readonly}
                    isMultiCurrencyEnabled={true}
                    optionCurrency={dropdownPresets.CURRENCY}
                    refKey={refKey}/>
            ) : null}
                {!!type && type === 'eligibleProduct' ? (
                    <EligibleProducts
                                bind={bind}
                                formData={formData}
                                onCustFormUpdate={onCustFormUpdate}
                                bindedEvents={bindedEvents}
                                config={this.state.config}
                                refKey={refKey}/>
                ) : null}
            </div>
          ) : null
        })}

        {/* modal for adding new entry in datatable */}
        <Dialog
          onEntered={(() => {})}
          open={modal.show}
          onClick={() => {}}
          onClose={() => {toggleModal(false)}}>
            <div>
                {!!modal.show ? (
                    <DialogContent >
                        <div className='dt-container'>
                            <Header {...modal.header} permissions={permissions}/>
                            <FormBuilder data={this.state.modal.formdata.data} onFormUpdate={modal.onUpdate} isFormValid={isFormValid} filteredData={filteredData} rowIndex={selectedRowIdx} gridApi={this.state.gridApi} resetFormFields={this.state.resetFormFields} permissions={permissions} staticData={staticData} getDisplayName={getDisplayName}/>
                        </div>
                    </DialogContent>
                ) : null}

                <DialogActions >
                    {!permissions.readonly ? (
                        <Button variant={'cta'} disabled={modal.disabled} onClick={modal.onSave}>Save</Button>
                    ) : null}
                    <Button variant={'cta'} onClick={() => {toggleModal(false)}}>Close</Button>
                </DialogActions>
            </div>
        </Dialog>
          <Dialog
              fullWidth={modalTransferTimeCurrencies.fullscreen}
              onEntered={modalTransferTimeCurrencies.onOpen}
              open={modalTransferTimeCurrencies.show}
              onClose={modalTransferTimeCurrencies.onClose}
              PaperProps={{
                  style: {
                      width:'800px'
                  }
              }}>
              <div>
                  {modalTransferTimeCurrencies.show && !modalTransferTimeCurrencies.fetching  ? (
                      <Fragment>
                          <DialogContent>
                              <div className='dt-container'>
                                  <Header {...modalTransferTimeCurrencies.header} permissions={permissions}/>
                                  <DataGrid
                                      containerProps={{style: {height: '200px'}}}
                                      rowStripes
                                      rowSelection={'multiple'}
                                      rowMultiSelectWithClick={true}
                                      suppressRowClickSelection={true}
                                      singleClickEdit={true}
                                      rowClassRules={modalTransferTimeCurrencies.tabledata.rowClassRules}
                                      columnDefs={modalTransferTimeCurrencies.tabledata.columnDefs}
                                      rowData={modalTransferTimeCurrencies.tabledata.rowData}
                                      onGridReady={modalTransferTimeCurrencies.onGridReady} />
                              </div>
                          </DialogContent>

                          <DialogActions>
                              <Button variant={'cta'} onClick={modalTransferTimeCurrencies.onSave}>Save</Button>
                              <Button variant={'cta'} onClick={modalTransferTimeCurrencies.onClose}>Close</Button>
                          </DialogActions>
                      </Fragment>
                  ) : (
                      <div style={{display: 'flex', justifyContent: 'center',}}>
                          <Spinner />
                      </div>
                  )}
              </div>
          </Dialog>
          <Buttons data={buttons} />
      </div>
    ) : null;
  };
}

const mapStateToProps = state => {
  const {appState} = state;
  return {appState};
};

const mapDispatchToProps = dispatch => {
  return {
    appStateAction: bindActionCreators(appStateAction, dispatch)
  };
};
export default connect(mapStateToProps, mapDispatchToProps)(_Component);


//abcd json


{"layout":[
    {
      "refKey": "agreement",
      "header": {
        "title": "Agreement",
        "showSubTitle": true
      },
      "type": "form",
      "data": [
          {
            "column": [
                { "title": "Agreement Status", "bind": "compositeProfile.legalAgreement.profileStatus", "type": "input", "readonly": true, "markSource": false },
                { "title": "Agreement Number", "bind": "compositeProfile.legalAgreement.profileId", "type": "input", "readonly": true, "required": true, "markSource": false},
                { "title": "Clearing Account", "bind": "compositeProfile.legalAgreement.attributes.clearingAccountNumber", "type": "input", "required": true, "displayIf": "IS_CLEARED_AGREEMENT_SETUP", "readonlyIf":  "UPDATING_EXISTING_AGREEMENT"},
                { "title": "Agreement Name", "bind": "compositeProfile.legalAgreement.attributes.agreementName", "type": "input", "required": true, "max": 100, "onBlur":  "VALIDATE_AGREEMENT_NAME_LENGTH", "color": "", "backgroundColor": ""},
                { "title": "Threshold Monitoring", "bind": "compositeProfile.legalAgreement.attributes.thresholdMonitoring","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP", "optionPreset": "YES_NO"},
                { "title": "IMOS Agreement CAID", "bind": "compositeProfile.legalAgreement.attributes.imosAgreementCaid", "type": "input"},
                { "title": "IMOS Ownership CAID", "bind": "compositeProfile.legalAgreement.attributes.imosOwnershipCaid", "type": "input"},
                { "title": "CM Ownership CAID", "bind": "compositeProfile.legalAgreement.attributes.cmOwnershipCaid", "type": "input"},
                { "title": "Master Agreement Version", "bind": "compositeProfile.legalAgreement.attributes.masterAgreementVersion", "type": "input", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP"},
                { "title": "Document Date", "bind": "compositeProfile.legalAgreement.attributes.documentDate", "type": "datepicker", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP"},
                { "title": "Go-Live Date", "bind": "compositeProfile.legalAgreement.attributes.goLiveDate", "type": "datepicker", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Termination Date", "bind": "terminationDate", "type": "input", "readonly": true},
                { "title": "Governing Law", "bind": "compositeProfile.legalAgreement.attributes.governingLaw", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP", "optionPreset": "GOVERNING_LAWS"},
                { "title": "Region", "bind": "compositeProfile.legalAgreement.attributes.region", "type": "dropdown", "required": true, "options": ["ASIA", "EUROPE", "AMERICA", "MANILA"], "onChange": "UPDATE_TRASNFERTIME_CURRUNCIES",
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "FX Region", "bind": "compositeProfile.legalAgreement.attributes.fxRegion", "readonly": true, "type": "input" ,"value": "AMERICA"},
                { "title": "Comments", "bind": "compositeProfile.legalAgreement.attributes.comments", "type": "input", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP"},
                { "title": "Calculation Type", "bind": "compositeProfile.legalAgreement.attributes.calculationType", "type": "input", "readonly": true },
                { "title": "LE Sub Entity", "bind": "compositeProfile.legalAgreement.attributes.leSubEntity", "type": "dropdownComponent", "dropdownType": "dropdown", "displayIf": "IS_CLEARED_AGREEMENT_SETUP"},
                { "title": "Sub Entity Reporting Currency", "bind": "compositeProfile.legalAgreement.attributes.leSubEntityReportingCurrency", "type": "dropdown", "optionPreset": "OPTIONAL_CURRENCY"},
                { "title": "Borrow From Entity", "bind": "compositeProfile.legalAgreement.attributes.borrowFromLESubEntity", "type": "dropdownComponent", "dropdownType": "dropdown"},
                { "title": "CCP", "bind": "compositeProfile.legalAgreement.attributes.ccp", "type": "dropdown",  "optionRefKey": "CCP_CODE", "displayIf": "IS_CLEARED_AGREEMENT_SETUP", "onChange" : "HANDLE_CCP_UPDATE"},
                { "title": "CCP Code", "bind": "compositeProfile.legalAgreement.attributes.ccpCode", "type": "input", "displayIf": "IS_CLEARED_AGREEMENT_SETUP", "readonly": true }
            ]
          },
          {
            "column": [
                { "title": "Agreement Short Name","bind": "compositeProfile.legalAgreement.attributes.agreementShortName","type": "input", "max": 100},
                { "title": "Agreement Short Name 2","bind": "compositeProfile.legalAgreement.attributes.agreementShortName2","type": "input","max": 100},
                { "title": "Agreement Short Name 3","bind": "compositeProfile.legalAgreement.attributes.agreementShortName3","type": "input","max": 100},
                { "title": "Legal Entity UCN", "bind": "compositeProfile.legalAgreement.attributes.legalEntityUcn", "type": "input", "required": true, "onBlur":  "HANDLE_LE_UCN_UPDATE",
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Legal Entity Name", "bind": "compositeProfile.legalAgreement.attributes.legalEntityName", "readonly": true, "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Legal Entity ECI", "bind": "compositeProfile.legalAgreement.attributes.legalEntityEci", "readonly": true, "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Legal Entity SPN", "bind": "compositeProfile.legalAgreement.attributes.legalEntitySpn", "readonly": true, "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Legal Entity LEI", "bind": "compositeProfile.legalAgreement.attributes.legalEntityLei", "readonly": true, "type": "input"},
                { "title": "Parent LE UCN", "bind": "compositeProfile.legalAgreement.attributes.parentLegalEntityUcn", "type": "input", "required": true,"onBlur": "HANDLE_PARENT_LE_UCN_UPDATE",
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Parent LE Name", "bind": "compositeProfile.legalAgreement.attributes.parentLegalEntityName", "type": "input", "required": true, "readonly": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Parent LE LEI", "bind": "compositeProfile.legalAgreement.attributes.parentLegalEntityLei", "type": "input", "required": true, "readonly": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Parent LE ECI", "bind": "compositeProfile.legalAgreement.attributes.parentLegalEntityEci", "readonly": true, "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Counterparty UCN", "bind": "compositeProfile.legalAgreement.attributes.counterPartyUcn", "type": "input", "onBlur":  "HANDLE_CP_UCN_UPDATE", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Counterparty Name", "bind": "compositeProfile.legalAgreement.attributes.counterPartyName", "readonly": true , "type": "input", "regex": "^[a-zA-Z ]+$", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Counterparty ECI", "bind": "compositeProfile.legalAgreement.attributes.counterPartyEci", "readonly": true , "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Counterparty SPN", "bind": "compositeProfile.legalAgreement.attributes.counterPartySpn", "readonly": true , "type": "input", "required": true,
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]},
                { "title": "Counterparty LEI", "bind": "compositeProfile.legalAgreement.attributes.counterPartyLei", "readonly": true , "type": "input"}
               ]
          }
      ]
    },
    {
      "refKey": "parameters",
      "header": {
        "title": "Parameters"
      },
      "type": "form",
      "data": [
          {
            "column": [
                { "title": "Calculation Type", "bind": "compositeProfile.legalAgreement.attributes.calculationType", "type": "input", "readonly": true, "render": false },
              { "title": "Bilateral", "bind": "compositeProfile.legalAgreement.attributes.bilateralFlag", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "YES_NO"
              },
              { "title": "Unilateral CP Favour", "bind": "compositeProfile.legalAgreement.attributes.unilateralCPFavour","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "YES_NO"
              },
              { "title": "Regulatory Agreement", "bind": "compositeProfile.legalAgreement.attributes.regulatoryAgreement","type": "dropdown", "addtionalRequired": true, "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "YES_NO"
              },
              { "title": "Segregation Model", "bind": "compositeProfile.legalAgreement.attributes.segregationModel","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "options": ["Non-Segregated", "ACA", "NA"]
              },
              { "title": "IM/VM Split Type", "bind": "compositeProfile.legalAgreement.attributes.splitType","type": "dropdown", "required": true, "readonlyIf": "IS_CLEARED_AGREEMENT_SETUP",
                "optionPreset": "SPLIT_TYPES",
                  "conditional": [
                      {
                          "_if": [
                              {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                          ],
                          "_then": [
                              {"addtionalRequired": true}
                          ],
                          "_else": [
                              { "addtionalRequired": false}
                          ]
                      }
                  ]
              },
              { "title": "Pledgor Segregation Model", "bind": "compositeProfile.legalAgreement.attributes.pledgorSegregationModel","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                  "conditional": [
                      {
                          "_if": [
                              {"prop": "compositeProfile.legalAgreement.attributes.regulatoryAgreement", "operator": "equals", "value":  "NO"}
                          ],
                          "_then": [
                              {"options": ["Non-Segregated","Triparty","ACA","NA"]}
                          ],
                          "_else": [
                              { "options": ["Triparty", "ACA", "NA"]}
                          ]
                      }
                  ],
                "global_set": {
                  "_if": [
                    {"prop": "pledgorSegregationModel", "operator": "equals", "value": "ACA"}
                  ],
                  "_then": [
                    {"disableTriparty": true}
                  ],
                  "_else": [
                    {"disableTriparty": false}
                  ]
                }
              },
              { "title": "Secured Party Segregation Model", "bind": "compositeProfile.legalAgreement.attributes.securedPartySegregationModel","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                  "conditional": [
                      {
                          "_if": [
                              {"prop": "compositeProfile.legalAgreement.attributes.regulatoryAgreement", "operator": "equals", "value":  "NO"}
                          ],
                          "_then": [
                              {"options": ["Non-Segregated","Triparty","ACA","NA"]}
                          ],
                          "_else": [
                              { "options": ["Triparty", "ACA", "NA"]}
                          ]
                      }
                  ]
              },
              { "title": "Agreement Type", "bind": "compositeProfile.legalAgreement.attributes.agreementType","type": "dropdown", "required": true, "addtionalRequired": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "options": ["OTC", "Repo", "TBA", "Inter-Fund", "Other"]
              },
                { "title": "Agreement Type", "bind": "compositeProfile.legalAgreement.attributes.agreementType","type": "dropdown", "required": true, "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
                    "options": ["OTC", "ETD","PB", "Other"]
                },
              { "title": "Agreement Reporting Type", "bind": "compositeProfile.legalAgreement.attributes.agreementReportingType","type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "options": ["IFL","PB","OCC","ISDA", "MSFTA", "NAFMII", "PSA - Europe", "PSA - LAC", "PSA - NA", "PSA – CEMEA","REPO", "OTCC", "F&O","IM – Monitoring", "IFL - Lending", "IFL - Borrowing"],
                  "conditional": [
                      {
                          "_if": [
                              {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                          ],
                          "_then": [
                              {"addtionalRequired": true}
                          ],
                          "_else": [
                              { "addtionalRequired": false}
                          ]
                      }
                  ]
              },
                { "title": "Agreement Reporting Type", "bind": "compositeProfile.legalAgreement.attributes.agreementReportingType","type": "dropdown", "required": true, "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
                    "options": ["IFL","PB","OCC","ISDA", "MSFTA", "NAFMII", "PSA - Europe", "PSA - LAC", "PSA - NA", "PSA – CEMEA","REPO", "OTCC", "F&O","IM – Monitoring"],
                    "conditional": [
                        {
                            "_if": [
                                {"prop": "compositeProfile.legalAgreement.attributes.calculationType", "operator": "equals", "value":  "DERIVATIVES"}
                            ],
                            "_then": [
                                {"addtionalRequired": true}
                            ],
                            "_else": [
                                { "addtionalRequired": false}
                            ]
                        }
                    ]
                },
              { "title": "MID/BID Price Indicator", "bind": "compositeProfile.legalAgreement.attributes.midBidPriceIndicator","type": "dropdown", "required": true,
                "options": ["MID", "BID"]
              },
              { "title": "Parameter Currency", "bind": "compositeProfile.legalAgreement.attributes.parameterCurrency", "type": "dropdown", "required": true, "addtionalRequired": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                 "optionPreset": "CURRENCY"
              },
              { "title": "Deliver Rounding Amount", "bind": "compositeProfile.legalAgreement.attributes.roundingAmount", "type": "input", "inputType": "number", "required": true, "onBlur":  "HANDLE_ROUNDING_AMOUNT_UPDATE"},
              { "title": "Return Rounding Amount", "bind": "compositeProfile.legalAgreement.attributes.returnRoundingAmount", "type": "input", "inputType": "number", "required": true, "onBlur":  "HANDLE_ROUNDING_AMOUNT_UPDATE"}
            ]
          },
          {
            "column": [
              { "title": "Call Notification Time", "bind": "compositeProfile.legalAgreement.attributes.callNotificationTime", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "CALL_NOTIFICATION_TIME"
              },
              { "title": "Call Notification Location", "bind": "compositeProfile.legalAgreement.attributes.callNotificationLocation", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "CALL_NOTIFICATION_LOCATION"
              },
              { "title": "Transfer Time", "bind": "compositeProfile.legalAgreement.attributes.transferTime", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "TRANSFER_TIME"
              },
              { "title": "Requirement Haircut/Multiplier", "isUpdatedBlur": true, "bind": "compositeProfile.legalAgreement.attributes.requirementHairCut", "type": "input", "inputType": "number", "min": 1, "max": 10},
              { "title": "Business Day Location(s)", "bind": "compositeProfile.legalAgreement.attributes.businessDayLocations", "type": "multiselectdropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "BUSINESS_DAY_LOCATION"
              },
              { "title": "", "type": "readValues", "prop": "compositeProfile.legalAgreement.attributes.businessDayLocations", "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP"},
              { "title": "Consider Regional Holiday", "bind": "compositeProfile.legalAgreement.attributes.cnsdrRegHolidaySettlement", "type": "dropdown", "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "YES_NO"
              },
              { "title": "Reporting Currency","bind": "compositeProfile.legalAgreement.attributes.reportingCurrency", "type": "dropdown", "addtionalRequired": true, "required": true, "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                "optionPreset": "CURRENCY"
              },
              { "title": "Post Regulations", "bind": "compositeProfile.legalAgreement.attributes.postRegulationCodes", "type": "multiselectdropdown", "required": false, "onChange":  "HANDLE_POST_REGULATION_UPDATE", "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                  "optionPreset": "REGULATIONS", "readonlyIf": "IS_AGREEMENT_NON_SEG_IM"
              },
              { "title": "Receive Regulations", "bind": "compositeProfile.legalAgreement.attributes.receiveRegulationCodes", "type": "multiselectdropdown", "required": false, "onChange":  "HANDLE_RECEIVE_REGULATION_UPDATE", "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
                  "optionPreset": "REGULATIONS", "readonlyIf": "IS_AGREEMENT_NON_SEG_IM"
              },
              { "title": "Statement SLA", "bind": "compositeProfile.legalAgreement.attributes.statementSla", "type": "dropdown", "required": true, "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
                  "optionPreset": "CALL_NOTIFICATION_TIME"
              },
              { "title": "Statement Timezone", "bind": "compositeProfile.legalAgreement.attributes.statementTimezoneCodes", "type": "dropdown", "required": true,  "onChange":  "HANDLE_STMT_TIMEZONE_UPDATE", "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
                  "optionPreset": "STMT_TIMEZONE_LOCATION"
              },
              { "title": "Base Currency", "bind": "compositeProfile.legalAgreement.attributes.reportingCurrency", "type": "dropdown", "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
                  "optionPreset": "OPTIONAL_CURRENCY"
              },
              { "title": "SIMM Calculation Currency", "bind": "compositeProfile.legalAgreement.attributes.simmCalculationCurrency", "type": "dropdown", "optionPreset": "OPTIONAL_CURRENCY",
                  "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP","readonlyIf": "IS_AGREEMENT_NON_SEG_IM"},
              { "title": "Index Decomposition", "bind": "compositeProfile.legalAgreement.attributes.indexDecomposition", "type": "dropdown", "options": ["", "Standard", "Alternative"],
                  "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP","readonlyIf": "IS_AGREEMENT_NON_SEG_IM"},
              { "title": "Deliver Rounding Currency", "bind": "compositeProfile.legalAgreement.attributes.roundingAmountCurrencyLE", "type": "dropdown", "required": false, "optionPreset": "CURRENCY"},
              { "title": "Return Rounding Currency", "bind": "compositeProfile.legalAgreement.attributes.returnRoundingAmountCurrencyLE", "type": "dropdown", "required": false, "optionPreset": "CURRENCY"}
            ]
          }
      ]
    },
    {
        "refKey": "calculations",
        "markSource": true,
        "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
        "bind": "compositeProfile.legalAgreement.attributes.calcProducts",
        "createKey": "newCalculation",
        "header": {
            "title": "Calculation Product/Method",
            "buttons": [
                {
                    "title": "Create New",
                    "events": {
                        "onClick": "CREATE_NEW_CALCULATION_PRODUCTS"
                    }
                }
            ]
        },
        "type": "datatable",
        "columnDefs": [
            {
                "field": "calculationMethod",
                "headerName": "Calculation Method"
            },
            {
                "field": "calculationProduct",
                "headerName": "Calculation Product"
            },
            {
                "headerName": "Actions",
                "actions": [
                    {"name": "Delete", "applyClass": "calculationsRemoveBtn"}
                ]
            }
        ]
    },
      {
          "refKey": "legalEntityMTA",
          "bind": "compositeProfile.legalAgreement.attributes.legalEntityMTA.value.pairedRatings",
          "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
          "header": {
              "title": "Legal Entity MTA"
          },
          "type": "amount"
      },
      {
          "refKey": "counterPartyMTA",
          "bind": "compositeProfile.legalAgreement.attributes.counterPartyMTA.value.pairedRatings",
          "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
          "header": {
              "title": "Counter Party MTA"
          },
          "type": "amount"
      },
      {
          "refKey": "legalEntityThreshold",
          "bind": "compositeProfile.legalAgreement.attributes.legalEntityThreshold.value.pairedRatings",
          "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
          "header": {
              "title": "Legal Entity Threshold"
          },
          "type": "amount"
      },
      {
          "refKey": "counterPartyThreshold",
          "bind": "compositeProfile.legalAgreement.attributes.counterPartyThreshold.value.pairedRatings",
          "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
          "header": {
              "title": "Counter Party Threshold"
          },
          "type": "amount"
      },
    {
        "refKey": "splitTypeConfigs",
        "markSource": true,
        "bind": "compositeProfile.legalAgreement.attributes.splitTypeConfigs",
        "displayIf": "IS_CLEARED_AGREEMENT_SETUP",
        "createKey": "newSplitTypeConfig",
        "header": {
            "title": "Split Type Configs",
            "buttons": [
                {
                    "title": "Create New",
                    "events": {
                        "onClick": "CREATE_NEW_SPLIT_TYPE_CONFIG"
                    }
                }
            ]
        },
        "type": "datatable",
        "columnDefs": [
            {
                "field": "splitType",
                "headerName": "Split Type"
            },
            {
                "field": "marginType",
                "headerName": "Margin Type"
            },
            {
                "field": "minBuffer",
                "headerName": "Min Buffer"
            },
            {
                "field": "topUpAmount",
                "headerName": "Top Buffer"
            },
            {
                "field": "maxBuffer",
                "headerName": "Max Buffer"
            },
            {
                "field": "settlementInclusionValues",
                "headerName": "Settlement Inclusions"
            },
            {
                "headerName": "Actions",
                "actions": [
                    {"name": "Delete", "applyClass": "splitTypeConfigRemoveBtn"}
                ]
            }
        ]
    },
    {
        "refKey": "transferTimeCurrency",
        "bind": "transferTimeCurrencies",
        "markSource": false,
        "header": {
            "title": "Transfer Time for Cash",
            "buttons": [
                {
                    "title": "Transfer Times",
                    "events": {
                        "onClick": "EDIT_TRANSFER_TIMES"
                    }
                }
            ]
        },
        "type": "datatable",
        "columnDefs": [
            {
                "field": "currency",
                "headerName": "Currency",
                "suppressRowClickSelection": true,
                "editable": false
            },
            {
                "field": "transferTime",
                "headerName": "Transfer Time",
                "suppressRowClickSelection": true,
                "editable": false
            }
        ]
    },
    {
        "refKey": "transferTimesSecurity",
        "bind": "compositeProfile.legalAgreement.attributes.securityTransferTimes",
        "markSource": false,
        "createKey": "transferTimeSecurity",
        "header": {
            "title": "Transfer Time for Security",
            "buttons": [
                {
                    "title": "Create New",
                    "events": {
                        "onClick": "CREATE_SECURITY_TRANSFER_TIMES"
                    }
                }
            ]
        },
        "type": "datatable",
        "columnDefs": [
            {
                "field": "assetType",
                "headerName": "Asset Type"
            },
            {
                "field": "countries",
                "headerName": "Countries"
            },
            {
                "field": "transferTime",
                "headerName": "Transfer Time"
            },
            {
                "headerName": "Actions",
                "cellRenderer": "removeItem"
            }
        ]
    },
        {
            "refKey": "callFrequency",
            "markSource": true,
            "bind": "compositeProfile.legalAgreement.attributes.callFrequencies",
            "createKey": "newCallFrequency",
            "header": {
                "title": "Call Frequency",
                "buttons": [
                    {
                        "title": "Create New",
                        "events": {
                            "onClick": "CREATE_NEW_CALL_FREQUENCY"
                        }
                    }
                ]
            },
            "type": "datatable",
            "columnDefs": [
                {
                    "field": "frequency",
                    "headerName": "Frequency"
                },
                {
                    "field": "businessDay",
                    "headerName": "Business Day"
                },
                {
                    "field": "countBusinessDayFrom",
                    "headerName": "Count From"
                },
                {
                    "field": "weekOfMonth",
                    "headerName": "Week of Month"
                },
                {
                    "field": "daysOfWeek",
                    "headerName": "Days of Week"
                },
                {
                    "field": "dateOfMonth",
                    "headerName": "Date of Month"
                },
                {
                    "field": "directionOfSubstitution",
                    "headerName": "Direction of Substitution"
                },
                {
                    "headerName": "Actions",
                    "actions": [
                        {"name": "Delete", "applyClass": "callFrequencyRemoveBtn"}
                    ]
                }
            ]
        },
      {
          "refKey": "productEligibilityKey",
          "bind": "compositeProfile.legalAgreement.attributes",
          "displayIf": "IS_DERIVATIVE_AGREEMENT_SETUP",
          "header": {
              "title": "Product Eligibility"
          },
          "type": "eligibleProduct"
      }
],
    "create": {
        "newSecurityMap": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Security Map ID",
                            "bind": "securityMapID",
                            "type": "input"
                        },
                        {
                            "title": "Asset Class",
                            "bind": "assetClass",
                            "type": "input"
                        },
                        {
                            "title": "Country",
                            "bind": "country",
                            "type": "input"
                        },
                        {
                            "title": "Legal Entity",
                            "bind": "legalEntity",
                            "type": "input"
                        },
                        {
                            "title": "Agreement Number",
                            "bind": "agreementNumber",
                            "type": "input"
                        },
                        {
                            "title": "Market",
                            "bind": "market",
                            "type": "input"
                        },
                        {
                            "title": "Comments",
                            "bind": "comments",
                            "type": "input"
                        },
                        {
                            "title": "Created By",
                            "bind": "createdBy",
                            "type": "input",
                            "readonly": true
                        },
                        {
                            "title": "Created Date",
                            "bind": "createdDatetime",
                            "type": "input",
                            "readonly": true
                        },
                        {
                            "title": "Updated By",
                            "bind": "updatedBy",
                            "type": "input",
                            "readonly": true
                        },
                        {
                            "title": "Updated Date",
                            "bind": "updatedDatetime",
                            "type": "input",
                            "readonly": true
                        }
                    ]
                }
            ]
        },
        "newAutoFundCurrency": {
            "container": [
                {
                    "forms": [
                        {
                            "title": "Auto-Fund Currency",
                            "bind": "securityMapID",
                            "type": "input",
                            "required": true
                        }
                    ]
                }
            ]
        },
        "newCallFrequency": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Frequency",
                            "bind": "frequency",
                            "type": "dropdown",
                            "options": [
                                "",
                                "DAILY",
                                "WEEKLY",
                                "BI_WEEKLY",
                                "MONTHLY",
                                "BI_MONTHLY",
                                "QUARTERLY",
                                "SEMI_ANNUALLY",
                                "ANNUALLY",
                                "EXPOSURE_DRIVEN"
                            ]
                        },
                        {
                            "title": "Business Day",
                            "bind": "businessDay",
                            "type": "dropdown",
                            "options": [
                                "",
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        },
                        {
                            "title": "Count From",
                            "bind": "countBusinessDayFrom",
                            "type": "dropdown",
                            "options": [
                                "",
                                "START_OF_MONTH",
                                "END_OF_MONTH"
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        },
                        {
                            "title": "Week of Month",
                            "bind": "weekOfMonth",
                            "type": "dropdown",
                            "options": [
                                "",
                                1,
                                2,
                                3,
                                4,
                                5
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        },
                        {
                            "title": "Days of Week",
                            "bind": "daysOfWeek",
                            "type": "multiselectdropdown",
                            "options": [
                                "",
                                "MONDAY",
                                "TUESDAY",
                                "WEDNESDAY",
                                "THURSDAY",
                                "FRIDAY"
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "WEEKLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_WEEKLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        },
                        {
                            "title": "Date of Month",
                            "bind": "dateOfMonth",
                            "type": "dropdown",
                            "options": [
                                "",
                                1,
                                2,
                                3,
                                4,
                                5,
                                6,
                                7,
                                8,
                                9,
                                10,
                                11,
                                12,
                                13,
                                14,
                                15,
                                16,
                                17,
                                18,
                                19,
                                20,
                                21,
                                22,
                                23,
                                24,
                                25,
                                26,
                                27,
                                28,
                                29,
                                30,
                                31
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        },
                        {
                            "title": "Direction of Substitution",
                            "bind": "directionOfSubstitution",
                            "type": "dropdown",
                            "options": [
                                "",
                                "NEXT",
                                "PREVIOUS"
                            ],
                            "showWhen": [
                                {
                                    "id": "frequency",
                                    "value": "WEEKLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_WEEKLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "BI_MONTHLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "QUARTERLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "SEMI_ANNUALLY"
                                },
                                {
                                    "id": "frequency",
                                    "value": "ANNUALLY"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "newSplitTypeConfig": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Split Type",
                            "bind": "splitType",
                            "type": "dropdown",
                            "required": true,
                            "options": [
                                "",
                                "IM",
                                "VM",
                                "COMB",
                                "Settlement"
                            ]
                        },
                        {
                            "title": "Margin Type",
                            "bind": "marginType",
                            "type": "dropdown",
                            "required": true,
                            "options": [
                                "SCM",
                                "MCM"
                            ]
                        },
                        {
                            "title": "Min Buffer",
                            "bind": "minBuffer",
                            "type": "input",
                            "showWhen": [
                                {
                                    "id": "splitType",
                                    "value": "IM"
                                }
                            ]
                        },
                        {
                            "title": "Top Buffer",
                            "bind": "topUpAmount",
                            "type": "input",
                            "showWhen": [
                                {
                                    "id": "splitType",
                                    "value": "IM"
                                }
                            ]
                        },
                        {
                            "title": "Max Buffer",
                            "bind": "maxBuffer",
                            "type": "input",
                            "showWhen": [
                                {
                                    "id": "splitType",
                                    "value": "IM"
                                }
                            ]
                        },
                        {
                            "title": "Settlement Inclusions",
                            "bind": "settlementInclusionValues",
                            "type": "multiselectdropdown",
                            "options": [
                                "",
                                "Fees",
                                "Interest",
                                "Upfront Fee",
                                "PAI",
                                "Gross Profit / Loss",
                                "Credit Event",
                                "Coupon",
                                "FX",
                                "Trade Fees",
                                "Trade Commissions",
                                "Option Premium"
                            ],
                            "showWhen": [
                                {
                                    "id": "splitType",
                                    "value": "Settlement"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "newCalculation": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Calculation Method",
                            "bind": "calculationMethod",
                            "type": "dropdown",
                            "options": [
                                "SIMM",
                                "SCHEDULE"
                            ]
                        },
                        {
                            "title": "Calculation Product",
                            "bind": "calculationProduct",
                            "type": "multiselectdropdown",
                            "optionPreset": "CALCULATION_PRODUCTS",
                            "optionAll": true
                        }
                    ]
                }
            ]
        },
        "transferTimeSecurity": {
            "data": [
                {
                    "column": [
                        { "title": "Asset Type", "bind": "assetType", "type": "dropdown", "optionRefKey": "ASSET_TYPE"},
                        { "title": "Countries", "bind": "countries", "type": "multiselectdropdown", "optionRefKey": "ASSET_COUNTRY", "optionAll" : true},
                        { "title": "Transfer Time", "bind": "transferTime", "type": "dropdown", "optionRefKey": "TRANSFER_TIME"}
                    ]
                }
            ]
        }
    },
    "transferTimeCurrency": {
        "type": "datatable",
        "showFilterComp": true,
        "columnDefs": [
            {
                "field": "currency",
                "headerName": "Currency"
            },
            {
                "field": "transferTime",
                "headerName": "Transfer Time",
                "editable": true,
                "cellEditor": "agSelectCellEditor",
                "cellEditorParams": {
                    "optionPreset": "TRANSFER_TIME_WITH_EMPTY"
                }
            }
        ]
    }
}


// abcd payload

{"legalAgreement":{"profileId":"110006209","lineOfBusiness":"DCM","profileType":"CONTRACT","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1706888614.475,"updatedDtm":1746185149.329,"updatedBy":"O814946","version":12,"attributes":{"parties":{"source":"USER","sourceId":null,"value":[{"role":"LEGAL_OWNER","eci":"0200002470","ucn":"006917413000","spn":"0233463","name":"ABADOM CONSULTANCY","lei":"549300CU86T3N3GOAZ25","sapLeCode":null,"principalLei":"549300CU86T3N3GOAZ25","principalEci":"0200002470","cbd":null,"leCode":null,"goldenEntityEci":null,"goldenEntityName":null},{"role":"COUNTERPARTY","eci":"0216026194","ucn":"000079251000","spn":"0127531","name":"AAKULA CHARTERED PLANE SERVICES","lei":"KX1WK48MPD4Y2NCUIZ63","sapLeCode":null,"principalLei":"KX1WK48MPD4Y2NCUIZ63","principalEci":"0216026194","cbd":null,"leCode":null,"goldenEntityEci":null,"goldenEntityName":null},{"role":"LEGAL_OWNER_PARENT","eci":"0186611851","ucn":"027440940000","spn":"1314595","name":"ASEIDU INVESTMENT HOLDINGS","lei":"5493003T8SZSHOGGAW52","sapLeCode":null,"principalLei":"5493003T8SZSHOGGAW52","principalEci":"0186611851","cbd":null,"leCode":null,"goldenEntityEci":null,"goldenEntityName":null}]},"documentDate":{"source":"USER","sourceId":null,"value":"11-Mar-2020"},"goLiveDate":{"source":"USER","sourceId":null,"value":"11-Mar-2020"},"governingLaw":{"source":"USER","sourceId":null,"value":"UNITED KINGDOM"},"region":{"source":"USER","sourceId":null,"value":"EUROPE"},"comments":{"source":"USER","sourceId":null,"value":"ACA"},"thresholdMonitoring":{"source":"DEFAULT","sourceId":null,"value":"NO"},"bilateralFlag":{"source":"USER","sourceId":null,"value":"YES"},"unilateralCPFavour":{"source":"USER","sourceId":null,"value":"NO"},"regulatoryAgreement":{"source":"USER","sourceId":null,"value":"YES"},"segregationModel":{"source":"USER","sourceId":null,"value":"NA"},"splitType":{"source":"USER","sourceId":null,"value":"IM"},"pledgorSegregationModel":{"source":"USER","sourceId":null,"value":"ACA"},"securedPartySegregationModel":{"source":"USER","sourceId":null,"value":"ACA"},"agreementType":{"source":"USER","sourceId":null,"value":"OTC"},"agreementReportingType":{"source":"USER","sourceId":null,"value":"ISDA"},"midBidPriceIndicator":{"source":"USER","sourceId":null,"value":"MID"},"reportingCurrency":{"source":"USER","sourceId":null,"value":"GBP"},"parameterCurrency":{"source":"USER","sourceId":null,"value":"GBP"},"roundingAmount":{"source":"USER","sourceId":"O814946","value":10000},"legalEntityMTA":{"source":"USER","sourceId":null,"value":{"ratingCriteria":"FIXED_AMOUNT","ratings":[{"moodyRating":"NA","spRating":"NA","amount":250000,"idCurrency":null}],"pairedRatings":[{"from":null,"to":null,"amount":250000,"idCurrency":null}],"grossNet":null}},"counterPartyMTA":{"source":"USER","sourceId":null,"value":{"ratingCriteria":"FIXED_AMOUNT","ratings":[{"moodyRating":"NA","spRating":"NA","amount":250000,"idCurrency":null}],"pairedRatings":[{"from":null,"to":null,"amount":250000,"idCurrency":null}],"grossNet":null}},"legalEntityThreshold":{"source":"USER","sourceId":null,"value":{"ratingCriteria":"FIXED_AMOUNT","ratings":[{"moodyRating":"NA","spRating":"NA","amount":0,"idCurrency":null}],"pairedRatings":[{"from":null,"to":null,"amount":0,"idCurrency":null}],"thresholdPreferences":null}},"counterPartyThreshold":{"source":"USER","sourceId":null,"value":{"ratingCriteria":"FIXED_AMOUNT","ratings":[{"moodyRating":"NA","spRating":"NA","amount":0,"idCurrency":null}],"pairedRatings":[{"from":null,"to":null,"amount":0,"idCurrency":null}],"thresholdPreferences":null}},"callNotificationTime":{"source":"USER","sourceId":null,"value":"12:00 PM"},"callNotificationLocation":{"source":"USER","sourceId":null,"value":"LONDON"},"csaNotificationTimezone":null,"transferTime":{"source":"USER","sourceId":null,"value":"T +0"},"csaTransferTime":null,"requirementHairCut":{"source":"USER","sourceId":null,"value":0},"businessDayLocations":{"source":"USER","sourceId":null,"value":["London"]},"cnsdrRegHolidaySettlement":{"source":"USER","sourceId":null,"value":"YES"},"callFrequency":null,"callFrequencies":{"source":"USER","sourceId":null,"value":[{"frequency":"DAILY","daysOfWeek":null,"weekOfMonth":null,"dateOfMonth":null,"countBusinessDayFrom":null,"businessDay":null,"directionOfSubstitution":null,"valuationRequired":null,"statementRequired":null,"details":null,"startDate":null,"quarterlyMonth":null,"specificDate":null}]},"callFrequencyComments":null,"eligibleProducts":{"source":"USER","sourceId":null,"value":["FX FWD"]},"autoAgreeFlag":{"source":"USER","sourceId":null,"value":"NO"},"acadiaSoftEnabled":{"source":"USER","sourceId":null,"value":"YES"},"stpRba":{"source":"USER","sourceId":"F627126","value":"NO"},"stpAcadiaMovesFlag":{"source":"USER","sourceId":null,"value":"NO"},"disputeToleranceType":{"source":"USER","sourceId":null,"value":"Fixed Amount"},"disputeToleranceAmount":{"source":"USER","sourceId":null,"value":"10000"},"agreementName":{"source":"USER","sourceId":"O814946","value":null},"stpCancellationFlag":{"source":"DEFAULT","sourceId":null,"value":"YES"},"enableCashCopySwift":null,"destinationBICAddress":null,"ampID":null,"agreementNameOverride":null,"agreementNameOverrideFlag":{"source":"DEFAULT","sourceId":null,"value":"YES"},"password":null,"confirmPassword":null,"isPasswordRequired":null,"autoReleaseFlag":{"source":"USER","sourceId":null,"value":"NO"},"autoReleaseTime":{"source":"USER","sourceId":"F627126","value":null},"marginCallCobDate":{"source":"USER","sourceId":null,"value":"Last Business Day"},"autoRecallFromClient":null,"imosPublisherSuppression":null,"clearedMarginOversightEnabled":null,"bufferSetup":null,"marginValidationSetup":null,"interestSchedule":{"source":"USER","sourceId":null,"value":"Monthly"},"interestAccrualEndDate":null,"interestStmtApproval":{"source":"USER","sourceId":null,"value":"GROUP STATEMENTS APPROVAL"},"allowInterestMoves":{"source":"USER","sourceId":null,"value":"NO"},"autoPayInterest":{"source":"USER","sourceId":null,"value":"NO"},"weekly":{"source":"USER","sourceId":"W596342","value":null},"autoReturnOrDeliverToClient":null,"updateDateTime":{"source":"USER","sourceId":null,"value":[2021,8,10]},"considerIncomeEvent":null,"considerCoacs":null,"effectivePeriod":null,"rehypothecateFlag":{"source":"USER","sourceId":"W534015","value":"YES"},"rehypothecationSecurities":{"source":"USER","sourceId":"W534015","value":"YES"},"rehypothecationCash":null,"rehypothecationCashCurrencies":{"source":"USER","sourceId":"W534015","value":[]},"restrictedRehypothecation":{"source":"USER","sourceId":"W534015","value":"YES"},"restrictedRehypoSecurities":{"source":"USER","sourceId":"W534015","value":"YES"},"restrictedRehypoCash":null,"restrictedRehypoCashCurrencies":{"source":"USER","sourceId":"W534015","value":[]},"positionOrderSource":{"source":"USER","sourceId":"V031349","value":[{"type":"External Client Owned","value":"G 22812","order":1,"splitTypes":[]},{"type":"Client Owned","value":"U2812","order":2,"splitTypes":[]},{"type":"Client Owned","value":"U2813","order":2,"splitTypes":[]},{"type":"Client Owned","value":"LB233463UW","order":3,"splitTypes":[]}]},"clearedAutoFundAccountBySplitType":null,"ampMarginFlag":null,"calculationType":{"source":"USER","sourceId":null,"value":"DERIVATIVES"},"imDisputeThreshold":null,"cpPostingBasis":null,"customerType":null,"customerTypeId":null,"disputeThresholdAmount":null,"disputeThresholdPercentage":null,"holidayRegion":null,"hybridOffset":null,"iaAmpIndicator":null,"marginFlowType":null,"imSegregationModel":null,"interEntityImSplitType":null,"moveSplitFlag":null,"nccaFlag":null,"jpmMarginFlg":null,"leImDisputeThreshold":null,"lePostingBasis":null,"receiveReviewRequiredFlag":null,"payReviewRequiredFlag":null,"leModelType":null,"moveDisableFlag":null,"prmsMarginClientFlag":null,"variableReportingCurrency":null,"imCpRehypoFlag":null,"imLeRehypoFlag":null,"valuationAgentId":null,"valuationAgentFlag":null,"soleCalcAgent":null,"settlementCurrency":null,"vmCpRehypoFlag":null,"vmLeRehypoFlag":null,"cimActionRequiredFlag":null,"cimApprovalRequiredFlag":null,"grossPaymentNettingFlag":null,"rimSegregationModel":null,"sourceSystem":null,"linkedQueryIds":null,"groupId":null,"isMtuIndFlag":null,"isTripartyFlag":null,"agreementAlias":null,"relatedPbAgreementNumber":null,"csaType":{"source":"USER","sourceId":null,"value":"IM"},"imReportingCurrency":null,"specialCustomerType":null,"houseMarginCalculationModels":null,"settlementNetting":null,"includeLegacyTrades":null,"crossMarginingApplicable":null,"includeOutOfScopeSensitivities":null,"includeFXSpots":null,"excludeJumpToDefaultAddOn":null,"simmPortfolioAddOn":null,"imosAgreementCaid":{"source":"USER","sourceId":null,"value":"U101049304"},"imosOwnershipCaid":null,"cmOwnershipCaid":null,"masterAgreementVersion":null,"independentAdjustments":null,"independentAmounts":null,"legalEntityIndependentAmounts":null,"counterPartyIndependentAmounts":null,"roundingAmountLE":null,"returnRoundingAmountLE":null,"returnRoundingAmountCP":null,"roundingAmountCP":null,"imTermFlag":null,"csCsaCovered":null,"roundingAmountCurrencyCP":null,"returnRoundingAmountCurrencyCP":null,"roundingAmountCurrencyLE":null,"returnRoundingAmountCurrencyLE":null,"independentAmountReturnable":null,"calculationCurrency":null,"imFloorAmount":null,"mtmCalcType":null,"excludeFxNopSpotFlag":null,"grossCPMinimumTransferAmount":null,"grossLEMinimumTransferAmount":null,"iaMultiplier":null,"marginProducts":null,"primaryUnifiedDocId":null,"primaryDocTitle":null,"colValDisputeResolution":null,"firstParty":null,"jpmRole":null,"multiApplicableUnderAgreement":null,"priceSource":null,"secondParty":null,"partyAssignedJPLE":null,"ctpyCltrl":null,"mktValDetermination":null,"mktValPriceDisupute":null,"transferabilityCP":null,"transferabilityJPM":null,"mgnPaymentLateNotice":null,"mgnPaymentTimelyNotice":null,"jpmCollateral":null,"amendmentsEffectiveDate":null,"allBranchesCounterPartyValue":null,"standardPartyInNovationNet":null,"standardPartyInSettlementNet":null,"standardPartyCltOid":null,"collateralStandardParty":null,"standardPartyJpmGuranteeExist":null,"standardPartyInCloseoutNet":null,"secondaryUnifiedDocId":null,"secondaryDocumentTitle":null,"primaryDocumentCreationDate":null,"secondaryDocumentCreationDate":null,"primaryDocumentEffectiveDate":null,"secondaryDocumentEffectiveDate":null,"primaryDocumentExpirationDate":null,"secondaryDocumentExpirationDate":null,"primaryDocumentModificationDate":null,"secondaryDocumentModificationDate":null,"primaryAgreementCreator":null,"secondaryAgreementCreator":null,"primaryDocumentCreatorName":null,"secondaryDocumentCreatorName":null,"primaryTaxonomyVersionId":null,"secondaryTaxonomyVersionId":null,"primaryAgreementGoverningLawCountry":null,"secondaryAgreementGoverningLawCountry":null,"primaryAgreementGoverningLawState":null,"secondaryAgreementGoverningLawState":null,"investorAdvisorUcn":null,"csUcnIa":null,"governingLawCountryDescription":null,"governingLawRegionDescription":null,"contractType":null,"preferred":null,"additionalPrimaryGoverningLaw":null,"inIsda10A":null,"crossDefaultPaymentMaxVal":null,"masterAgreementFinancialCovenantType":null,"electiveTerminationRightsExists":null,"jpCreditEventUponMergerApplies":null,"cpCreditEventUponMergerApplies":null,"isApplicableSPNBranch":null,"calculationAgent":null,"isApplicableOFFBranch":null,"isJpmCollateralMaxValSet":null,"jpmGuaranteeExists":null,"jpmCloseOutApplicable":null,"cpCloseOutApplicable":null,"jpOfficialSettlementType":null,"cpOfficialSettlementType":null,"guarantyAgreementFlg":null,"jpNovationType":null,"cpNovationType":null,"inCltrlCounterParty":null,"leAutomaticEarlyTerminationApplies":null,"cpAutomaticEarlyTerminationApplies":null,"terminationCurrency":null,"governingLawCountryCode":null,"thresholdCurrencyCode":null,"governingLawId":null,"specificPreferredCallTimeId":null,"specificPreferredCallTime":null,"executionCutoffTime":null,"executionCutoffTimeZone":null,"paymentNettingFlag":null,"csaTerminationCurrency":null,"negativeInterestFlag":null,"opicsZeroRateFloor":null,"interestRate":null,"taxInterestRate":null,"returnRoundingAmount":{"source":"USER","sourceId":null,"value":10000},"timeOfNotCalling":null,"taxTransferType":null,"unregulatedTradeEffectiveDate":null,"gracePeriodValue":null,"transferTimeValue":null,"terminationCurrencyForTwoAffectedPartiesLE":null,"terminationCurrencyForTwoAffectedPartiesCP":null,"amendColtrExistFlag":null,"amendmentDate":null,"substitution":null,"substitutionRightsId":null,"collateralAgreementId":null,"valuationDateTimeFrequency":null,"valuationDateTimeFrequencyId":null,"locId":null,"rehypothecationDesc":null,"independantAdjustmentType":null,"independantAdjustmentTypeId":null,"initialVariationMargin":null,"collateralAmountsThreshold":null,"markToMarkAdjustmentIndependantAmount":null,"agreementMarginRegimeProducts":null,"legalAgreementCollateralTriggers":null,"agreementAgrProProduct":null,"agrOffJpmGuranteeExist":null,"agrOffInCloseoutNet":null,"agrOffInNovationNet":null,"agrOffInSettlementNet":null,"isCrossMargined":null,"familyName":null,"upfrontRequiredFlag":null,"stpLevel":null,"excludeFromDiary":null,"marginingSystem":null,"interestMarginingSystem":{"source":"DEFAULT","sourceId":null,"value":"JPM"},"baseId":null,"asiaMoveAutomationFlag":null,"defaultAssetType":null,"moveDisabledComment":null,"baseCashMoveProcessingLimits":null,"csr":null,"imCallDirection":null,"coltToBeDoneFlag":null,"isEligibleForTradeFlag":null,"coltStatus":null,"regimeAndComplianceDate":null,"investmentAdvisor":null,"otcCrossMarginingFlag":null,"eligibilitySet":null,"statementLegalEntityName":null,"isCodedStatement":null,"codedStatementName":null,"isCsrSignedOff":null,"idPrtn":null,"citAsOffDate":null,"citUntilDate":null,"independentAmountType":null,"independentAmount":null,"eligibleTradeCurrencies":{"source":"USER","sourceId":null,"value":["EUR"]},"eligibleTradesScheduled":null,"eligibleTradesByDate":null,"leSubEntity":null,"leSubEntityReportingCurrency":{"source":"USER","sourceId":"V071921","value":"GBP"},"borrowFromLESubEntity":{"source":"USER","sourceId":"V071921","value":"BLIC"},"ccp":null,"ccpCode":null,"linkLeSubEntities":null,"linkCpSubEntities":null,"clientAgreementAlias":null,"clientAgreementAliases":null,"counterpartyIndustryClassification":null,"clearingAccountNumber":null,"splitTypeConfigs":null,"imosFundingModel":null,"transferTimeCurrencies":null,"securityTransferTimes":{"source":"USER","sourceId":"F627126","value":[{"transferTime":"T +2","assetType":"Equities","countries":["ALL"]},{"transferTime":"T +3","assetType":"Equities","countries":["US"]},{"transferTime":"T +1","assetType":"Bonds","countries":["ALL"]}]},"statementSla":null,"statementTimezone":null,"stmtTimezone":null,"distributionAndInterests":null,"mailboxName":null,"mailboxEmailAddress":null,"securitiesLongboxModel":{"source":"USER","sourceId":null,"value":"YES"},"cashLongboxModel":{"source":"USER","sourceId":null,"value":"YES"},"autoBookAgreedPayments":null,"securityMap":null,"clearedAutoFundAccount":null,"nonClearedAutoFundCurrency":null,"nonClearedAutoFundAccount":null,"preferredAccountIds":null,"postRegulations":{"source":"USER","sourceId":null,"value":[{"value":"United Kingdom Regulators","code":"UK"}]},"receiveRegulations":{"source":"USER","sourceId":null,"value":[{"value":"United Kingdom Regulators","code":"UK"}]},"legalEntityOwnershipCaids":[{"source":"DEFAULT","sourceId":null,"value":{"caid":"A110530878","qualifier":{"value":"Imos","code":"IMOS"}}},{"source":"DEFAULT","sourceId":null,"value":{"caid":"A115451247","qualifier":{"value":"Collateral Mgmt","code":"COLLATERAL_MGMT"}}}],"simmCalculationCurrency":null,"indexDecomposition":null,"businessLocations":{"source":"USER","sourceId":null,"value":[{"value":"London","valueCode":"GBLON"}]},"leCreditRatingRuleDescription":null,"cpCreditRatingRuleDescription":null,"statementType":null,"isImReconRequired":null,"marginFlowTypeOverride":null,"clientBranchOnStatementFlag":null,"dealId":null,"collateralMonitoringGroup":null,"collateralConfidenceFactor":null,"curePeriod":null,"fxRegion":{"source":"DEFAULT","sourceId":null,"value":"AMERICA"},"statementEmailSubject":null,"nettingsetRootId":null,"segmentId":null,"pbLegalEntityMTA":null,"pbCounterPartyMTA":null,"pbLegalEntityThreshold":null,"pbCounterPartyThreshold":null,"linkedQueryIdOverride":null,"greaterOfClientAgreementPreference":null,"segments":null,"moveDisabledReason":null,"inflationIndexedUnitCurrency":null,"inflationIndexedUnitApplicableForThresholdAndMinimumTransferAmount":null,"feedDependencies":null,"restrictAutomatedReuseOfCollateral":null,"agreementShortName":null,"agreementShortName2":null,"agreementShortName3":null,"consentOfRepledge":null,"statementPassword":null,"markSameDayHoliday":null,"roundingForCash":null,"roundingValueForCash":null,"roundingForSecurities":null,"roundingValueForSecurities":null,"prodParallel":{"source":"DEFAULT","sourceId":null,"value":"NO"},"terminationDate":null,"metaTicket":null,"traderBook":null,"crossMarginEntities":null,"crossMarginEntitiesRules":null,"crossMarginProductsRules":null,"crossMarginCallManagement":null,"crossMarginCollateralManagement":null,"simmriskClassMultipliers":null,"legalEntityUcn":"006917413000","legalEntityName":"ABADOM CONSULTANCY","legalEntityEci":"0200002470","legalEntitySpn":"0233463","legalEntityLei":"549300CU86T3N3GOAZ25","counterPartyUcn":"000079251000","counterPartyName":"AAKULA CHARTERED PLANE SERVICES","counterPartyEci":"0216026194","counterPartySpn":"0127531","counterPartyLei":"KX1WK48MPD4Y2NCUIZ63","parentLegalEntityUcn":"027440940000","parentLegalEntityEci":"0186611851","parentLegalEntityName":"ASEIDU INVESTMENT HOLDINGS","parentLegalEntityLei":"5493003T8SZSHOGGAW52","postRegulationCodes":{"source":"USER","value":["UK-United Kingdom Regulators"]},"receiveRegulationCodes":{"source":"USER","value":["UK-United Kingdom Regulators"]}},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},"linkedProfiles":{"accounts":[{"profileId":"Q1350","lineOfBusiness":"DCM","profileType":"ACCOUNT","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1679317997.795,"updatedDtm":1679317997.795,"updatedBy":"V031349","version":1,"attributes":{"accountCategory":{"source":"USER","sourceId":"V031349","value":"CUSTODY"},"accountNumber":{"source":"USER","sourceId":"V031349","value":"Q1350"},"custodyAccountNumber":null,"moveTypes":null,"custodianLegalName":{"source":null,"sourceId":null,"value":null},"custodyAccountType":{"source":"USER","sourceId":"V031349","value":"Securities"},"role":{"source":"USER","sourceId":"V031349","value":"Pledgor"},"accountName":{"source":"USER","sourceId":"V031349","value":"Q1350"},"destinationSystem":{"source":"USER","sourceId":"V031349","value":"GTA-DCM"},"currency":{"source":null,"sourceId":null,"value":null},"custodianAccount":{"source":null,"sourceId":null,"value":null},"custodianUcn":{"source":null,"sourceId":null,"value":null},"custodianECI":{"source":null,"sourceId":null,"value":null},"isCustodyFund":{"source":"USER","sourceId":"V031349","value":"YES"},"tripartyAccountType":null,"custodian":null,"sendersInstructionReference":null,"eligibilityProfile":null,"providerLongbox":null,"counterpartyId":null,"tradeDate":null,"pledgingEntityPlatform":null,"receiversCollateralReference":null,"agreementIds":{"source":"USER","sourceId":null,"value":["110006209"]},"defaultProfileIds":null,"collateralRelationshipId":null,"rehypothecation":{"source":"USER","sourceId":"W534015","value":"YES"},"restrictedRehypothecation":{"source":"USER","sourceId":"W534015","value":"YES"},"sourceCustodianLegalName":null,"sourceCustodianAccount":null,"sourceCustodianUcn":null,"sourceCustodianEci":null,"setupComplete":null,"segregatedInterestAccount":null,"mmdaAccount":null,"polarisAccount":null,"thirdPartyFeedName":null,"thirdPartyAccountNumber":null,"thirdPartyFlag":null,"swiftFlag":null,"acaAccountModel":null,"pledgorAccount":null,"clientBIC":null,"leToReturnViaSwift":null,"segregatedAccountId":null,"executionDate":null,"exposureType":null,"exposureObligor":null,"agentEncumbrance":null,"jurisdictionEncumbrance":null,"imosOwnershipCAID":null,"imosCustodyLocationCaid":null,"marginingEntityId":null,"cmOwnershipCAID":null,"sourceCAID":null,"positionAvailableAtCustodian":null,"custodianBIC":null,"poaInstructionModel":null,"shadowAccountNumber":null,"splitType":{"source":"USER","sourceId":null,"value":"IM"},"counterPartyGroups":null,"nettingGroupProfileIds":null,"leSubEntities":null,"leToReturnViaAsm":null,"prodParallel":null,"profileStatus":"LIVE"},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"QC459","lineOfBusiness":"DCM","profileType":"ACCOUNT","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1732009855.364,"updatedDtm":1732009855.364,"updatedBy":"V031349","version":1,"attributes":{"accountCategory":{"source":"USER","sourceId":"V031349","value":"CONTROL"},"accountNumber":{"source":"USER","sourceId":"V031349","value":"QC459"},"custodyAccountNumber":{"source":"USER","sourceId":"V031349","value":"Q1350"},"moveTypes":{"source":"USER","sourceId":"V031349","value":["LE due to Deliver","CP due to Return","CP Sub Return/LE Sub Deliver"]},"custodianLegalName":{"source":null,"sourceId":null,"value":null},"custodyAccountType":null,"role":null,"accountName":null,"destinationSystem":null,"currency":null,"custodianAccount":null,"custodianUcn":{"source":null,"sourceId":null,"value":null},"custodianECI":{"source":null,"sourceId":null,"value":null},"isCustodyFund":null,"tripartyAccountType":null,"custodian":null,"sendersInstructionReference":null,"eligibilityProfile":null,"providerLongbox":null,"counterpartyId":null,"tradeDate":null,"pledgingEntityPlatform":null,"receiversCollateralReference":null,"agreementIds":{"source":"USER","sourceId":null,"value":["110006209"]},"defaultProfileIds":null,"collateralRelationshipId":null,"rehypothecation":{"source":"USER","sourceId":null,"value":"NO"},"restrictedRehypothecation":{"source":"USER","sourceId":null,"value":"NO"},"sourceCustodianLegalName":null,"sourceCustodianAccount":null,"sourceCustodianUcn":null,"sourceCustodianEci":null,"setupComplete":null,"segregatedInterestAccount":null,"mmdaAccount":null,"polarisAccount":null,"thirdPartyFeedName":null,"thirdPartyAccountNumber":null,"thirdPartyFlag":null,"swiftFlag":null,"acaAccountModel":null,"pledgorAccount":null,"clientBIC":null,"leToReturnViaSwift":null,"segregatedAccountId":null,"executionDate":null,"exposureType":null,"exposureObligor":null,"agentEncumbrance":null,"jurisdictionEncumbrance":null,"imosOwnershipCAID":null,"imosCustodyLocationCaid":null,"marginingEntityId":null,"cmOwnershipCAID":null,"sourceCAID":null,"positionAvailableAtCustodian":null,"custodianBIC":null,"poaInstructionModel":null,"shadowAccountNumber":null,"splitType":{"source":"USER","sourceId":null,"value":"IM"},"counterPartyGroups":null,"nettingGroupProfileIds":null,"leSubEntities":null,"leToReturnViaAsm":null,"prodParallel":null,"profileStatus":"LIVE"},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"QQ459","lineOfBusiness":"DCM","profileType":"ACCOUNT","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1679317997.683,"updatedDtm":1679317997.683,"updatedBy":"V031349","version":1,"attributes":{"accountCategory":{"source":"USER","sourceId":"V031349","value":"CUSTODY"},"accountNumber":{"source":"USER","sourceId":"V031349","value":"QQ459"},"custodyAccountNumber":null,"moveTypes":null,"custodianLegalName":{"source":null,"sourceId":"V031349","value":null},"custodyAccountType":{"source":"USER","sourceId":"V031349","value":"Securities"},"role":{"source":"USER","sourceId":"V031349","value":"Secured Party"},"accountName":{"source":"USER","sourceId":"V031349","value":"QQ459"},"destinationSystem":{"source":"USER","sourceId":"V031349","value":"GTA-DCM"},"currency":{"source":null,"sourceId":null,"value":null},"custodianAccount":{"source":null,"sourceId":null,"value":null},"custodianUcn":{"source":null,"sourceId":"V031349","value":null},"custodianECI":{"source":null,"sourceId":"V031349","value":null},"isCustodyFund":{"source":"USER","sourceId":"V031349","value":"YES"},"tripartyAccountType":null,"custodian":null,"sendersInstructionReference":null,"eligibilityProfile":null,"providerLongbox":null,"counterpartyId":null,"tradeDate":null,"pledgingEntityPlatform":null,"receiversCollateralReference":null,"agreementIds":{"source":"USER","sourceId":null,"value":["110006209"]},"defaultProfileIds":null,"collateralRelationshipId":null,"rehypothecation":{"source":"USER","sourceId":"W534015","value":"YES"},"restrictedRehypothecation":{"source":"USER","sourceId":"W534015","value":"YES"},"sourceCustodianLegalName":null,"sourceCustodianAccount":null,"sourceCustodianUcn":null,"sourceCustodianEci":null,"setupComplete":null,"segregatedInterestAccount":null,"mmdaAccount":null,"polarisAccount":null,"thirdPartyFeedName":null,"thirdPartyAccountNumber":null,"thirdPartyFlag":null,"swiftFlag":null,"acaAccountModel":null,"pledgorAccount":null,"clientBIC":null,"leToReturnViaSwift":null,"segregatedAccountId":null,"executionDate":null,"exposureType":null,"exposureObligor":null,"agentEncumbrance":null,"jurisdictionEncumbrance":null,"imosOwnershipCAID":null,"imosCustodyLocationCaid":null,"marginingEntityId":null,"cmOwnershipCAID":null,"sourceCAID":null,"positionAvailableAtCustodian":null,"custodianBIC":null,"poaInstructionModel":null,"shadowAccountNumber":null,"splitType":{"source":"USER","sourceId":null,"value":"IM"},"counterPartyGroups":null,"nettingGroupProfileIds":null,"leSubEntities":null,"leToReturnViaAsm":null,"prodParallel":null,"profileStatus":"LIVE"},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null}],"statements":[{"profileId":"80011631","lineOfBusiness":"DCM","profileType":"STATEMENT","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1706888615.536,"updatedDtm":1731407489.836,"updatedBy":"V031349","version":4,"attributes":{"agreementIds":{"source":"USER","sourceId":null,"value":["110006209"]},"codedStatementName":null,"statementPreferences":{"source":"USER","sourceId":null,"value":[{"email":"liam.d.marsh$jpmorgan.com","name":"Liam!Marsh","contactId":"20","contactType":"CSR","isInternalContact":"YES","contactTypeValue":null,"relationshipType":null,"recipientType":"TO","portal":null,"ftp":null,"emailTemplate":null,"collateralStatement":{"emailPreferencePdf":"DETAIL","emailPreferenceXls":"DETAIL","emailPreferenceCsv":null,"emailPreferenceFtp":null,"morcomFlag":null,"portalPdf":null,"portalXls":null,"portalFtp":null,"sendConfNotice":null},"interestStatement":{"emailPreferencePdf":"DETAIL","emailPreferenceXls":"DETAIL","emailPreferenceCsv":"DETAIL","emailPreferenceFtp":null,"morcomFlag":null,"portalPdf":null,"portalXls":null,"portalFtp":null,"sendConfNotice":null},"contactGroup":"DCM NA-EMEA","detailStatement":null,"accountSummary":{"emailPreferencePdf":null,"emailPreferenceXls":null,"emailPreferenceCsv":null,"emailPreferenceFtp":null,"morcomFlag":null,"portalPdf":null,"portalXls":null,"portalFtp":null,"sendConfNotice":null},"tradeFeed":null,"settlementNotification":"NONE","substitutionSettlement":null,"marginCallChaser":"EMAIL"}]},"collateralRelationshipId":null},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null}],"settlementInstructions":[{"profileId":"90013458","lineOfBusiness":"DCM","profileType":"SSI","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1628584140.638,"updatedDtm":1628584140.638,"updatedBy":"V031349","version":1,"attributes":{"agreementId":{"source":"USER","sourceId":null,"value":"110006209"},"defaultProfileId":null,"collateralRelationshipId":null,"settlementInstructionType":{"source":"USER","sourceId":null,"value":"SECURITIES"},"currency":null,"marketCode":{"source":"USER","sourceId":null,"value":"EUROC"},"accountNumber":null,"paymentType":null,"assetType":{"source":"USER","sourceId":null,"value":"GS"},"pledgor":{"source":"USER","sourceId":null,"value":"BOTH"},"cpDescription":{"source":"USER","sourceId":null,"value":"ABC"},"bankIdentifierCode":{"source":"USER","sourceId":null,"value":"ABC"},"cpAccount":null,"agentBankIdentifierCode":{"source":"USER","sourceId":null,"value":"EU12350"},"agentDescription":{"source":"USER","sourceId":null,"value":"123"},"depository":{"source":"USER","sourceId":null,"value":"Euro Clear"},"additionalInfo":null,"depotCpId":null,"cpUcn":{"source":"USER","sourceId":null,"value":"000079251000"},"securitySsiType":{"source":"USER","sourceId":null,"value":"Default"},"custodyAccount":null,"branch":null,"usualId":null,"messageType":null,"swiftAddress":null,"bankName":null,"effectiveDtm":null,"exposureType":{"source":"USER","sourceId":null,"value":["IM"]},"assetCode":null,"assetCountry":null,"assetCurrency":null,"placeOfHolding":null,"placeOfHoldingDepository":null,"market":{"source":"USER","sourceId":null,"value":"EUROC"}},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"90031224","lineOfBusiness":"DCM","profileType":"SSI","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1676910295.416,"updatedDtm":1746185149.621,"updatedBy":"W596342","version":2,"attributes":{"agreementId":{"source":"USER","sourceId":null,"value":"110006209"},"defaultProfileId":null,"collateralRelationshipId":null,"settlementInstructionType":{"source":"USER","sourceId":"V031349","value":"SECURITIES"},"currency":null,"marketCode":{"source":"USER","sourceId":"W596342","value":"SINGA"},"accountNumber":{"source":null,"sourceId":null,"value":null},"paymentType":null,"assetType":{"source":"USER","sourceId":"V031349","value":"GS"},"pledgor":{"source":"USER","sourceId":"V031349","value":"BOTH"},"cpDescription":{"source":"USER","sourceId":"V031349","value":"ABC"},"bankIdentifierCode":{"source":"USER","sourceId":"V031349","value":"ABC"},"cpAccount":{"source":null,"sourceId":null,"value":null},"agentBankIdentifierCode":{"source":null,"sourceId":null,"value":null},"agentDescription":{"source":"USER","sourceId":"V031349","value":"132"},"depository":{"source":null,"sourceId":null,"value":null},"additionalInfo":{"source":null,"sourceId":null,"value":null},"depotCpId":{"source":null,"sourceId":null,"value":null},"cpUcn":{"source":"USER","sourceId":null,"value":"000079251000"},"securitySsiType":{"source":"USER","sourceId":"V031349","value":"Default"},"custodyAccount":null,"branch":null,"usualId":null,"messageType":null,"swiftAddress":null,"bankName":null,"effectiveDtm":null,"exposureType":{"source":"USER","sourceId":"V031349","value":["IM"]},"assetCode":{"source":"USER","sourceId":null,"value":null},"assetCountry":{"source":"USER","sourceId":null,"value":null},"assetCurrency":{"source":"USER","sourceId":null,"value":null},"placeOfHolding":null,"placeOfHoldingDepository":null,"market":{"source":"USER","sourceId":"W596342","value":"SINGA"}},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"90033238","lineOfBusiness":"DCM","profileType":"SSI","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1718297770.681,"updatedDtm":1718297770.681,"updatedBy":"V031349","version":1,"attributes":{"agreementId":{"source":"USER","sourceId":null,"value":"110006209"},"defaultProfileId":null,"collateralRelationshipId":null,"settlementInstructionType":{"source":"USER","sourceId":"V031349","value":"SECURITIES"},"currency":null,"marketCode":{"source":null,"sourceId":null,"value":null},"accountNumber":{"source":null,"sourceId":null,"value":null},"paymentType":null,"assetType":{"source":null,"sourceId":null,"value":null},"pledgor":{"source":"USER","sourceId":"V031349","value":"BOTH"},"cpDescription":{"source":null,"sourceId":null,"value":null},"bankIdentifierCode":{"source":null,"sourceId":null,"value":null},"cpAccount":{"source":null,"sourceId":null,"value":null},"agentBankIdentifierCode":{"source":null,"sourceId":null,"value":null},"agentDescription":{"source":null,"sourceId":null,"value":null},"depository":{"source":null,"sourceId":null,"value":null},"additionalInfo":{"source":null,"sourceId":null,"value":null},"depotCpId":{"source":null,"sourceId":null,"value":null},"cpUcn":{"source":"USER","sourceId":null,"value":"000079251000"},"securitySsiType":{"source":"USER","sourceId":"V031349","value":"Default"},"custodyAccount":null,"branch":null,"usualId":null,"messageType":null,"swiftAddress":null,"bankName":null,"effectiveDtm":null,"exposureType":{"source":"USER","sourceId":"V031349","value":["IM"]},"assetCode":{"source":"USER","sourceId":"V031349","value":["EQ"]},"assetCountry":{"source":"USER","sourceId":null,"value":null},"assetCurrency":{"source":"USER","sourceId":null,"value":null},"placeOfHolding":null,"placeOfHoldingDepository":null,"market":{"source":null,"sourceId":null,"value":null}},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null},{"profileId":"90041190","lineOfBusiness":"DCM","profileType":"SSI","profileStatus":"LIVE","createdBy":"V031349","createdDtm":1732266942.184,"updatedDtm":1732266942.184,"updatedBy":"V031349","version":1,"attributes":{"agreementId":{"source":"USER","sourceId":null,"value":"110006209"},"defaultProfileId":null,"collateralRelationshipId":null,"settlementInstructionType":{"source":"USER","sourceId":"V031349","value":"SECURITIES"},"currency":null,"marketCode":{"source":null,"sourceId":null,"value":null},"accountNumber":{"source":null,"sourceId":null,"value":null},"paymentType":null,"assetType":{"source":null,"sourceId":null,"value":null},"pledgor":{"source":"USER","sourceId":"V031349","value":"BOTH"},"cpDescription":{"source":null,"sourceId":null,"value":null},"bankIdentifierCode":{"source":null,"sourceId":null,"value":null},"cpAccount":{"source":null,"sourceId":null,"value":null},"agentBankIdentifierCode":{"source":null,"sourceId":null,"value":null},"agentDescription":{"source":null,"sourceId":null,"value":null},"depository":{"source":null,"sourceId":null,"value":null},"additionalInfo":{"source":null,"sourceId":null,"value":null},"depotCpId":{"source":null,"sourceId":null,"value":null},"cpUcn":{"source":"USER","sourceId":null,"value":"000079251000"},"securitySsiType":{"source":"USER","sourceId":"V031349","value":"Shadow"},"custodyAccount":null,"branch":null,"usualId":null,"messageType":null,"swiftAddress":null,"bankName":null,"effectiveDtm":null,"exposureType":{"source":"USER","sourceId":"V031349","value":["IM"]},"assetCode":{"source":"USER","sourceId":"V031349","value":["EQ"]},"assetCountry":{"source":"USER","sourceId":null,"value":null},"assetCurrency":{"source":"USER","sourceId":null,"value":null},"placeOfHolding":null,"placeOfHoldingDepository":null,"market":{"source":null,"sourceId":null,"value":null}},"approvedDtm":null,"approvedBy":null,"comments":null,"activationDtm":null}],"consolidatedStatement":[],"contacts":[],"cassAccounts":[],"nettingGroupProfiles":[],"disputeProfiles":[],"commitmentProfiles":[],"requirementProfiles":[],"contactProfiles":[],"defaultProfiles":[],"collateralMoveSimulationProfiles":[]},"profileOverrides":null}



//abcd request

{
    "compositeProfile": {
        "legalAgreement": {
            "profileId": "110006209",
            "lineOfBusiness": "DCM",
            "profileType": "CONTRACT",
            "profileStatus": "LIVE",
            "createdBy": "V031349",
            "createdDtm": 1706888614.475000000,
            "updatedDtm": 1746185149.329000000,
            "updatedBy": "W596342",
            "version": 12,
            "attributes": {
                "parties": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "role": "LEGAL_OWNER",
                            "eci": "0200002470",
                            "ucn": "006917413000",
                            "spn": "0233463",
                            "name": "ABADOM CONSULTANCY",
                            "lei": "549300CU86T3N3GOAZ25",
                            "sapLeCode": null,
                            "principalLei": "549300CU86T3N3GOAZ25",
                            "principalEci": "0200002470",
                            "cbd": null,
                            "leCode": null,
                            "goldenEntityEci": null,
                            "goldenEntityName": null
                        },
                        {
                            "role": "COUNTERPARTY",
                            "eci": "0216026194",
                            "ucn": "000079251000",
                            "spn": "0127531",
                            "name": "AAKULA CHARTERED PLANE SERVICES",
                            "lei": "KX1WK48MPD4Y2NCUIZ63",
                            "sapLeCode": null,
                            "principalLei": "KX1WK48MPD4Y2NCUIZ63",
                            "principalEci": "0216026194",
                            "cbd": null,
                            "leCode": null,
                            "goldenEntityEci": null,
                            "goldenEntityName": null
                        },
                        {
                            "role": "LEGAL_OWNER_PARENT",
                            "eci": "0186611851",
                            "ucn": "027440940000",
                            "spn": "1314595",
                            "name": "ASEIDU INVESTMENT HOLDINGS",
                            "lei": "5493003T8SZSHOGGAW52",
                            "sapLeCode": null,
                            "principalLei": "5493003T8SZSHOGGAW52",
                            "principalEci": "0186611851",
                            "cbd": null,
                            "leCode": null,
                            "goldenEntityEci": null,
                            "goldenEntityName": null
                        }
                    ]
                },
                "documentDate": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "11-Mar-2020"
                },
                "goLiveDate": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "11-Mar-2020"
                },
                "governingLaw": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "UNITED KINGDOM"
                },
                "region": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "EUROPE"
                },
                "comments": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "ACA"
                },
                "thresholdMonitoring": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "NO"
                },
                "bilateralFlag": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "unilateralCPFavour": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "regulatoryAgreement": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "segregationModel": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NA"
                },
                "splitType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "IM"
                },
                "pledgorSegregationModel": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "ACA"
                },
                "securedPartySegregationModel": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "ACA"
                },
                "agreementType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "OTC"
                },
                "agreementReportingType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "ISDA"
                },
                "midBidPriceIndicator": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "MID"
                },
                "reportingCurrency": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "GBP"
                },
                "parameterCurrency": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "GBP"
                },
                "roundingAmount": {
                    "source": "USER",
                    "sourceId": null,
                    "value": 10000
                },
                "legalEntityMTA": {
                    "source": "USER",
                    "sourceId": null,
                    "value": {
                        "ratingCriteria": "FIXED_AMOUNT",
                        "ratings": [
                            {
                                "moodyRating": "NA",
                                "spRating": "NA",
                                "amount": 250000,
                                "idCurrency": null
                            }
                        ],
                        "pairedRatings": [
                            {
                                "from": null,
                                "to": null,
                                "amount": 250000,
                                "idCurrency": null
                            }
                        ],
                        "grossNet": null
                    }
                },
                "counterPartyMTA": {
                    "source": "USER",
                    "sourceId": null,
                    "value": {
                        "ratingCriteria": "FIXED_AMOUNT",
                        "ratings": [
                            {
                                "moodyRating": "NA",
                                "spRating": "NA",
                                "amount": 250000,
                                "idCurrency": null
                            }
                        ],
                        "pairedRatings": [
                            {
                                "from": null,
                                "to": null,
                                "amount": 250000,
                                "idCurrency": null
                            }
                        ],
                        "grossNet": null
                    }
                },
                "legalEntityThreshold": {
                    "source": "USER",
                    "sourceId": null,
                    "value": {
                        "ratingCriteria": "FIXED_AMOUNT",
                        "ratings": [
                            {
                                "moodyRating": "NA",
                                "spRating": "NA",
                                "amount": 0,
                                "idCurrency": null
                            }
                        ],
                        "pairedRatings": [
                            {
                                "from": null,
                                "to": null,
                                "amount": 0,
                                "idCurrency": null
                            }
                        ],
                        "thresholdPreferences": null
                    }
                },
                "counterPartyThreshold": {
                    "source": "USER",
                    "sourceId": null,
                    "value": {
                        "ratingCriteria": "FIXED_AMOUNT",
                        "ratings": [
                            {
                                "moodyRating": "NA",
                                "spRating": "NA",
                                "amount": 0,
                                "idCurrency": null
                            }
                        ],
                        "pairedRatings": [
                            {
                                "from": null,
                                "to": null,
                                "amount": 0,
                                "idCurrency": null
                            }
                        ],
                        "thresholdPreferences": null
                    }
                },
                "callNotificationTime": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "12:00 PM"
                },
                "callNotificationLocation": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "LONDON"
                },
                "csaNotificationTimezone": null,
                "transferTime": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "T +0"
                },
                "csaTransferTime": null,
                "requirementHairCut": {
                    "source": "USER",
                    "sourceId": null,
                    "value": 0
                },
                "businessDayLocations": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        "London"
                    ]
                },
                "cnsdrRegHolidaySettlement": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "callFrequency": null,
                "callFrequencies": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "frequency": "DAILY",
                            "daysOfWeek": null,
                            "weekOfMonth": null,
                            "dateOfMonth": null,
                            "countBusinessDayFrom": null,
                            "businessDay": null,
                            "directionOfSubstitution": null,
                            "valuationRequired": null,
                            "statementRequired": null,
                            "details": null,
                            "startDate": null,
                            "quarterlyMonth": null,
                            "specificDate": null
                        }
                    ]
                },
                "callFrequencyComments": null,
                "eligibleProducts": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        "FX FWD"
                    ]
                },
                "autoAgreeFlag": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "acadiaSoftEnabled": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "stpRba": {
                    "source": "USER",
                    "sourceId": "F627126",
                    "value": "NO"
                },
                "stpAcadiaMovesFlag": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "disputeToleranceType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "Fixed Amount"
                },
                "disputeToleranceAmount": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "10000"
                },
                "agreementName": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "BHL818"
                },
                "stpCancellationFlag": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "YES"
                },
                "enableCashCopySwift": null,
                "destinationBICAddress": null,
                "ampID": null,
                "agreementNameOverride": null,
                "agreementNameOverrideFlag": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "YES"
                },
                "password": null,
                "confirmPassword": null,
                "isPasswordRequired": null,
                "autoReleaseFlag": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "autoReleaseTime": {
                    "source": "USER",
                    "sourceId": "F627126",
                    "value": null
                },
                "marginCallCobDate": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "Last Business Day"
                },
                "autoRecallFromClient": null,
                "imosPublisherSuppression": null,
                "clearedMarginOversightEnabled": null,
                "bufferSetup": null,
                "marginValidationSetup": null,
                "interestSchedule": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "Monthly"
                },
                "interestAccrualEndDate": null,
                "interestStmtApproval": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "GROUP STATEMENTS APPROVAL"
                },
                "allowInterestMoves": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "autoPayInterest": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "NO"
                },
                "weekly": {
                    "source": "USER",
                    "sourceId": "W596342",
                    "value": null
                },
                "autoReturnOrDeliverToClient": null,
                "updateDateTime": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        2021,
                        8,
                        10
                    ]
                },
                "considerIncomeEvent": null,
                "considerCoacs": null,
                "effectivePeriod": null,
                "rehypothecateFlag": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": "YES"
                },
                "rehypothecationSecurities": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": "YES"
                },
                "rehypothecationCash": null,
                "rehypothecationCashCurrencies": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": []
                },
                "restrictedRehypothecation": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": "YES"
                },
                "restrictedRehypoSecurities": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": "YES"
                },
                "restrictedRehypoCash": null,
                "restrictedRehypoCashCurrencies": {
                    "source": "USER",
                    "sourceId": "W534015",
                    "value": []
                },
                "positionOrderSource": {
                    "source": "USER",
                    "sourceId": "V031349",
                    "value": [
                        {
                            "type": "External Client Owned",
                            "value": "G 22812",
                            "order": 1,
                            "splitTypes": []
                        },
                        {
                            "type": "Client Owned",
                            "value": "U2812",
                            "order": 2,
                            "splitTypes": []
                        },
                        {
                            "type": "Client Owned",
                            "value": "U2813",
                            "order": 2,
                            "splitTypes": []
                        },
                        {
                            "type": "Client Owned",
                            "value": "LB233463UW",
                            "order": 3,
                            "splitTypes": []
                        }
                    ]
                },
                "clearedAutoFundAccountBySplitType": null,
                "ampMarginFlag": null,
                "calculationType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "DERIVATIVES"
                },
                "imDisputeThreshold": null,
                "cpPostingBasis": null,
                "customerType": null,
                "customerTypeId": null,
                "disputeThresholdAmount": null,
                "disputeThresholdPercentage": null,
                "holidayRegion": null,
                "hybridOffset": null,
                "iaAmpIndicator": null,
                "marginFlowType": null,
                "imSegregationModel": null,
                "interEntityImSplitType": null,
                "moveSplitFlag": null,
                "nccaFlag": null,
                "jpmMarginFlg": null,
                "leImDisputeThreshold": null,
                "lePostingBasis": null,
                "receiveReviewRequiredFlag": null,
                "payReviewRequiredFlag": null,
                "leModelType": null,
                "moveDisableFlag": null,
                "prmsMarginClientFlag": null,
                "variableReportingCurrency": null,
                "imCpRehypoFlag": null,
                "imLeRehypoFlag": null,
                "valuationAgentId": null,
                "valuationAgentFlag": null,
                "soleCalcAgent": null,
                "settlementCurrency": null,
                "vmCpRehypoFlag": null,
                "vmLeRehypoFlag": null,
                "cimActionRequiredFlag": null,
                "cimApprovalRequiredFlag": null,
                "grossPaymentNettingFlag": null,
                "rimSegregationModel": null,
                "sourceSystem": null,
                "linkedQueryIds": null,
                "groupId": null,
                "isMtuIndFlag": null,
                "isTripartyFlag": null,
                "agreementAlias": null,
                "relatedPbAgreementNumber": null,
                "csaType": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "IM"
                },
                "imReportingCurrency": null,
                "specialCustomerType": null,
                "houseMarginCalculationModels": null,
                "settlementNetting": null,
                "includeLegacyTrades": null,
                "crossMarginingApplicable": null,
                "includeOutOfScopeSensitivities": null,
                "includeFXSpots": null,
                "excludeJumpToDefaultAddOn": null,
                "simmPortfolioAddOn": null,
                "imosAgreementCaid": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "U101049304"
                },
                "imosOwnershipCaid": null,
                "cmOwnershipCaid": null,
                "masterAgreementVersion": null,
                "independentAdjustments": null,
                "independentAmounts": null,
                "legalEntityIndependentAmounts": null,
                "counterPartyIndependentAmounts": null,
                "roundingAmountLE": null,
                "returnRoundingAmountLE": null,
                "returnRoundingAmountCP": null,
                "roundingAmountCP": null,
                "imTermFlag": null,
                "csCsaCovered": null,
                "roundingAmountCurrencyCP": null,
                "returnRoundingAmountCurrencyCP": null,
                "roundingAmountCurrencyLE": null,
                "returnRoundingAmountCurrencyLE": null,
                "independentAmountReturnable": null,
                "calculationCurrency": null,
                "imFloorAmount": null,
                "mtmCalcType": null,
                "excludeFxNopSpotFlag": null,
                "grossCPMinimumTransferAmount": null,
                "grossLEMinimumTransferAmount": null,
                "iaMultiplier": null,
                "marginProducts": null,
                "primaryUnifiedDocId": null,
                "primaryDocTitle": null,
                "colValDisputeResolution": null,
                "firstParty": null,
                "jpmRole": null,
                "multiApplicableUnderAgreement": null,
                "priceSource": null,
                "secondParty": null,
                "partyAssignedJPLE": null,
                "ctpyCltrl": null,
                "mktValDetermination": null,
                "mktValPriceDisupute": null,
                "transferabilityCP": null,
                "transferabilityJPM": null,
                "mgnPaymentLateNotice": null,
                "mgnPaymentTimelyNotice": null,
                "jpmCollateral": null,
                "amendmentsEffectiveDate": null,
                "allBranchesCounterPartyValue": null,
                "standardPartyInNovationNet": null,
                "standardPartyInSettlementNet": null,
                "standardPartyCltOid": null,
                "collateralStandardParty": null,
                "standardPartyJpmGuranteeExist": null,
                "standardPartyInCloseoutNet": null,
                "secondaryUnifiedDocId": null,
                "secondaryDocumentTitle": null,
                "primaryDocumentCreationDate": null,
                "secondaryDocumentCreationDate": null,
                "primaryDocumentEffectiveDate": null,
                "secondaryDocumentEffectiveDate": null,
                "primaryDocumentExpirationDate": null,
                "secondaryDocumentExpirationDate": null,
                "primaryDocumentModificationDate": null,
                "secondaryDocumentModificationDate": null,
                "primaryAgreementCreator": null,
                "secondaryAgreementCreator": null,
                "primaryDocumentCreatorName": null,
                "secondaryDocumentCreatorName": null,
                "primaryTaxonomyVersionId": null,
                "secondaryTaxonomyVersionId": null,
                "primaryAgreementGoverningLawCountry": null,
                "secondaryAgreementGoverningLawCountry": null,
                "primaryAgreementGoverningLawState": null,
                "secondaryAgreementGoverningLawState": null,
                "investorAdvisorUcn": null,
                "csUcnIa": null,
                "governingLawCountryDescription": null,
                "governingLawRegionDescription": null,
                "contractType": null,
                "preferred": null,
                "additionalPrimaryGoverningLaw": null,
                "inIsda10A": null,
                "crossDefaultPaymentMaxVal": null,
                "masterAgreementFinancialCovenantType": null,
                "electiveTerminationRightsExists": null,
                "jpCreditEventUponMergerApplies": null,
                "cpCreditEventUponMergerApplies": null,
                "isApplicableSPNBranch": null,
                "calculationAgent": null,
                "isApplicableOFFBranch": null,
                "isJpmCollateralMaxValSet": null,
                "jpmGuaranteeExists": null,
                "jpmCloseOutApplicable": null,
                "cpCloseOutApplicable": null,
                "jpOfficialSettlementType": null,
                "cpOfficialSettlementType": null,
                "guarantyAgreementFlg": null,
                "jpNovationType": null,
                "cpNovationType": null,
                "inCltrlCounterParty": null,
                "leAutomaticEarlyTerminationApplies": null,
                "cpAutomaticEarlyTerminationApplies": null,
                "terminationCurrency": null,
                "governingLawCountryCode": null,
                "thresholdCurrencyCode": null,
                "governingLawId": null,
                "specificPreferredCallTimeId": null,
                "specificPreferredCallTime": null,
                "executionCutoffTime": null,
                "executionCutoffTimeZone": null,
                "paymentNettingFlag": null,
                "csaTerminationCurrency": null,
                "negativeInterestFlag": null,
                "opicsZeroRateFloor": null,
                "interestRate": null,
                "taxInterestRate": null,
                "returnRoundingAmount": {
                    "source": "USER",
                    "sourceId": null,
                    "value": 10000
                },
                "timeOfNotCalling": null,
                "taxTransferType": null,
                "unregulatedTradeEffectiveDate": null,
                "gracePeriodValue": null,
                "transferTimeValue": null,
                "terminationCurrencyForTwoAffectedPartiesLE": null,
                "terminationCurrencyForTwoAffectedPartiesCP": null,
                "amendColtrExistFlag": null,
                "amendmentDate": null,
                "substitution": null,
                "substitutionRightsId": null,
                "collateralAgreementId": null,
                "valuationDateTimeFrequency": null,
                "valuationDateTimeFrequencyId": null,
                "locId": null,
                "rehypothecationDesc": null,
                "independantAdjustmentType": null,
                "independantAdjustmentTypeId": null,
                "initialVariationMargin": null,
                "collateralAmountsThreshold": null,
                "markToMarkAdjustmentIndependantAmount": null,
                "agreementMarginRegimeProducts": null,
                "legalAgreementCollateralTriggers": null,
                "agreementAgrProProduct": null,
                "agrOffJpmGuranteeExist": null,
                "agrOffInCloseoutNet": null,
                "agrOffInNovationNet": null,
                "agrOffInSettlementNet": null,
                "isCrossMargined": null,
                "familyName": null,
                "upfrontRequiredFlag": null,
                "stpLevel": null,
                "excludeFromDiary": null,
                "marginingSystem": null,
                "interestMarginingSystem": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "JPM"
                },
                "baseId": null,
                "asiaMoveAutomationFlag": null,
                "defaultAssetType": null,
                "moveDisabledComment": null,
                "baseCashMoveProcessingLimits": null,
                "csr": null,
                "imCallDirection": null,
                "coltToBeDoneFlag": null,
                "isEligibleForTradeFlag": null,
                "coltStatus": null,
                "regimeAndComplianceDate": null,
                "investmentAdvisor": null,
                "otcCrossMarginingFlag": null,
                "eligibilitySet": null,
                "statementLegalEntityName": null,
                "isCodedStatement": null,
                "codedStatementName": null,
                "isCsrSignedOff": null,
                "idPrtn": null,
                "citAsOffDate": null,
                "citUntilDate": null,
                "independentAmountType": null,
                "independentAmount": null,
                "eligibleTradeCurrencies": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        "EUR"
                    ]
                },
                "eligibleTradesScheduled": null,
                "eligibleTradesByDate": null,
                "leSubEntity": null,
                "leSubEntityReportingCurrency": {
                    "source": "USER",
                    "sourceId": "V071921",
                    "value": "GBP"
                },
                "borrowFromLESubEntity": {
                    "source": "USER",
                    "sourceId": "V071921",
                    "value": "BLIC"
                },
                "ccp": null,
                "ccpCode": null,
                "linkLeSubEntities": null,
                "linkCpSubEntities": null,
                "clientAgreementAlias": null,
                "clientAgreementAliases": null,
                "counterpartyIndustryClassification": null,
                "clearingAccountNumber": null,
                "splitTypeConfigs": null,
                "imosFundingModel": null,
                "transferTimeCurrencies": null,
                "securityTransferTimes": {
                    "source": "USER",
                    "sourceId": "F627126",
                    "value": [
                        {
                            "transferTime": "T +2",
                            "assetType": "Equities",
                            "countries": [
                                "ALL"
                            ]
                        },
                        {
                            "transferTime": "T +3",
                            "assetType": "Equities",
                            "countries": [
                                "US"
                            ]
                        },
                        {
                            "transferTime": "T +1",
                            "assetType": "Bonds",
                            "countries": [
                                "ALL"
                            ]
                        }
                    ]
                },
                "statementSla": null,
                "statementTimezone": null,
                "stmtTimezone": null,
                "distributionAndInterests": null,
                "mailboxName": null,
                "mailboxEmailAddress": null,
                "securitiesLongboxModel": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "cashLongboxModel": {
                    "source": "USER",
                    "sourceId": null,
                    "value": "YES"
                },
                "autoBookAgreedPayments": null,
                "securityMap": null,
                "clearedAutoFundAccount": null,
                "nonClearedAutoFundCurrency": null,
                "nonClearedAutoFundAccount": null,
                "preferredAccountIds": null,
                "postRegulations": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "value": "United Kingdom Regulators",
                            "code": "UK"
                        }
                    ]
                },
                "receiveRegulations": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "value": "United Kingdom Regulators",
                            "code": "UK"
                        }
                    ]
                },
                "legalEntityOwnershipCaids": [
                    {
                        "source": "DEFAULT",
                        "sourceId": null,
                        "value": {
                            "caid": "A110530878",
                            "qualifier": {
                                "value": "Imos",
                                "code": "IMOS"
                            }
                        }
                    },
                    {
                        "source": "DEFAULT",
                        "sourceId": null,
                        "value": {
                            "caid": "A115451247",
                            "qualifier": {
                                "value": "Collateral Mgmt",
                                "code": "COLLATERAL_MGMT"
                            }
                        }
                    }
                ],
                "simmCalculationCurrency": null,
                "indexDecomposition": null,
                "businessLocations": {
                    "source": "USER",
                    "sourceId": null,
                    "value": [
                        {
                            "value": "London",
                            "valueCode": "GBLON"
                        }
                    ]
                },
                "leCreditRatingRuleDescription": null,
                "cpCreditRatingRuleDescription": null,
                "statementType": null,
                "isImReconRequired": null,
                "marginFlowTypeOverride": null,
                "clientBranchOnStatementFlag": null,
                "dealId": null,
                "collateralMonitoringGroup": null,
                "collateralConfidenceFactor": null,
                "curePeriod": null,
                "fxRegion": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "AMERICA"
                },
                "statementEmailSubject": null,
                "nettingsetRootId": null,
                "segmentId": null,
                "pbLegalEntityMTA": null,
                "pbCounterPartyMTA": null,
                "pbLegalEntityThreshold": null,
                "pbCounterPartyThreshold": null,
                "linkedQueryIdOverride": null,
                "greaterOfClientAgreementPreference": null,
                "segments": null,
                "moveDisabledReason": null,
                "inflationIndexedUnitCurrency": null,
                "inflationIndexedUnitApplicableForThresholdAndMinimumTransferAmount": null,
                "feedDependencies": null,
                "restrictAutomatedReuseOfCollateral": null,
                "agreementShortName": null,
                "agreementShortName2": null,
                "agreementShortName3": null,
                "consentOfRepledge": null,
                "statementPassword": null,
                "markSameDayHoliday": null,
                "roundingForCash": null,
                "roundingValueForCash": null,
                "roundingForSecurities": null,
                "roundingValueForSecurities": null,
                "prodParallel": {
                    "source": "DEFAULT",
                    "sourceId": null,
                    "value": "NO"
                },
                "terminationDate": null,
                "metaTicket": null,
                "traderBook": null,
                "crossMarginEntities": null,
                "crossMarginEntitiesRules": null,
                "crossMarginProductsRules": null,
                "crossMarginCallManagement": null,
                "crossMarginCollateralManagement": null,
                "simmriskClassMultipliers": null
            },
            "approvedDtm": null,
            "approvedBy": null,
            "comments": null,
            "activationDtm": null
        },
        "linkedProfiles": {
            "accounts": [
                {
                    "profileId": "Q1350",
                    "lineOfBusiness": "DCM",
                    "profileType": "ACCOUNT",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1679317997.795000000,
                    "updatedDtm": 1679317997.795000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "accountCategory": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "CUSTODY"
                        },
                        "accountNumber": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Q1350"
                        },
                        "custodyAccountNumber": null,
                        "moveTypes": null,
                        "custodianLegalName": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodyAccountType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Securities"
                        },
                        "role": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Pledgor"
                        },
                        "accountName": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Q1350"
                        },
                        "destinationSystem": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "GTA-DCM"
                        },
                        "currency": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianAccount": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianUcn": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianECI": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "isCustodyFund": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "YES"
                        },
                        "tripartyAccountType": null,
                        "custodian": null,
                        "sendersInstructionReference": null,
                        "eligibilityProfile": null,
                        "providerLongbox": null,
                        "counterpartyId": null,
                        "tradeDate": null,
                        "pledgingEntityPlatform": null,
                        "receiversCollateralReference": null,
                        "agreementIds": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                "110006209"
                            ]
                        },
                        "defaultProfileIds": null,
                        "collateralRelationshipId": null,
                        "rehypothecation": {
                            "source": "USER",
                            "sourceId": "W534015",
                            "value": "YES"
                        },
                        "restrictedRehypothecation": {
                            "source": "USER",
                            "sourceId": "W534015",
                            "value": "YES"
                        },
                        "sourceCustodianLegalName": null,
                        "sourceCustodianAccount": null,
                        "sourceCustodianUcn": null,
                        "sourceCustodianEci": null,
                        "setupComplete": null,
                        "segregatedInterestAccount": null,
                        "mmdaAccount": null,
                        "polarisAccount": null,
                        "thirdPartyFeedName": null,
                        "thirdPartyAccountNumber": null,
                        "thirdPartyFlag": null,
                        "swiftFlag": null,
                        "acaAccountModel": null,
                        "pledgorAccount": null,
                        "clientBIC": null,
                        "leToReturnViaSwift": null,
                        "segregatedAccountId": null,
                        "executionDate": null,
                        "exposureType": null,
                        "exposureObligor": null,
                        "agentEncumbrance": null,
                        "jurisdictionEncumbrance": null,
                        "imosOwnershipCAID": null,
                        "imosCustodyLocationCaid": null,
                        "marginingEntityId": null,
                        "cmOwnershipCAID": null,
                        "sourceCAID": null,
                        "positionAvailableAtCustodian": null,
                        "custodianBIC": null,
                        "poaInstructionModel": null,
                        "shadowAccountNumber": null,
                        "splitType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "IM"
                        },
                        "counterPartyGroups": null,
                        "nettingGroupProfileIds": null,
                        "leSubEntities": null,
                        "leToReturnViaAsm": null,
                        "prodParallel": null
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                },
                {
                    "profileId": "QC459",
                    "lineOfBusiness": "DCM",
                    "profileType": "ACCOUNT",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1732009855.364000000,
                    "updatedDtm": 1732009855.364000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "accountCategory": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "CONTROL"
                        },
                        "accountNumber": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "QC459"
                        },
                        "custodyAccountNumber": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Q1350"
                        },
                        "moveTypes": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "LE due to Deliver",
                                "CP due to Return",
                                "CP Sub Return/LE Sub Deliver"
                            ]
                        },
                        "custodianLegalName": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodyAccountType": null,
                        "role": null,
                        "accountName": null,
                        "destinationSystem": null,
                        "currency": null,
                        "custodianAccount": null,
                        "custodianUcn": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianECI": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "isCustodyFund": null,
                        "tripartyAccountType": null,
                        "custodian": null,
                        "sendersInstructionReference": null,
                        "eligibilityProfile": null,
                        "providerLongbox": null,
                        "counterpartyId": null,
                        "tradeDate": null,
                        "pledgingEntityPlatform": null,
                        "receiversCollateralReference": null,
                        "agreementIds": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                "110006209"
                            ]
                        },
                        "defaultProfileIds": null,
                        "collateralRelationshipId": null,
                        "rehypothecation": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "NO"
                        },
                        "restrictedRehypothecation": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "NO"
                        },
                        "sourceCustodianLegalName": null,
                        "sourceCustodianAccount": null,
                        "sourceCustodianUcn": null,
                        "sourceCustodianEci": null,
                        "setupComplete": null,
                        "segregatedInterestAccount": null,
                        "mmdaAccount": null,
                        "polarisAccount": null,
                        "thirdPartyFeedName": null,
                        "thirdPartyAccountNumber": null,
                        "thirdPartyFlag": null,
                        "swiftFlag": null,
                        "acaAccountModel": null,
                        "pledgorAccount": null,
                        "clientBIC": null,
                        "leToReturnViaSwift": null,
                        "segregatedAccountId": null,
                        "executionDate": null,
                        "exposureType": null,
                        "exposureObligor": null,
                        "agentEncumbrance": null,
                        "jurisdictionEncumbrance": null,
                        "imosOwnershipCAID": null,
                        "imosCustodyLocationCaid": null,
                        "marginingEntityId": null,
                        "cmOwnershipCAID": null,
                        "sourceCAID": null,
                        "positionAvailableAtCustodian": null,
                        "custodianBIC": null,
                        "poaInstructionModel": null,
                        "shadowAccountNumber": null,
                        "splitType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "IM"
                        },
                        "counterPartyGroups": null,
                        "nettingGroupProfileIds": null,
                        "leSubEntities": null,
                        "leToReturnViaAsm": null,
                        "prodParallel": null
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                },
                {
                    "profileId": "QQ459",
                    "lineOfBusiness": "DCM",
                    "profileType": "ACCOUNT",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1679317997.683000000,
                    "updatedDtm": 1679317997.683000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "accountCategory": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "CUSTODY"
                        },
                        "accountNumber": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "QQ459"
                        },
                        "custodyAccountNumber": null,
                        "moveTypes": null,
                        "custodianLegalName": {
                            "source": null,
                            "sourceId": "V031349",
                            "value": null
                        },
                        "custodyAccountType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Securities"
                        },
                        "role": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Secured Party"
                        },
                        "accountName": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "QQ459"
                        },
                        "destinationSystem": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "GTA-DCM"
                        },
                        "currency": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianAccount": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "custodianUcn": {
                            "source": null,
                            "sourceId": "V031349",
                            "value": null
                        },
                        "custodianECI": {
                            "source": null,
                            "sourceId": "V031349",
                            "value": null
                        },
                        "isCustodyFund": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "YES"
                        },
                        "tripartyAccountType": null,
                        "custodian": null,
                        "sendersInstructionReference": null,
                        "eligibilityProfile": null,
                        "providerLongbox": null,
                        "counterpartyId": null,
                        "tradeDate": null,
                        "pledgingEntityPlatform": null,
                        "receiversCollateralReference": null,
                        "agreementIds": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                "110006209"
                            ]
                        },
                        "defaultProfileIds": null,
                        "collateralRelationshipId": null,
                        "rehypothecation": {
                            "source": "USER",
                            "sourceId": "W534015",
                            "value": "YES"
                        },
                        "restrictedRehypothecation": {
                            "source": "USER",
                            "sourceId": "W534015",
                            "value": "YES"
                        },
                        "sourceCustodianLegalName": null,
                        "sourceCustodianAccount": null,
                        "sourceCustodianUcn": null,
                        "sourceCustodianEci": null,
                        "setupComplete": null,
                        "segregatedInterestAccount": null,
                        "mmdaAccount": null,
                        "polarisAccount": null,
                        "thirdPartyFeedName": null,
                        "thirdPartyAccountNumber": null,
                        "thirdPartyFlag": null,
                        "swiftFlag": null,
                        "acaAccountModel": null,
                        "pledgorAccount": null,
                        "clientBIC": null,
                        "leToReturnViaSwift": null,
                        "segregatedAccountId": null,
                        "executionDate": null,
                        "exposureType": null,
                        "exposureObligor": null,
                        "agentEncumbrance": null,
                        "jurisdictionEncumbrance": null,
                        "imosOwnershipCAID": null,
                        "imosCustodyLocationCaid": null,
                        "marginingEntityId": null,
                        "cmOwnershipCAID": null,
                        "sourceCAID": null,
                        "positionAvailableAtCustodian": null,
                        "custodianBIC": null,
                        "poaInstructionModel": null,
                        "shadowAccountNumber": null,
                        "splitType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "IM"
                        },
                        "counterPartyGroups": null,
                        "nettingGroupProfileIds": null,
                        "leSubEntities": null,
                        "leToReturnViaAsm": null,
                        "prodParallel": null
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                }
            ],
            "statements": [
                {
                    "profileId": "80011631",
                    "lineOfBusiness": "DCM",
                    "profileType": "STATEMENT",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1706888615.536000000,
                    "updatedDtm": 1731407489.836000000,
                    "updatedBy": "V031349",
                    "version": 4,
                    "attributes": {
                        "agreementIds": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                "110006209"
                            ]
                        },
                        "codedStatementName": null,
                        "statementPreferences": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                {
                                    "email": "liam.d.marsh$jpmorgan.com",
                                    "name": "Liam!Marsh",
                                    "contactId": "20",
                                    "contactType": "CSR",
                                    "isInternalContact": "YES",
                                    "contactTypeValue": null,
                                    "relationshipType": null,
                                    "recipientType": "TO",
                                    "portal": null,
                                    "ftp": null,
                                    "emailTemplate": null,
                                    "collateralStatement": {
                                        "emailPreferencePdf": "DETAIL",
                                        "emailPreferenceXls": "DETAIL",
                                        "emailPreferenceCsv": null,
                                        "emailPreferenceFtp": null,
                                        "morcomFlag": null,
                                        "portalPdf": null,
                                        "portalXls": null,
                                        "portalFtp": null,
                                        "sendConfNotice": null
                                    },
                                    "interestStatement": {
                                        "emailPreferencePdf": "DETAIL",
                                        "emailPreferenceXls": "DETAIL",
                                        "emailPreferenceCsv": "DETAIL",
                                        "emailPreferenceFtp": null,
                                        "morcomFlag": null,
                                        "portalPdf": null,
                                        "portalXls": null,
                                        "portalFtp": null,
                                        "sendConfNotice": null
                                    },
                                    "contactGroup": "DCM NA-EMEA",
                                    "detailStatement": null,
                                    "accountSummary": {
                                        "emailPreferencePdf": null,
                                        "emailPreferenceXls": null,
                                        "emailPreferenceCsv": null,
                                        "emailPreferenceFtp": null,
                                        "morcomFlag": null,
                                        "portalPdf": null,
                                        "portalXls": null,
                                        "portalFtp": null,
                                        "sendConfNotice": null
                                    },
                                    "tradeFeed": null,
                                    "settlementNotification": "NONE",
                                    "substitutionSettlement": null,
                                    "marginCallChaser": "EMAIL"
                                }
                            ]
                        },
                        "collateralRelationshipId": null
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                }
            ],
            "settlementInstructions": [
                {
                    "profileId": "90013458",
                    "lineOfBusiness": "DCM",
                    "profileType": "SSI",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1628584140.638000000,
                    "updatedDtm": 1628584140.638000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "agreementId": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "110006209"
                        },
                        "defaultProfileId": null,
                        "collateralRelationshipId": null,
                        "settlementInstructionType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "SECURITIES"
                        },
                        "currency": null,
                        "marketCode": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "EUROC"
                        },
                        "accountNumber": null,
                        "paymentType": null,
                        "assetType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "GS"
                        },
                        "pledgor": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "BOTH"
                        },
                        "cpDescription": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "ABC"
                        },
                        "bankIdentifierCode": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "ABC"
                        },
                        "cpAccount": null,
                        "agentBankIdentifierCode": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "EU12350"
                        },
                        "agentDescription": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "123"
                        },
                        "depository": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "Euro Clear"
                        },
                        "additionalInfo": null,
                        "depotCpId": null,
                        "cpUcn": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "000079251000"
                        },
                        "securitySsiType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "Default"
                        },
                        "custodyAccount": null,
                        "branch": null,
                        "usualId": null,
                        "messageType": null,
                        "swiftAddress": null,
                        "bankName": null,
                        "effectiveDtm": null,
                        "exposureType": {
                            "source": "USER",
                            "sourceId": null,
                            "value": [
                                "IM"
                            ]
                        },
                        "assetCode": null,
                        "assetCountry": null,
                        "assetCurrency": null,
                        "placeOfHolding": null,
                        "placeOfHoldingDepository": null,
                        "market": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "EUROC"
                        }
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                },
                {
                    "profileId": "90031224",
                    "lineOfBusiness": "DCM",
                    "profileType": "SSI",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1676910295.416000000,
                    "updatedDtm": 1746185149.621000000,
                    "updatedBy": "W596342",
                    "version": 2,
                    "attributes": {
                        "agreementId": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "110006209"
                        },
                        "defaultProfileId": null,
                        "collateralRelationshipId": null,
                        "settlementInstructionType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "SECURITIES"
                        },
                        "currency": null,
                        "marketCode": {
                            "source": "USER",
                            "sourceId": "W596342",
                            "value": "SINGA"
                        },
                        "accountNumber": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "paymentType": null,
                        "assetType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "GS"
                        },
                        "pledgor": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "BOTH"
                        },
                        "cpDescription": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "ABC"
                        },
                        "bankIdentifierCode": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "ABC"
                        },
                        "cpAccount": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentBankIdentifierCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentDescription": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "132"
                        },
                        "depository": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "additionalInfo": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "depotCpId": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "cpUcn": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "000079251000"
                        },
                        "securitySsiType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Default"
                        },
                        "custodyAccount": null,
                        "branch": null,
                        "usualId": null,
                        "messageType": null,
                        "swiftAddress": null,
                        "bankName": null,
                        "effectiveDtm": null,
                        "exposureType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "IM"
                            ]
                        },
                        "assetCode": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "assetCountry": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "assetCurrency": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "placeOfHolding": null,
                        "placeOfHoldingDepository": null,
                        "market": {
                            "source": "USER",
                            "sourceId": "W596342",
                            "value": "SINGA"
                        }
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                },
                {
                    "profileId": "90033238",
                    "lineOfBusiness": "DCM",
                    "profileType": "SSI",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1718297770.681000000,
                    "updatedDtm": 1718297770.681000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "agreementId": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "110006209"
                        },
                        "defaultProfileId": null,
                        "collateralRelationshipId": null,
                        "settlementInstructionType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "SECURITIES"
                        },
                        "currency": null,
                        "marketCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "accountNumber": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "paymentType": null,
                        "assetType": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "pledgor": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "BOTH"
                        },
                        "cpDescription": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "bankIdentifierCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "cpAccount": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentBankIdentifierCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentDescription": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "depository": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "additionalInfo": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "depotCpId": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "cpUcn": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "000079251000"
                        },
                        "securitySsiType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Default"
                        },
                        "custodyAccount": null,
                        "branch": null,
                        "usualId": null,
                        "messageType": null,
                        "swiftAddress": null,
                        "bankName": null,
                        "effectiveDtm": null,
                        "exposureType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "IM"
                            ]
                        },
                        "assetCode": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "EQ"
                            ]
                        },
                        "assetCountry": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "assetCurrency": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "placeOfHolding": null,
                        "placeOfHoldingDepository": null,
                        "market": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        }
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                },
                {
                    "profileId": "90041190",
                    "lineOfBusiness": "DCM",
                    "profileType": "SSI",
                    "profileStatus": "LIVE",
                    "createdBy": "V031349",
                    "createdDtm": 1732266942.184000000,
                    "updatedDtm": 1732266942.184000000,
                    "updatedBy": "V031349",
                    "version": 1,
                    "attributes": {
                        "agreementId": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "110006209"
                        },
                        "defaultProfileId": null,
                        "collateralRelationshipId": null,
                        "settlementInstructionType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "SECURITIES"
                        },
                        "currency": null,
                        "marketCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "accountNumber": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "paymentType": null,
                        "assetType": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "pledgor": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "BOTH"
                        },
                        "cpDescription": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "bankIdentifierCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "cpAccount": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentBankIdentifierCode": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "agentDescription": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "depository": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "additionalInfo": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "depotCpId": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        },
                        "cpUcn": {
                            "source": "USER",
                            "sourceId": null,
                            "value": "000079251000"
                        },
                        "securitySsiType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": "Shadow"
                        },
                        "custodyAccount": null,
                        "branch": null,
                        "usualId": null,
                        "messageType": null,
                        "swiftAddress": null,
                        "bankName": null,
                        "effectiveDtm": null,
                        "exposureType": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "IM"
                            ]
                        },
                        "assetCode": {
                            "source": "USER",
                            "sourceId": "V031349",
                            "value": [
                                "EQ"
                            ]
                        },
                        "assetCountry": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "assetCurrency": {
                            "source": "USER",
                            "sourceId": null,
                            "value": null
                        },
                        "placeOfHolding": null,
                        "placeOfHoldingDepository": null,
                        "market": {
                            "source": null,
                            "sourceId": null,
                            "value": null
                        }
                    },
                    "approvedDtm": null,
                    "approvedBy": null,
                    "comments": null,
                    "activationDtm": null
                }
            ],
            "consolidatedStatement": [],
            "contacts": [],
            "cassAccounts": [],
            "nettingGroupProfiles": [],
            "disputeProfiles": [],
            "commitmentProfiles": [],
            "requirementProfiles": [],
            "contactProfiles": [],
            "defaultProfiles": [],
            "collateralMoveSimulationProfiles": []
        },
        "profileOverrides": null
    }
}
